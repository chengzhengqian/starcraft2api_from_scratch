{- This file was auto-generated from s2clientprotocol/sc2api.proto by the proto-lens-protoc program. -}
{-# LANGUAGE ScopedTypeVariables, DataKinds, TypeFamilies, UndecidableInstances, GeneralizedNewtypeDeriving, MultiParamTypeClasses, FlexibleContexts, FlexibleInstances, PatternSynonyms, MagicHash, NoImplicitPrelude, DataKinds, BangPatterns, TypeApplications, OverloadedStrings, DerivingStrategies#-}
{-# OPTIONS_GHC -Wno-unused-imports#-}
{-# OPTIONS_GHC -Wno-duplicate-exports#-}
{-# OPTIONS_GHC -Wno-dodgy-exports#-}
module Proto.S2clientprotocol.Sc2api (
        AIBuild(..), AIBuild(), Action(), ActionChat(),
        ActionChat'Channel(..), ActionChat'Channel(), ActionError(),
        ActionObserverCameraFollowPlayer(),
        ActionObserverCameraFollowUnits(), ActionObserverCameraMove(),
        ActionObserverPlayerPerspective(), Alert(..), Alert(),
        ChatReceived(), Difficulty(..), Difficulty(), InterfaceOptions(),
        LocalMap(), Observation(), ObserverAction(),
        ObserverAction'Action(..), _ObserverAction'PlayerPerspective,
        _ObserverAction'CameraMove, _ObserverAction'CameraFollowPlayer,
        _ObserverAction'CameraFollowUnits, PlayerCommon(), PlayerInfo(),
        PlayerInfoExtra(), PlayerResult(), PlayerSetup(), PlayerType(..),
        PlayerType(), PortSet(), Request(), Request'Request(..),
        _Request'CreateGame, _Request'JoinGame, _Request'RestartGame,
        _Request'StartReplay, _Request'LeaveGame, _Request'QuickSave,
        _Request'QuickLoad, _Request'Quit, _Request'GameInfo,
        _Request'Observation, _Request'Action, _Request'ObsAction,
        _Request'Step, _Request'Data, _Request'Query, _Request'SaveReplay,
        _Request'MapCommand, _Request'ReplayInfo, _Request'AvailableMaps,
        _Request'SaveMap, _Request'Ping, _Request'Debug, RequestAction(),
        RequestAvailableMaps(), RequestCreateGame(),
        RequestCreateGame'Map(..), _RequestCreateGame'LocalMap,
        _RequestCreateGame'BattlenetMapName, RequestData(), RequestDebug(),
        RequestGameInfo(), RequestJoinGame(),
        RequestJoinGame'Participation(..), _RequestJoinGame'Race,
        _RequestJoinGame'ObservedPlayerId, RequestLeaveGame(),
        RequestMapCommand(), RequestObservation(), RequestObserverAction(),
        RequestPing(), RequestQuickLoad(), RequestQuickSave(),
        RequestQuit(), RequestReplayInfo(), RequestReplayInfo'Replay(..),
        _RequestReplayInfo'ReplayPath, _RequestReplayInfo'ReplayData,
        RequestRestartGame(), RequestSaveMap(), RequestSaveReplay(),
        RequestStartReplay(), RequestStartReplay'Replay(..),
        _RequestStartReplay'ReplayPath, _RequestStartReplay'ReplayData,
        RequestStep(), Response(), Response'Response(..),
        _Response'CreateGame, _Response'JoinGame, _Response'RestartGame,
        _Response'StartReplay, _Response'LeaveGame, _Response'QuickSave,
        _Response'QuickLoad, _Response'Quit, _Response'GameInfo,
        _Response'Observation, _Response'Action, _Response'ObsAction,
        _Response'Step, _Response'Data, _Response'Query,
        _Response'SaveReplay, _Response'ReplayInfo,
        _Response'AvailableMaps, _Response'SaveMap, _Response'MapCommand,
        _Response'Ping, _Response'Debug, ResponseAction(),
        ResponseAvailableMaps(), ResponseCreateGame(),
        ResponseCreateGame'Error(..), ResponseCreateGame'Error(),
        ResponseData(), ResponseDebug(), ResponseGameInfo(),
        ResponseJoinGame(), ResponseJoinGame'Error(..),
        ResponseJoinGame'Error(), ResponseLeaveGame(),
        ResponseMapCommand(), ResponseMapCommand'Error(..),
        ResponseMapCommand'Error(), ResponseObservation(),
        ResponseObserverAction(), ResponsePing(), ResponseQuickLoad(),
        ResponseQuickSave(), ResponseQuit(), ResponseReplayInfo(),
        ResponseReplayInfo'Error(..), ResponseReplayInfo'Error(),
        ResponseRestartGame(), ResponseRestartGame'Error(..),
        ResponseRestartGame'Error(), ResponseSaveMap(),
        ResponseSaveMap'Error(..), ResponseSaveMap'Error(),
        ResponseSaveReplay(), ResponseStartReplay(),
        ResponseStartReplay'Error(..), ResponseStartReplay'Error(),
        ResponseStep(), Result(..), Result(), SpatialCameraSetup(),
        Status(..), Status()
    ) where
import qualified Data.ProtoLens.Runtime.Control.DeepSeq as Control.DeepSeq
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Prism as Data.ProtoLens.Prism
import qualified Data.ProtoLens.Runtime.Prelude as Prelude
import qualified Data.ProtoLens.Runtime.Data.Int as Data.Int
import qualified Data.ProtoLens.Runtime.Data.Monoid as Data.Monoid
import qualified Data.ProtoLens.Runtime.Data.Word as Data.Word
import qualified Data.ProtoLens.Runtime.Data.ProtoLens as Data.ProtoLens
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Bytes as Data.ProtoLens.Encoding.Bytes
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Growing as Data.ProtoLens.Encoding.Growing
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Parser.Unsafe as Data.ProtoLens.Encoding.Parser.Unsafe
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Wire as Data.ProtoLens.Encoding.Wire
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Field as Data.ProtoLens.Field
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Message.Enum as Data.ProtoLens.Message.Enum
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Service.Types as Data.ProtoLens.Service.Types
import qualified Data.ProtoLens.Runtime.Lens.Family2 as Lens.Family2
import qualified Data.ProtoLens.Runtime.Lens.Family2.Unchecked as Lens.Family2.Unchecked
import qualified Data.ProtoLens.Runtime.Data.Text as Data.Text
import qualified Data.ProtoLens.Runtime.Data.Map as Data.Map
import qualified Data.ProtoLens.Runtime.Data.ByteString as Data.ByteString
import qualified Data.ProtoLens.Runtime.Data.ByteString.Char8 as Data.ByteString.Char8
import qualified Data.ProtoLens.Runtime.Data.Text.Encoding as Data.Text.Encoding
import qualified Data.ProtoLens.Runtime.Data.Vector as Data.Vector
import qualified Data.ProtoLens.Runtime.Data.Vector.Generic as Data.Vector.Generic
import qualified Data.ProtoLens.Runtime.Data.Vector.Unboxed as Data.Vector.Unboxed
import qualified Data.ProtoLens.Runtime.Text.Read as Text.Read
import qualified Proto.S2clientprotocol.Common
import qualified Proto.S2clientprotocol.Data
import qualified Proto.S2clientprotocol.Debug
import qualified Proto.S2clientprotocol.Error
import qualified Proto.S2clientprotocol.Query
import qualified Proto.S2clientprotocol.Raw
import qualified Proto.S2clientprotocol.Score
import qualified Proto.S2clientprotocol.Spatial
import qualified Proto.S2clientprotocol.Ui
data AIBuild
  = RandomBuild | Rush | Timing | Power | Macro | Air
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum AIBuild where
  maybeToEnum 1 = Prelude.Just RandomBuild
  maybeToEnum 2 = Prelude.Just Rush
  maybeToEnum 3 = Prelude.Just Timing
  maybeToEnum 4 = Prelude.Just Power
  maybeToEnum 5 = Prelude.Just Macro
  maybeToEnum 6 = Prelude.Just Air
  maybeToEnum _ = Prelude.Nothing
  showEnum RandomBuild = "RandomBuild"
  showEnum Rush = "Rush"
  showEnum Timing = "Timing"
  showEnum Power = "Power"
  showEnum Macro = "Macro"
  showEnum Air = "Air"
  readEnum k
    | (Prelude.==) k "RandomBuild" = Prelude.Just RandomBuild
    | (Prelude.==) k "Rush" = Prelude.Just Rush
    | (Prelude.==) k "Timing" = Prelude.Just Timing
    | (Prelude.==) k "Power" = Prelude.Just Power
    | (Prelude.==) k "Macro" = Prelude.Just Macro
    | (Prelude.==) k "Air" = Prelude.Just Air
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded AIBuild where
  minBound = RandomBuild
  maxBound = Air
instance Prelude.Enum AIBuild where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum AIBuild: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum RandomBuild = 1
  fromEnum Rush = 2
  fromEnum Timing = 3
  fromEnum Power = 4
  fromEnum Macro = 5
  fromEnum Air = 6
  succ Air
    = Prelude.error
        "AIBuild.succ: bad argument Air. This value would be out of bounds."
  succ RandomBuild = Rush
  succ Rush = Timing
  succ Timing = Power
  succ Power = Macro
  succ Macro = Air
  pred RandomBuild
    = Prelude.error
        "AIBuild.pred: bad argument RandomBuild. This value would be out of bounds."
  pred Rush = RandomBuild
  pred Timing = Rush
  pred Power = Timing
  pred Macro = Power
  pred Air = Macro
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault AIBuild where
  fieldDefault = RandomBuild
instance Control.DeepSeq.NFData AIBuild where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.actionRaw' @:: Lens' Action Proto.S2clientprotocol.Raw.ActionRaw@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'actionRaw' @:: Lens' Action (Prelude.Maybe Proto.S2clientprotocol.Raw.ActionRaw)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.actionFeatureLayer' @:: Lens' Action Proto.S2clientprotocol.Spatial.ActionSpatial@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'actionFeatureLayer' @:: Lens' Action (Prelude.Maybe Proto.S2clientprotocol.Spatial.ActionSpatial)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.actionRender' @:: Lens' Action Proto.S2clientprotocol.Spatial.ActionSpatial@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'actionRender' @:: Lens' Action (Prelude.Maybe Proto.S2clientprotocol.Spatial.ActionSpatial)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.actionUi' @:: Lens' Action Proto.S2clientprotocol.Ui.ActionUI@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'actionUi' @:: Lens' Action (Prelude.Maybe Proto.S2clientprotocol.Ui.ActionUI)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.actionChat' @:: Lens' Action ActionChat@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'actionChat' @:: Lens' Action (Prelude.Maybe ActionChat)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.gameLoop' @:: Lens' Action Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'gameLoop' @:: Lens' Action (Prelude.Maybe Data.Word.Word32)@ -}
data Action
  = Action'_constructor {_Action'actionRaw :: !(Prelude.Maybe Proto.S2clientprotocol.Raw.ActionRaw),
                         _Action'actionFeatureLayer :: !(Prelude.Maybe Proto.S2clientprotocol.Spatial.ActionSpatial),
                         _Action'actionRender :: !(Prelude.Maybe Proto.S2clientprotocol.Spatial.ActionSpatial),
                         _Action'actionUi :: !(Prelude.Maybe Proto.S2clientprotocol.Ui.ActionUI),
                         _Action'actionChat :: !(Prelude.Maybe ActionChat),
                         _Action'gameLoop :: !(Prelude.Maybe Data.Word.Word32),
                         _Action'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Action where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Action "actionRaw" Proto.S2clientprotocol.Raw.ActionRaw where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'actionRaw (\ x__ y__ -> x__ {_Action'actionRaw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Action "maybe'actionRaw" (Prelude.Maybe Proto.S2clientprotocol.Raw.ActionRaw) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'actionRaw (\ x__ y__ -> x__ {_Action'actionRaw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Action "actionFeatureLayer" Proto.S2clientprotocol.Spatial.ActionSpatial where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'actionFeatureLayer
           (\ x__ y__ -> x__ {_Action'actionFeatureLayer = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Action "maybe'actionFeatureLayer" (Prelude.Maybe Proto.S2clientprotocol.Spatial.ActionSpatial) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'actionFeatureLayer
           (\ x__ y__ -> x__ {_Action'actionFeatureLayer = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Action "actionRender" Proto.S2clientprotocol.Spatial.ActionSpatial where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'actionRender
           (\ x__ y__ -> x__ {_Action'actionRender = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Action "maybe'actionRender" (Prelude.Maybe Proto.S2clientprotocol.Spatial.ActionSpatial) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'actionRender
           (\ x__ y__ -> x__ {_Action'actionRender = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Action "actionUi" Proto.S2clientprotocol.Ui.ActionUI where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'actionUi (\ x__ y__ -> x__ {_Action'actionUi = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Action "maybe'actionUi" (Prelude.Maybe Proto.S2clientprotocol.Ui.ActionUI) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'actionUi (\ x__ y__ -> x__ {_Action'actionUi = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Action "actionChat" ActionChat where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'actionChat (\ x__ y__ -> x__ {_Action'actionChat = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Action "maybe'actionChat" (Prelude.Maybe ActionChat) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'actionChat (\ x__ y__ -> x__ {_Action'actionChat = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Action "gameLoop" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'gameLoop (\ x__ y__ -> x__ {_Action'gameLoop = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Action "maybe'gameLoop" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Action'gameLoop (\ x__ y__ -> x__ {_Action'gameLoop = y__}))
        Prelude.id
instance Data.ProtoLens.Message Action where
  messageName _ = Data.Text.pack "SC2APIProtocol.Action"
  packedMessageDescriptor _
    = "\n\
      \\ACKAction\DC28\n\
      \\n\
      \action_raw\CAN\SOH \SOH(\v2\EM.SC2APIProtocol.ActionRawR\tactionRaw\DC2O\n\
      \\DC4action_feature_layer\CAN\STX \SOH(\v2\GS.SC2APIProtocol.ActionSpatialR\DC2actionFeatureLayer\DC2B\n\
      \\raction_render\CAN\ETX \SOH(\v2\GS.SC2APIProtocol.ActionSpatialR\factionRender\DC25\n\
      \\taction_ui\CAN\EOT \SOH(\v2\CAN.SC2APIProtocol.ActionUIR\bactionUi\DC2;\n\
      \\vaction_chat\CAN\ACK \SOH(\v2\SUB.SC2APIProtocol.ActionChatR\n\
      \actionChat\DC2\ESC\n\
      \\tgame_loop\CAN\a \SOH(\rR\bgameLoop"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        actionRaw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "action_raw"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Raw.ActionRaw)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'actionRaw")) ::
              Data.ProtoLens.FieldDescriptor Action
        actionFeatureLayer__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "action_feature_layer"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Spatial.ActionSpatial)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'actionFeatureLayer")) ::
              Data.ProtoLens.FieldDescriptor Action
        actionRender__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "action_render"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Spatial.ActionSpatial)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'actionRender")) ::
              Data.ProtoLens.FieldDescriptor Action
        actionUi__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "action_ui"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Ui.ActionUI)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'actionUi")) ::
              Data.ProtoLens.FieldDescriptor Action
        actionChat__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "action_chat"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ActionChat)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'actionChat")) ::
              Data.ProtoLens.FieldDescriptor Action
        gameLoop__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "game_loop"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gameLoop")) ::
              Data.ProtoLens.FieldDescriptor Action
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, actionRaw__field_descriptor),
           (Data.ProtoLens.Tag 2, actionFeatureLayer__field_descriptor),
           (Data.ProtoLens.Tag 3, actionRender__field_descriptor),
           (Data.ProtoLens.Tag 4, actionUi__field_descriptor),
           (Data.ProtoLens.Tag 6, actionChat__field_descriptor),
           (Data.ProtoLens.Tag 7, gameLoop__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Action'_unknownFields
        (\ x__ y__ -> x__ {_Action'_unknownFields = y__})
  defMessage
    = Action'_constructor
        {_Action'actionRaw = Prelude.Nothing,
         _Action'actionFeatureLayer = Prelude.Nothing,
         _Action'actionRender = Prelude.Nothing,
         _Action'actionUi = Prelude.Nothing,
         _Action'actionChat = Prelude.Nothing,
         _Action'gameLoop = Prelude.Nothing, _Action'_unknownFields = []}
  parseMessage
    = let
        loop :: Action -> Data.ProtoLens.Encoding.Bytes.Parser Action
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "action_raw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"actionRaw") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "action_feature_layer"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"actionFeatureLayer") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "action_render"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"actionRender") y x)
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "action_ui"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"actionUi") y x)
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "action_chat"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"actionChat") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "game_loop"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"gameLoop") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Action"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'actionRaw") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'actionFeatureLayer") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'actionRender") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'actionUi") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'actionChat") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.ProtoLens.encodeMessage _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'gameLoop") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData Action where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Action'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Action'actionRaw x__)
                (Control.DeepSeq.deepseq
                   (_Action'actionFeatureLayer x__)
                   (Control.DeepSeq.deepseq
                      (_Action'actionRender x__)
                      (Control.DeepSeq.deepseq
                         (_Action'actionUi x__)
                         (Control.DeepSeq.deepseq
                            (_Action'actionChat x__)
                            (Control.DeepSeq.deepseq (_Action'gameLoop x__) ()))))))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.channel' @:: Lens' ActionChat ActionChat'Channel@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'channel' @:: Lens' ActionChat (Prelude.Maybe ActionChat'Channel)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.message' @:: Lens' ActionChat Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'message' @:: Lens' ActionChat (Prelude.Maybe Data.Text.Text)@ -}
data ActionChat
  = ActionChat'_constructor {_ActionChat'channel :: !(Prelude.Maybe ActionChat'Channel),
                             _ActionChat'message :: !(Prelude.Maybe Data.Text.Text),
                             _ActionChat'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ActionChat where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ActionChat "channel" ActionChat'Channel where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionChat'channel (\ x__ y__ -> x__ {_ActionChat'channel = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ActionChat "maybe'channel" (Prelude.Maybe ActionChat'Channel) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionChat'channel (\ x__ y__ -> x__ {_ActionChat'channel = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ActionChat "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionChat'message (\ x__ y__ -> x__ {_ActionChat'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ActionChat "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionChat'message (\ x__ y__ -> x__ {_ActionChat'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message ActionChat where
  messageName _ = Data.Text.pack "SC2APIProtocol.ActionChat"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \ActionChat\DC2<\n\
      \\achannel\CAN\SOH \SOH(\SO2\".SC2APIProtocol.ActionChat.ChannelR\achannel\DC2\CAN\n\
      \\amessage\CAN\STX \SOH(\tR\amessage\"\"\n\
      \\aChannel\DC2\r\n\
      \\tBroadcast\DLE\SOH\DC2\b\n\
      \\EOTTeam\DLE\STX"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        channel__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "channel"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ActionChat'Channel)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'channel")) ::
              Data.ProtoLens.FieldDescriptor ActionChat
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor ActionChat
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, channel__field_descriptor),
           (Data.ProtoLens.Tag 2, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ActionChat'_unknownFields
        (\ x__ y__ -> x__ {_ActionChat'_unknownFields = y__})
  defMessage
    = ActionChat'_constructor
        {_ActionChat'channel = Prelude.Nothing,
         _ActionChat'message = Prelude.Nothing,
         _ActionChat'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ActionChat -> Data.ProtoLens.Encoding.Bytes.Parser ActionChat
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "channel"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"channel") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ActionChat"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'channel") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Prelude.fromEnum _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'message") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData ActionChat where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ActionChat'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ActionChat'channel x__)
                (Control.DeepSeq.deepseq (_ActionChat'message x__) ()))
data ActionChat'Channel
  = ActionChat'Broadcast | ActionChat'Team
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ActionChat'Channel where
  maybeToEnum 1 = Prelude.Just ActionChat'Broadcast
  maybeToEnum 2 = Prelude.Just ActionChat'Team
  maybeToEnum _ = Prelude.Nothing
  showEnum ActionChat'Broadcast = "Broadcast"
  showEnum ActionChat'Team = "Team"
  readEnum k
    | (Prelude.==) k "Broadcast" = Prelude.Just ActionChat'Broadcast
    | (Prelude.==) k "Team" = Prelude.Just ActionChat'Team
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ActionChat'Channel where
  minBound = ActionChat'Broadcast
  maxBound = ActionChat'Team
instance Prelude.Enum ActionChat'Channel where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Channel: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum ActionChat'Broadcast = 1
  fromEnum ActionChat'Team = 2
  succ ActionChat'Team
    = Prelude.error
        "ActionChat'Channel.succ: bad argument ActionChat'Team. This value would be out of bounds."
  succ ActionChat'Broadcast = ActionChat'Team
  pred ActionChat'Broadcast
    = Prelude.error
        "ActionChat'Channel.pred: bad argument ActionChat'Broadcast. This value would be out of bounds."
  pred ActionChat'Team = ActionChat'Broadcast
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ActionChat'Channel where
  fieldDefault = ActionChat'Broadcast
instance Control.DeepSeq.NFData ActionChat'Channel where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.unitTag' @:: Lens' ActionError Data.Word.Word64@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'unitTag' @:: Lens' ActionError (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.abilityId' @:: Lens' ActionError Data.Word.Word64@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'abilityId' @:: Lens' ActionError (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.result' @:: Lens' ActionError Proto.S2clientprotocol.Error.ActionResult@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'result' @:: Lens' ActionError (Prelude.Maybe Proto.S2clientprotocol.Error.ActionResult)@ -}
data ActionError
  = ActionError'_constructor {_ActionError'unitTag :: !(Prelude.Maybe Data.Word.Word64),
                              _ActionError'abilityId :: !(Prelude.Maybe Data.Word.Word64),
                              _ActionError'result :: !(Prelude.Maybe Proto.S2clientprotocol.Error.ActionResult),
                              _ActionError'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ActionError where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ActionError "unitTag" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionError'unitTag
           (\ x__ y__ -> x__ {_ActionError'unitTag = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ActionError "maybe'unitTag" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionError'unitTag
           (\ x__ y__ -> x__ {_ActionError'unitTag = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ActionError "abilityId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionError'abilityId
           (\ x__ y__ -> x__ {_ActionError'abilityId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ActionError "maybe'abilityId" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionError'abilityId
           (\ x__ y__ -> x__ {_ActionError'abilityId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ActionError "result" Proto.S2clientprotocol.Error.ActionResult where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionError'result (\ x__ y__ -> x__ {_ActionError'result = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ActionError "maybe'result" (Prelude.Maybe Proto.S2clientprotocol.Error.ActionResult) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionError'result (\ x__ y__ -> x__ {_ActionError'result = y__}))
        Prelude.id
instance Data.ProtoLens.Message ActionError where
  messageName _ = Data.Text.pack "SC2APIProtocol.ActionError"
  packedMessageDescriptor _
    = "\n\
      \\vActionError\DC2\EM\n\
      \\bunit_tag\CAN\SOH \SOH(\EOTR\aunitTag\DC2\GS\n\
      \\n\
      \ability_id\CAN\STX \SOH(\EOTR\tabilityId\DC24\n\
      \\ACKresult\CAN\ETX \SOH(\SO2\FS.SC2APIProtocol.ActionResultR\ACKresult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        unitTag__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "unit_tag"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'unitTag")) ::
              Data.ProtoLens.FieldDescriptor ActionError
        abilityId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ability_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'abilityId")) ::
              Data.ProtoLens.FieldDescriptor ActionError
        result__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Error.ActionResult)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'result")) ::
              Data.ProtoLens.FieldDescriptor ActionError
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, unitTag__field_descriptor),
           (Data.ProtoLens.Tag 2, abilityId__field_descriptor),
           (Data.ProtoLens.Tag 3, result__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ActionError'_unknownFields
        (\ x__ y__ -> x__ {_ActionError'_unknownFields = y__})
  defMessage
    = ActionError'_constructor
        {_ActionError'unitTag = Prelude.Nothing,
         _ActionError'abilityId = Prelude.Nothing,
         _ActionError'result = Prelude.Nothing,
         _ActionError'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ActionError -> Data.ProtoLens.Encoding.Bytes.Parser ActionError
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "unit_tag"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"unitTag") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ability_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"abilityId") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "result"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"result") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ActionError"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'unitTag") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'abilityId") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'result") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                Prelude.fromEnum _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData ActionError where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ActionError'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ActionError'unitTag x__)
                (Control.DeepSeq.deepseq
                   (_ActionError'abilityId x__)
                   (Control.DeepSeq.deepseq (_ActionError'result x__) ())))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerId' @:: Lens' ActionObserverCameraFollowPlayer Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerId' @:: Lens' ActionObserverCameraFollowPlayer (Prelude.Maybe Data.Word.Word32)@ -}
data ActionObserverCameraFollowPlayer
  = ActionObserverCameraFollowPlayer'_constructor {_ActionObserverCameraFollowPlayer'playerId :: !(Prelude.Maybe Data.Word.Word32),
                                                   _ActionObserverCameraFollowPlayer'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ActionObserverCameraFollowPlayer where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ActionObserverCameraFollowPlayer "playerId" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionObserverCameraFollowPlayer'playerId
           (\ x__ y__
              -> x__ {_ActionObserverCameraFollowPlayer'playerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ActionObserverCameraFollowPlayer "maybe'playerId" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionObserverCameraFollowPlayer'playerId
           (\ x__ y__
              -> x__ {_ActionObserverCameraFollowPlayer'playerId = y__}))
        Prelude.id
instance Data.ProtoLens.Message ActionObserverCameraFollowPlayer where
  messageName _
    = Data.Text.pack "SC2APIProtocol.ActionObserverCameraFollowPlayer"
  packedMessageDescriptor _
    = "\n\
      \ ActionObserverCameraFollowPlayer\DC2\ESC\n\
      \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        playerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerId")) ::
              Data.ProtoLens.FieldDescriptor ActionObserverCameraFollowPlayer
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, playerId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ActionObserverCameraFollowPlayer'_unknownFields
        (\ x__ y__
           -> x__ {_ActionObserverCameraFollowPlayer'_unknownFields = y__})
  defMessage
    = ActionObserverCameraFollowPlayer'_constructor
        {_ActionObserverCameraFollowPlayer'playerId = Prelude.Nothing,
         _ActionObserverCameraFollowPlayer'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ActionObserverCameraFollowPlayer
          -> Data.ProtoLens.Encoding.Bytes.Parser ActionObserverCameraFollowPlayer
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "player_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "ActionObserverCameraFollowPlayer"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'playerId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ActionObserverCameraFollowPlayer where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ActionObserverCameraFollowPlayer'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ActionObserverCameraFollowPlayer'playerId x__) ())
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.unitTags' @:: Lens' ActionObserverCameraFollowUnits [Data.Word.Word64]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'unitTags' @:: Lens' ActionObserverCameraFollowUnits (Data.Vector.Unboxed.Vector Data.Word.Word64)@ -}
data ActionObserverCameraFollowUnits
  = ActionObserverCameraFollowUnits'_constructor {_ActionObserverCameraFollowUnits'unitTags :: !(Data.Vector.Unboxed.Vector Data.Word.Word64),
                                                  _ActionObserverCameraFollowUnits'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ActionObserverCameraFollowUnits where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ActionObserverCameraFollowUnits "unitTags" [Data.Word.Word64] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionObserverCameraFollowUnits'unitTags
           (\ x__ y__
              -> x__ {_ActionObserverCameraFollowUnits'unitTags = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ActionObserverCameraFollowUnits "vec'unitTags" (Data.Vector.Unboxed.Vector Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionObserverCameraFollowUnits'unitTags
           (\ x__ y__
              -> x__ {_ActionObserverCameraFollowUnits'unitTags = y__}))
        Prelude.id
instance Data.ProtoLens.Message ActionObserverCameraFollowUnits where
  messageName _
    = Data.Text.pack "SC2APIProtocol.ActionObserverCameraFollowUnits"
  packedMessageDescriptor _
    = "\n\
      \\USActionObserverCameraFollowUnits\DC2\ESC\n\
      \\tunit_tags\CAN\SOH \ETX(\EOTR\bunitTags"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        unitTags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "unit_tags"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"unitTags")) ::
              Data.ProtoLens.FieldDescriptor ActionObserverCameraFollowUnits
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, unitTags__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ActionObserverCameraFollowUnits'_unknownFields
        (\ x__ y__
           -> x__ {_ActionObserverCameraFollowUnits'_unknownFields = y__})
  defMessage
    = ActionObserverCameraFollowUnits'_constructor
        {_ActionObserverCameraFollowUnits'unitTags = Data.Vector.Generic.empty,
         _ActionObserverCameraFollowUnits'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ActionObserverCameraFollowUnits
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word64
             -> Data.ProtoLens.Encoding.Bytes.Parser ActionObserverCameraFollowUnits
        loop x mutable'unitTags
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'unitTags <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'unitTags)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'unitTags") frozen'unitTags x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        Data.ProtoLens.Encoding.Bytes.getVarInt "unit_tags"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'unitTags y)
                                loop x v
                        10
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    Data.ProtoLens.Encoding.Bytes.getVarInt
                                                                    "unit_tags"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'unitTags)
                                loop x y
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'unitTags
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'unitTags <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'unitTags)
          "ActionObserverCameraFollowUnits"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'unitTags") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ActionObserverCameraFollowUnits where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ActionObserverCameraFollowUnits'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ActionObserverCameraFollowUnits'unitTags x__) ())
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.worldPos' @:: Lens' ActionObserverCameraMove Proto.S2clientprotocol.Common.Point2D@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'worldPos' @:: Lens' ActionObserverCameraMove (Prelude.Maybe Proto.S2clientprotocol.Common.Point2D)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.distance' @:: Lens' ActionObserverCameraMove Prelude.Float@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'distance' @:: Lens' ActionObserverCameraMove (Prelude.Maybe Prelude.Float)@ -}
data ActionObserverCameraMove
  = ActionObserverCameraMove'_constructor {_ActionObserverCameraMove'worldPos :: !(Prelude.Maybe Proto.S2clientprotocol.Common.Point2D),
                                           _ActionObserverCameraMove'distance :: !(Prelude.Maybe Prelude.Float),
                                           _ActionObserverCameraMove'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ActionObserverCameraMove where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ActionObserverCameraMove "worldPos" Proto.S2clientprotocol.Common.Point2D where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionObserverCameraMove'worldPos
           (\ x__ y__ -> x__ {_ActionObserverCameraMove'worldPos = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField ActionObserverCameraMove "maybe'worldPos" (Prelude.Maybe Proto.S2clientprotocol.Common.Point2D) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionObserverCameraMove'worldPos
           (\ x__ y__ -> x__ {_ActionObserverCameraMove'worldPos = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ActionObserverCameraMove "distance" Prelude.Float where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionObserverCameraMove'distance
           (\ x__ y__ -> x__ {_ActionObserverCameraMove'distance = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ActionObserverCameraMove "maybe'distance" (Prelude.Maybe Prelude.Float) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionObserverCameraMove'distance
           (\ x__ y__ -> x__ {_ActionObserverCameraMove'distance = y__}))
        Prelude.id
instance Data.ProtoLens.Message ActionObserverCameraMove where
  messageName _
    = Data.Text.pack "SC2APIProtocol.ActionObserverCameraMove"
  packedMessageDescriptor _
    = "\n\
      \\CANActionObserverCameraMove\DC24\n\
      \\tworld_pos\CAN\SOH \SOH(\v2\ETB.SC2APIProtocol.Point2DR\bworldPos\DC2\SUB\n\
      \\bdistance\CAN\STX \SOH(\STXR\bdistance"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        worldPos__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "world_pos"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Common.Point2D)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'worldPos")) ::
              Data.ProtoLens.FieldDescriptor ActionObserverCameraMove
        distance__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "distance"
              (Data.ProtoLens.ScalarField Data.ProtoLens.FloatField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Float)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'distance")) ::
              Data.ProtoLens.FieldDescriptor ActionObserverCameraMove
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, worldPos__field_descriptor),
           (Data.ProtoLens.Tag 2, distance__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ActionObserverCameraMove'_unknownFields
        (\ x__ y__ -> x__ {_ActionObserverCameraMove'_unknownFields = y__})
  defMessage
    = ActionObserverCameraMove'_constructor
        {_ActionObserverCameraMove'worldPos = Prelude.Nothing,
         _ActionObserverCameraMove'distance = Prelude.Nothing,
         _ActionObserverCameraMove'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ActionObserverCameraMove
          -> Data.ProtoLens.Encoding.Bytes.Parser ActionObserverCameraMove
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "world_pos"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"worldPos") y x)
                        21
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToFloat
                                          Data.ProtoLens.Encoding.Bytes.getFixed32)
                                       "distance"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"distance") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ActionObserverCameraMove"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'worldPos") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'distance") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 21)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putFixed32
                             Data.ProtoLens.Encoding.Bytes.floatToWord _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData ActionObserverCameraMove where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ActionObserverCameraMove'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ActionObserverCameraMove'worldPos x__)
                (Control.DeepSeq.deepseq
                   (_ActionObserverCameraMove'distance x__) ()))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerId' @:: Lens' ActionObserverPlayerPerspective Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerId' @:: Lens' ActionObserverPlayerPerspective (Prelude.Maybe Data.Word.Word32)@ -}
data ActionObserverPlayerPerspective
  = ActionObserverPlayerPerspective'_constructor {_ActionObserverPlayerPerspective'playerId :: !(Prelude.Maybe Data.Word.Word32),
                                                  _ActionObserverPlayerPerspective'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ActionObserverPlayerPerspective where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ActionObserverPlayerPerspective "playerId" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionObserverPlayerPerspective'playerId
           (\ x__ y__
              -> x__ {_ActionObserverPlayerPerspective'playerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ActionObserverPlayerPerspective "maybe'playerId" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActionObserverPlayerPerspective'playerId
           (\ x__ y__
              -> x__ {_ActionObserverPlayerPerspective'playerId = y__}))
        Prelude.id
instance Data.ProtoLens.Message ActionObserverPlayerPerspective where
  messageName _
    = Data.Text.pack "SC2APIProtocol.ActionObserverPlayerPerspective"
  packedMessageDescriptor _
    = "\n\
      \\USActionObserverPlayerPerspective\DC2\ESC\n\
      \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        playerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerId")) ::
              Data.ProtoLens.FieldDescriptor ActionObserverPlayerPerspective
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, playerId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ActionObserverPlayerPerspective'_unknownFields
        (\ x__ y__
           -> x__ {_ActionObserverPlayerPerspective'_unknownFields = y__})
  defMessage
    = ActionObserverPlayerPerspective'_constructor
        {_ActionObserverPlayerPerspective'playerId = Prelude.Nothing,
         _ActionObserverPlayerPerspective'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ActionObserverPlayerPerspective
          -> Data.ProtoLens.Encoding.Bytes.Parser ActionObserverPlayerPerspective
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "player_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "ActionObserverPlayerPerspective"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'playerId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ActionObserverPlayerPerspective where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ActionObserverPlayerPerspective'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ActionObserverPlayerPerspective'playerId x__) ())
data Alert
  = NuclearLaunchDetected |
    NydusWormDetected |
    AlertError |
    AddOnComplete |
    BuildingComplete |
    BuildingUnderAttack |
    LarvaHatched |
    MergeComplete |
    MineralsExhausted |
    MorphComplete |
    MothershipComplete |
    MULEExpired |
    NukeComplete |
    ResearchComplete |
    TrainError |
    TrainUnitComplete |
    TrainWorkerComplete |
    TransformationComplete |
    UnitUnderAttack |
    UpgradeComplete |
    VespeneExhausted |
    WarpInComplete
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum Alert where
  maybeToEnum 1 = Prelude.Just NuclearLaunchDetected
  maybeToEnum 2 = Prelude.Just NydusWormDetected
  maybeToEnum 3 = Prelude.Just AlertError
  maybeToEnum 4 = Prelude.Just AddOnComplete
  maybeToEnum 5 = Prelude.Just BuildingComplete
  maybeToEnum 6 = Prelude.Just BuildingUnderAttack
  maybeToEnum 7 = Prelude.Just LarvaHatched
  maybeToEnum 8 = Prelude.Just MergeComplete
  maybeToEnum 9 = Prelude.Just MineralsExhausted
  maybeToEnum 10 = Prelude.Just MorphComplete
  maybeToEnum 11 = Prelude.Just MothershipComplete
  maybeToEnum 12 = Prelude.Just MULEExpired
  maybeToEnum 13 = Prelude.Just NukeComplete
  maybeToEnum 14 = Prelude.Just ResearchComplete
  maybeToEnum 15 = Prelude.Just TrainError
  maybeToEnum 16 = Prelude.Just TrainUnitComplete
  maybeToEnum 17 = Prelude.Just TrainWorkerComplete
  maybeToEnum 18 = Prelude.Just TransformationComplete
  maybeToEnum 19 = Prelude.Just UnitUnderAttack
  maybeToEnum 20 = Prelude.Just UpgradeComplete
  maybeToEnum 21 = Prelude.Just VespeneExhausted
  maybeToEnum 22 = Prelude.Just WarpInComplete
  maybeToEnum _ = Prelude.Nothing
  showEnum AlertError = "AlertError"
  showEnum AddOnComplete = "AddOnComplete"
  showEnum BuildingComplete = "BuildingComplete"
  showEnum BuildingUnderAttack = "BuildingUnderAttack"
  showEnum LarvaHatched = "LarvaHatched"
  showEnum MergeComplete = "MergeComplete"
  showEnum MineralsExhausted = "MineralsExhausted"
  showEnum MorphComplete = "MorphComplete"
  showEnum MothershipComplete = "MothershipComplete"
  showEnum MULEExpired = "MULEExpired"
  showEnum NuclearLaunchDetected = "NuclearLaunchDetected"
  showEnum NukeComplete = "NukeComplete"
  showEnum NydusWormDetected = "NydusWormDetected"
  showEnum ResearchComplete = "ResearchComplete"
  showEnum TrainError = "TrainError"
  showEnum TrainUnitComplete = "TrainUnitComplete"
  showEnum TrainWorkerComplete = "TrainWorkerComplete"
  showEnum TransformationComplete = "TransformationComplete"
  showEnum UnitUnderAttack = "UnitUnderAttack"
  showEnum UpgradeComplete = "UpgradeComplete"
  showEnum VespeneExhausted = "VespeneExhausted"
  showEnum WarpInComplete = "WarpInComplete"
  readEnum k
    | (Prelude.==) k "AlertError" = Prelude.Just AlertError
    | (Prelude.==) k "AddOnComplete" = Prelude.Just AddOnComplete
    | (Prelude.==) k "BuildingComplete" = Prelude.Just BuildingComplete
    | (Prelude.==) k "BuildingUnderAttack"
    = Prelude.Just BuildingUnderAttack
    | (Prelude.==) k "LarvaHatched" = Prelude.Just LarvaHatched
    | (Prelude.==) k "MergeComplete" = Prelude.Just MergeComplete
    | (Prelude.==) k "MineralsExhausted"
    = Prelude.Just MineralsExhausted
    | (Prelude.==) k "MorphComplete" = Prelude.Just MorphComplete
    | (Prelude.==) k "MothershipComplete"
    = Prelude.Just MothershipComplete
    | (Prelude.==) k "MULEExpired" = Prelude.Just MULEExpired
    | (Prelude.==) k "NuclearLaunchDetected"
    = Prelude.Just NuclearLaunchDetected
    | (Prelude.==) k "NukeComplete" = Prelude.Just NukeComplete
    | (Prelude.==) k "NydusWormDetected"
    = Prelude.Just NydusWormDetected
    | (Prelude.==) k "ResearchComplete" = Prelude.Just ResearchComplete
    | (Prelude.==) k "TrainError" = Prelude.Just TrainError
    | (Prelude.==) k "TrainUnitComplete"
    = Prelude.Just TrainUnitComplete
    | (Prelude.==) k "TrainWorkerComplete"
    = Prelude.Just TrainWorkerComplete
    | (Prelude.==) k "TransformationComplete"
    = Prelude.Just TransformationComplete
    | (Prelude.==) k "UnitUnderAttack" = Prelude.Just UnitUnderAttack
    | (Prelude.==) k "UpgradeComplete" = Prelude.Just UpgradeComplete
    | (Prelude.==) k "VespeneExhausted" = Prelude.Just VespeneExhausted
    | (Prelude.==) k "WarpInComplete" = Prelude.Just WarpInComplete
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded Alert where
  minBound = NuclearLaunchDetected
  maxBound = WarpInComplete
instance Prelude.Enum Alert where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Alert: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum NuclearLaunchDetected = 1
  fromEnum NydusWormDetected = 2
  fromEnum AlertError = 3
  fromEnum AddOnComplete = 4
  fromEnum BuildingComplete = 5
  fromEnum BuildingUnderAttack = 6
  fromEnum LarvaHatched = 7
  fromEnum MergeComplete = 8
  fromEnum MineralsExhausted = 9
  fromEnum MorphComplete = 10
  fromEnum MothershipComplete = 11
  fromEnum MULEExpired = 12
  fromEnum NukeComplete = 13
  fromEnum ResearchComplete = 14
  fromEnum TrainError = 15
  fromEnum TrainUnitComplete = 16
  fromEnum TrainWorkerComplete = 17
  fromEnum TransformationComplete = 18
  fromEnum UnitUnderAttack = 19
  fromEnum UpgradeComplete = 20
  fromEnum VespeneExhausted = 21
  fromEnum WarpInComplete = 22
  succ WarpInComplete
    = Prelude.error
        "Alert.succ: bad argument WarpInComplete. This value would be out of bounds."
  succ NuclearLaunchDetected = NydusWormDetected
  succ NydusWormDetected = AlertError
  succ AlertError = AddOnComplete
  succ AddOnComplete = BuildingComplete
  succ BuildingComplete = BuildingUnderAttack
  succ BuildingUnderAttack = LarvaHatched
  succ LarvaHatched = MergeComplete
  succ MergeComplete = MineralsExhausted
  succ MineralsExhausted = MorphComplete
  succ MorphComplete = MothershipComplete
  succ MothershipComplete = MULEExpired
  succ MULEExpired = NukeComplete
  succ NukeComplete = ResearchComplete
  succ ResearchComplete = TrainError
  succ TrainError = TrainUnitComplete
  succ TrainUnitComplete = TrainWorkerComplete
  succ TrainWorkerComplete = TransformationComplete
  succ TransformationComplete = UnitUnderAttack
  succ UnitUnderAttack = UpgradeComplete
  succ UpgradeComplete = VespeneExhausted
  succ VespeneExhausted = WarpInComplete
  pred NuclearLaunchDetected
    = Prelude.error
        "Alert.pred: bad argument NuclearLaunchDetected. This value would be out of bounds."
  pred NydusWormDetected = NuclearLaunchDetected
  pred AlertError = NydusWormDetected
  pred AddOnComplete = AlertError
  pred BuildingComplete = AddOnComplete
  pred BuildingUnderAttack = BuildingComplete
  pred LarvaHatched = BuildingUnderAttack
  pred MergeComplete = LarvaHatched
  pred MineralsExhausted = MergeComplete
  pred MorphComplete = MineralsExhausted
  pred MothershipComplete = MorphComplete
  pred MULEExpired = MothershipComplete
  pred NukeComplete = MULEExpired
  pred ResearchComplete = NukeComplete
  pred TrainError = ResearchComplete
  pred TrainUnitComplete = TrainError
  pred TrainWorkerComplete = TrainUnitComplete
  pred TransformationComplete = TrainWorkerComplete
  pred UnitUnderAttack = TransformationComplete
  pred UpgradeComplete = UnitUnderAttack
  pred VespeneExhausted = UpgradeComplete
  pred WarpInComplete = VespeneExhausted
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault Alert where
  fieldDefault = NuclearLaunchDetected
instance Control.DeepSeq.NFData Alert where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerId' @:: Lens' ChatReceived Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerId' @:: Lens' ChatReceived (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.message' @:: Lens' ChatReceived Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'message' @:: Lens' ChatReceived (Prelude.Maybe Data.Text.Text)@ -}
data ChatReceived
  = ChatReceived'_constructor {_ChatReceived'playerId :: !(Prelude.Maybe Data.Word.Word32),
                               _ChatReceived'message :: !(Prelude.Maybe Data.Text.Text),
                               _ChatReceived'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChatReceived where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChatReceived "playerId" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ChatReceived'playerId
           (\ x__ y__ -> x__ {_ChatReceived'playerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ChatReceived "maybe'playerId" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ChatReceived'playerId
           (\ x__ y__ -> x__ {_ChatReceived'playerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ChatReceived "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ChatReceived'message
           (\ x__ y__ -> x__ {_ChatReceived'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ChatReceived "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ChatReceived'message
           (\ x__ y__ -> x__ {_ChatReceived'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message ChatReceived where
  messageName _ = Data.Text.pack "SC2APIProtocol.ChatReceived"
  packedMessageDescriptor _
    = "\n\
      \\fChatReceived\DC2\ESC\n\
      \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\DC2\CAN\n\
      \\amessage\CAN\STX \SOH(\tR\amessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        playerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerId")) ::
              Data.ProtoLens.FieldDescriptor ChatReceived
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor ChatReceived
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, playerId__field_descriptor),
           (Data.ProtoLens.Tag 2, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ChatReceived'_unknownFields
        (\ x__ y__ -> x__ {_ChatReceived'_unknownFields = y__})
  defMessage
    = ChatReceived'_constructor
        {_ChatReceived'playerId = Prelude.Nothing,
         _ChatReceived'message = Prelude.Nothing,
         _ChatReceived'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ChatReceived -> Data.ProtoLens.Encoding.Bytes.Parser ChatReceived
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "player_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerId") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ChatReceived"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'playerId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'message") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData ChatReceived where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ChatReceived'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ChatReceived'playerId x__)
                (Control.DeepSeq.deepseq (_ChatReceived'message x__) ()))
data Difficulty
  = VeryEasy |
    Easy |
    Medium |
    MediumHard |
    Hard |
    Harder |
    VeryHard |
    CheatVision |
    CheatMoney |
    CheatInsane
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum Difficulty where
  maybeToEnum 1 = Prelude.Just VeryEasy
  maybeToEnum 2 = Prelude.Just Easy
  maybeToEnum 3 = Prelude.Just Medium
  maybeToEnum 4 = Prelude.Just MediumHard
  maybeToEnum 5 = Prelude.Just Hard
  maybeToEnum 6 = Prelude.Just Harder
  maybeToEnum 7 = Prelude.Just VeryHard
  maybeToEnum 8 = Prelude.Just CheatVision
  maybeToEnum 9 = Prelude.Just CheatMoney
  maybeToEnum 10 = Prelude.Just CheatInsane
  maybeToEnum _ = Prelude.Nothing
  showEnum VeryEasy = "VeryEasy"
  showEnum Easy = "Easy"
  showEnum Medium = "Medium"
  showEnum MediumHard = "MediumHard"
  showEnum Hard = "Hard"
  showEnum Harder = "Harder"
  showEnum VeryHard = "VeryHard"
  showEnum CheatVision = "CheatVision"
  showEnum CheatMoney = "CheatMoney"
  showEnum CheatInsane = "CheatInsane"
  readEnum k
    | (Prelude.==) k "VeryEasy" = Prelude.Just VeryEasy
    | (Prelude.==) k "Easy" = Prelude.Just Easy
    | (Prelude.==) k "Medium" = Prelude.Just Medium
    | (Prelude.==) k "MediumHard" = Prelude.Just MediumHard
    | (Prelude.==) k "Hard" = Prelude.Just Hard
    | (Prelude.==) k "Harder" = Prelude.Just Harder
    | (Prelude.==) k "VeryHard" = Prelude.Just VeryHard
    | (Prelude.==) k "CheatVision" = Prelude.Just CheatVision
    | (Prelude.==) k "CheatMoney" = Prelude.Just CheatMoney
    | (Prelude.==) k "CheatInsane" = Prelude.Just CheatInsane
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded Difficulty where
  minBound = VeryEasy
  maxBound = CheatInsane
instance Prelude.Enum Difficulty where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Difficulty: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum VeryEasy = 1
  fromEnum Easy = 2
  fromEnum Medium = 3
  fromEnum MediumHard = 4
  fromEnum Hard = 5
  fromEnum Harder = 6
  fromEnum VeryHard = 7
  fromEnum CheatVision = 8
  fromEnum CheatMoney = 9
  fromEnum CheatInsane = 10
  succ CheatInsane
    = Prelude.error
        "Difficulty.succ: bad argument CheatInsane. This value would be out of bounds."
  succ VeryEasy = Easy
  succ Easy = Medium
  succ Medium = MediumHard
  succ MediumHard = Hard
  succ Hard = Harder
  succ Harder = VeryHard
  succ VeryHard = CheatVision
  succ CheatVision = CheatMoney
  succ CheatMoney = CheatInsane
  pred VeryEasy
    = Prelude.error
        "Difficulty.pred: bad argument VeryEasy. This value would be out of bounds."
  pred Easy = VeryEasy
  pred Medium = Easy
  pred MediumHard = Medium
  pred Hard = MediumHard
  pred Harder = Hard
  pred VeryHard = Harder
  pred CheatVision = VeryHard
  pred CheatMoney = CheatVision
  pred CheatInsane = CheatMoney
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault Difficulty where
  fieldDefault = VeryEasy
instance Control.DeepSeq.NFData Difficulty where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.raw' @:: Lens' InterfaceOptions Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'raw' @:: Lens' InterfaceOptions (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.score' @:: Lens' InterfaceOptions Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'score' @:: Lens' InterfaceOptions (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.featureLayer' @:: Lens' InterfaceOptions SpatialCameraSetup@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'featureLayer' @:: Lens' InterfaceOptions (Prelude.Maybe SpatialCameraSetup)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.render' @:: Lens' InterfaceOptions SpatialCameraSetup@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'render' @:: Lens' InterfaceOptions (Prelude.Maybe SpatialCameraSetup)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.showCloaked' @:: Lens' InterfaceOptions Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'showCloaked' @:: Lens' InterfaceOptions (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.showBurrowedShadows' @:: Lens' InterfaceOptions Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'showBurrowedShadows' @:: Lens' InterfaceOptions (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.showPlaceholders' @:: Lens' InterfaceOptions Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'showPlaceholders' @:: Lens' InterfaceOptions (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.rawAffectsSelection' @:: Lens' InterfaceOptions Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'rawAffectsSelection' @:: Lens' InterfaceOptions (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.rawCropToPlayableArea' @:: Lens' InterfaceOptions Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'rawCropToPlayableArea' @:: Lens' InterfaceOptions (Prelude.Maybe Prelude.Bool)@ -}
data InterfaceOptions
  = InterfaceOptions'_constructor {_InterfaceOptions'raw :: !(Prelude.Maybe Prelude.Bool),
                                   _InterfaceOptions'score :: !(Prelude.Maybe Prelude.Bool),
                                   _InterfaceOptions'featureLayer :: !(Prelude.Maybe SpatialCameraSetup),
                                   _InterfaceOptions'render :: !(Prelude.Maybe SpatialCameraSetup),
                                   _InterfaceOptions'showCloaked :: !(Prelude.Maybe Prelude.Bool),
                                   _InterfaceOptions'showBurrowedShadows :: !(Prelude.Maybe Prelude.Bool),
                                   _InterfaceOptions'showPlaceholders :: !(Prelude.Maybe Prelude.Bool),
                                   _InterfaceOptions'rawAffectsSelection :: !(Prelude.Maybe Prelude.Bool),
                                   _InterfaceOptions'rawCropToPlayableArea :: !(Prelude.Maybe Prelude.Bool),
                                   _InterfaceOptions'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show InterfaceOptions where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField InterfaceOptions "raw" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'raw
           (\ x__ y__ -> x__ {_InterfaceOptions'raw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField InterfaceOptions "maybe'raw" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'raw
           (\ x__ y__ -> x__ {_InterfaceOptions'raw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField InterfaceOptions "score" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'score
           (\ x__ y__ -> x__ {_InterfaceOptions'score = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField InterfaceOptions "maybe'score" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'score
           (\ x__ y__ -> x__ {_InterfaceOptions'score = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField InterfaceOptions "featureLayer" SpatialCameraSetup where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'featureLayer
           (\ x__ y__ -> x__ {_InterfaceOptions'featureLayer = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField InterfaceOptions "maybe'featureLayer" (Prelude.Maybe SpatialCameraSetup) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'featureLayer
           (\ x__ y__ -> x__ {_InterfaceOptions'featureLayer = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField InterfaceOptions "render" SpatialCameraSetup where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'render
           (\ x__ y__ -> x__ {_InterfaceOptions'render = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField InterfaceOptions "maybe'render" (Prelude.Maybe SpatialCameraSetup) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'render
           (\ x__ y__ -> x__ {_InterfaceOptions'render = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField InterfaceOptions "showCloaked" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'showCloaked
           (\ x__ y__ -> x__ {_InterfaceOptions'showCloaked = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField InterfaceOptions "maybe'showCloaked" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'showCloaked
           (\ x__ y__ -> x__ {_InterfaceOptions'showCloaked = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField InterfaceOptions "showBurrowedShadows" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'showBurrowedShadows
           (\ x__ y__ -> x__ {_InterfaceOptions'showBurrowedShadows = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField InterfaceOptions "maybe'showBurrowedShadows" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'showBurrowedShadows
           (\ x__ y__ -> x__ {_InterfaceOptions'showBurrowedShadows = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField InterfaceOptions "showPlaceholders" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'showPlaceholders
           (\ x__ y__ -> x__ {_InterfaceOptions'showPlaceholders = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField InterfaceOptions "maybe'showPlaceholders" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'showPlaceholders
           (\ x__ y__ -> x__ {_InterfaceOptions'showPlaceholders = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField InterfaceOptions "rawAffectsSelection" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'rawAffectsSelection
           (\ x__ y__ -> x__ {_InterfaceOptions'rawAffectsSelection = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField InterfaceOptions "maybe'rawAffectsSelection" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'rawAffectsSelection
           (\ x__ y__ -> x__ {_InterfaceOptions'rawAffectsSelection = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField InterfaceOptions "rawCropToPlayableArea" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'rawCropToPlayableArea
           (\ x__ y__ -> x__ {_InterfaceOptions'rawCropToPlayableArea = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField InterfaceOptions "maybe'rawCropToPlayableArea" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _InterfaceOptions'rawCropToPlayableArea
           (\ x__ y__ -> x__ {_InterfaceOptions'rawCropToPlayableArea = y__}))
        Prelude.id
instance Data.ProtoLens.Message InterfaceOptions where
  messageName _ = Data.Text.pack "SC2APIProtocol.InterfaceOptions"
  packedMessageDescriptor _
    = "\n\
      \\DLEInterfaceOptions\DC2\DLE\n\
      \\ETXraw\CAN\SOH \SOH(\bR\ETXraw\DC2\DC4\n\
      \\ENQscore\CAN\STX \SOH(\bR\ENQscore\DC2G\n\
      \\rfeature_layer\CAN\ETX \SOH(\v2\".SC2APIProtocol.SpatialCameraSetupR\ffeatureLayer\DC2:\n\
      \\ACKrender\CAN\EOT \SOH(\v2\".SC2APIProtocol.SpatialCameraSetupR\ACKrender\DC2!\n\
      \\fshow_cloaked\CAN\ENQ \SOH(\bR\vshowCloaked\DC22\n\
      \\NAKshow_burrowed_shadows\CAN\t \SOH(\bR\DC3showBurrowedShadows\DC2+\n\
      \\DC1show_placeholders\CAN\b \SOH(\bR\DLEshowPlaceholders\DC22\n\
      \\NAKraw_affects_selection\CAN\ACK \SOH(\bR\DC3rawAffectsSelection\DC28\n\
      \\EMraw_crop_to_playable_area\CAN\a \SOH(\bR\NAKrawCropToPlayableArea"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        raw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "raw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'raw")) ::
              Data.ProtoLens.FieldDescriptor InterfaceOptions
        score__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "score"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'score")) ::
              Data.ProtoLens.FieldDescriptor InterfaceOptions
        featureLayer__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "feature_layer"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor SpatialCameraSetup)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'featureLayer")) ::
              Data.ProtoLens.FieldDescriptor InterfaceOptions
        render__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "render"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor SpatialCameraSetup)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'render")) ::
              Data.ProtoLens.FieldDescriptor InterfaceOptions
        showCloaked__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "show_cloaked"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'showCloaked")) ::
              Data.ProtoLens.FieldDescriptor InterfaceOptions
        showBurrowedShadows__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "show_burrowed_shadows"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'showBurrowedShadows")) ::
              Data.ProtoLens.FieldDescriptor InterfaceOptions
        showPlaceholders__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "show_placeholders"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'showPlaceholders")) ::
              Data.ProtoLens.FieldDescriptor InterfaceOptions
        rawAffectsSelection__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "raw_affects_selection"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rawAffectsSelection")) ::
              Data.ProtoLens.FieldDescriptor InterfaceOptions
        rawCropToPlayableArea__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "raw_crop_to_playable_area"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rawCropToPlayableArea")) ::
              Data.ProtoLens.FieldDescriptor InterfaceOptions
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, raw__field_descriptor),
           (Data.ProtoLens.Tag 2, score__field_descriptor),
           (Data.ProtoLens.Tag 3, featureLayer__field_descriptor),
           (Data.ProtoLens.Tag 4, render__field_descriptor),
           (Data.ProtoLens.Tag 5, showCloaked__field_descriptor),
           (Data.ProtoLens.Tag 9, showBurrowedShadows__field_descriptor),
           (Data.ProtoLens.Tag 8, showPlaceholders__field_descriptor),
           (Data.ProtoLens.Tag 6, rawAffectsSelection__field_descriptor),
           (Data.ProtoLens.Tag 7, rawCropToPlayableArea__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _InterfaceOptions'_unknownFields
        (\ x__ y__ -> x__ {_InterfaceOptions'_unknownFields = y__})
  defMessage
    = InterfaceOptions'_constructor
        {_InterfaceOptions'raw = Prelude.Nothing,
         _InterfaceOptions'score = Prelude.Nothing,
         _InterfaceOptions'featureLayer = Prelude.Nothing,
         _InterfaceOptions'render = Prelude.Nothing,
         _InterfaceOptions'showCloaked = Prelude.Nothing,
         _InterfaceOptions'showBurrowedShadows = Prelude.Nothing,
         _InterfaceOptions'showPlaceholders = Prelude.Nothing,
         _InterfaceOptions'rawAffectsSelection = Prelude.Nothing,
         _InterfaceOptions'rawCropToPlayableArea = Prelude.Nothing,
         _InterfaceOptions'_unknownFields = []}
  parseMessage
    = let
        loop ::
          InterfaceOptions
          -> Data.ProtoLens.Encoding.Bytes.Parser InterfaceOptions
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "raw"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"raw") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "score"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"score") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "feature_layer"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"featureLayer") y x)
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "render"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"render") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "show_cloaked"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"showCloaked") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "show_burrowed_shadows"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"showBurrowedShadows") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "show_placeholders"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"showPlaceholders") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "raw_affects_selection"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"rawAffectsSelection") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "raw_crop_to_playable_area"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"rawCropToPlayableArea") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "InterfaceOptions"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'raw") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'score") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'featureLayer") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'render") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'showCloaked") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0) _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'showBurrowedShadows") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (\ b -> if b then 1 else 0) _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'showPlaceholders") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (\ b -> if b then 1 else 0) _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'rawAffectsSelection")
                                         _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (\ b -> if b then 1 else 0) _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field
                                               @"maybe'rawCropToPlayableArea")
                                            _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (\ b -> if b then 1 else 0) _v))
                                     (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                        (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))))
instance Control.DeepSeq.NFData InterfaceOptions where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_InterfaceOptions'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_InterfaceOptions'raw x__)
                (Control.DeepSeq.deepseq
                   (_InterfaceOptions'score x__)
                   (Control.DeepSeq.deepseq
                      (_InterfaceOptions'featureLayer x__)
                      (Control.DeepSeq.deepseq
                         (_InterfaceOptions'render x__)
                         (Control.DeepSeq.deepseq
                            (_InterfaceOptions'showCloaked x__)
                            (Control.DeepSeq.deepseq
                               (_InterfaceOptions'showBurrowedShadows x__)
                               (Control.DeepSeq.deepseq
                                  (_InterfaceOptions'showPlaceholders x__)
                                  (Control.DeepSeq.deepseq
                                     (_InterfaceOptions'rawAffectsSelection x__)
                                     (Control.DeepSeq.deepseq
                                        (_InterfaceOptions'rawCropToPlayableArea x__) ())))))))))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.mapPath' @:: Lens' LocalMap Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'mapPath' @:: Lens' LocalMap (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.mapData' @:: Lens' LocalMap Data.ByteString.ByteString@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'mapData' @:: Lens' LocalMap (Prelude.Maybe Data.ByteString.ByteString)@ -}
data LocalMap
  = LocalMap'_constructor {_LocalMap'mapPath :: !(Prelude.Maybe Data.Text.Text),
                           _LocalMap'mapData :: !(Prelude.Maybe Data.ByteString.ByteString),
                           _LocalMap'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LocalMap where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LocalMap "mapPath" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LocalMap'mapPath (\ x__ y__ -> x__ {_LocalMap'mapPath = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LocalMap "maybe'mapPath" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LocalMap'mapPath (\ x__ y__ -> x__ {_LocalMap'mapPath = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LocalMap "mapData" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LocalMap'mapData (\ x__ y__ -> x__ {_LocalMap'mapData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LocalMap "maybe'mapData" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LocalMap'mapData (\ x__ y__ -> x__ {_LocalMap'mapData = y__}))
        Prelude.id
instance Data.ProtoLens.Message LocalMap where
  messageName _ = Data.Text.pack "SC2APIProtocol.LocalMap"
  packedMessageDescriptor _
    = "\n\
      \\bLocalMap\DC2\EM\n\
      \\bmap_path\CAN\SOH \SOH(\tR\amapPath\DC2\EM\n\
      \\bmap_data\CAN\a \SOH(\fR\amapData"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        mapPath__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_path"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapPath")) ::
              Data.ProtoLens.FieldDescriptor LocalMap
        mapData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapData")) ::
              Data.ProtoLens.FieldDescriptor LocalMap
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, mapPath__field_descriptor),
           (Data.ProtoLens.Tag 7, mapData__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LocalMap'_unknownFields
        (\ x__ y__ -> x__ {_LocalMap'_unknownFields = y__})
  defMessage
    = LocalMap'_constructor
        {_LocalMap'mapPath = Prelude.Nothing,
         _LocalMap'mapData = Prelude.Nothing, _LocalMap'_unknownFields = []}
  parseMessage
    = let
        loop :: LocalMap -> Data.ProtoLens.Encoding.Bytes.Parser LocalMap
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "map_path"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mapPath") y x)
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "map_data"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mapData") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "LocalMap"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mapPath") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mapData") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData LocalMap where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LocalMap'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LocalMap'mapPath x__)
                (Control.DeepSeq.deepseq (_LocalMap'mapData x__) ()))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.gameLoop' @:: Lens' Observation Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'gameLoop' @:: Lens' Observation (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerCommon' @:: Lens' Observation PlayerCommon@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerCommon' @:: Lens' Observation (Prelude.Maybe PlayerCommon)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.alerts' @:: Lens' Observation [Alert]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'alerts' @:: Lens' Observation (Data.Vector.Vector Alert)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.abilities' @:: Lens' Observation [Proto.S2clientprotocol.Common.AvailableAbility]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'abilities' @:: Lens' Observation (Data.Vector.Vector Proto.S2clientprotocol.Common.AvailableAbility)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.score' @:: Lens' Observation Proto.S2clientprotocol.Score.Score@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'score' @:: Lens' Observation (Prelude.Maybe Proto.S2clientprotocol.Score.Score)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.rawData' @:: Lens' Observation Proto.S2clientprotocol.Raw.ObservationRaw@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'rawData' @:: Lens' Observation (Prelude.Maybe Proto.S2clientprotocol.Raw.ObservationRaw)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.featureLayerData' @:: Lens' Observation Proto.S2clientprotocol.Spatial.ObservationFeatureLayer@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'featureLayerData' @:: Lens' Observation (Prelude.Maybe Proto.S2clientprotocol.Spatial.ObservationFeatureLayer)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.renderData' @:: Lens' Observation Proto.S2clientprotocol.Spatial.ObservationRender@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'renderData' @:: Lens' Observation (Prelude.Maybe Proto.S2clientprotocol.Spatial.ObservationRender)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.uiData' @:: Lens' Observation Proto.S2clientprotocol.Ui.ObservationUI@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'uiData' @:: Lens' Observation (Prelude.Maybe Proto.S2clientprotocol.Ui.ObservationUI)@ -}
data Observation
  = Observation'_constructor {_Observation'gameLoop :: !(Prelude.Maybe Data.Word.Word32),
                              _Observation'playerCommon :: !(Prelude.Maybe PlayerCommon),
                              _Observation'alerts :: !(Data.Vector.Vector Alert),
                              _Observation'abilities :: !(Data.Vector.Vector Proto.S2clientprotocol.Common.AvailableAbility),
                              _Observation'score :: !(Prelude.Maybe Proto.S2clientprotocol.Score.Score),
                              _Observation'rawData :: !(Prelude.Maybe Proto.S2clientprotocol.Raw.ObservationRaw),
                              _Observation'featureLayerData :: !(Prelude.Maybe Proto.S2clientprotocol.Spatial.ObservationFeatureLayer),
                              _Observation'renderData :: !(Prelude.Maybe Proto.S2clientprotocol.Spatial.ObservationRender),
                              _Observation'uiData :: !(Prelude.Maybe Proto.S2clientprotocol.Ui.ObservationUI),
                              _Observation'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Observation where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Observation "gameLoop" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'gameLoop
           (\ x__ y__ -> x__ {_Observation'gameLoop = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Observation "maybe'gameLoop" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'gameLoop
           (\ x__ y__ -> x__ {_Observation'gameLoop = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Observation "playerCommon" PlayerCommon where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'playerCommon
           (\ x__ y__ -> x__ {_Observation'playerCommon = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Observation "maybe'playerCommon" (Prelude.Maybe PlayerCommon) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'playerCommon
           (\ x__ y__ -> x__ {_Observation'playerCommon = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Observation "alerts" [Alert] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'alerts (\ x__ y__ -> x__ {_Observation'alerts = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField Observation "vec'alerts" (Data.Vector.Vector Alert) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'alerts (\ x__ y__ -> x__ {_Observation'alerts = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Observation "abilities" [Proto.S2clientprotocol.Common.AvailableAbility] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'abilities
           (\ x__ y__ -> x__ {_Observation'abilities = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField Observation "vec'abilities" (Data.Vector.Vector Proto.S2clientprotocol.Common.AvailableAbility) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'abilities
           (\ x__ y__ -> x__ {_Observation'abilities = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Observation "score" Proto.S2clientprotocol.Score.Score where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'score (\ x__ y__ -> x__ {_Observation'score = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Observation "maybe'score" (Prelude.Maybe Proto.S2clientprotocol.Score.Score) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'score (\ x__ y__ -> x__ {_Observation'score = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Observation "rawData" Proto.S2clientprotocol.Raw.ObservationRaw where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'rawData
           (\ x__ y__ -> x__ {_Observation'rawData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Observation "maybe'rawData" (Prelude.Maybe Proto.S2clientprotocol.Raw.ObservationRaw) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'rawData
           (\ x__ y__ -> x__ {_Observation'rawData = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Observation "featureLayerData" Proto.S2clientprotocol.Spatial.ObservationFeatureLayer where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'featureLayerData
           (\ x__ y__ -> x__ {_Observation'featureLayerData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Observation "maybe'featureLayerData" (Prelude.Maybe Proto.S2clientprotocol.Spatial.ObservationFeatureLayer) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'featureLayerData
           (\ x__ y__ -> x__ {_Observation'featureLayerData = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Observation "renderData" Proto.S2clientprotocol.Spatial.ObservationRender where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'renderData
           (\ x__ y__ -> x__ {_Observation'renderData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Observation "maybe'renderData" (Prelude.Maybe Proto.S2clientprotocol.Spatial.ObservationRender) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'renderData
           (\ x__ y__ -> x__ {_Observation'renderData = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Observation "uiData" Proto.S2clientprotocol.Ui.ObservationUI where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'uiData (\ x__ y__ -> x__ {_Observation'uiData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Observation "maybe'uiData" (Prelude.Maybe Proto.S2clientprotocol.Ui.ObservationUI) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Observation'uiData (\ x__ y__ -> x__ {_Observation'uiData = y__}))
        Prelude.id
instance Data.ProtoLens.Message Observation where
  messageName _ = Data.Text.pack "SC2APIProtocol.Observation"
  packedMessageDescriptor _
    = "\n\
      \\vObservation\DC2\ESC\n\
      \\tgame_loop\CAN\t \SOH(\rR\bgameLoop\DC2A\n\
      \\rplayer_common\CAN\SOH \SOH(\v2\FS.SC2APIProtocol.PlayerCommonR\fplayerCommon\DC2-\n\
      \\ACKalerts\CAN\n\
      \ \ETX(\SO2\NAK.SC2APIProtocol.AlertR\ACKalerts\DC2>\n\
      \\tabilities\CAN\ETX \ETX(\v2 .SC2APIProtocol.AvailableAbilityR\tabilities\DC2+\n\
      \\ENQscore\CAN\EOT \SOH(\v2\NAK.SC2APIProtocol.ScoreR\ENQscore\DC29\n\
      \\braw_data\CAN\ENQ \SOH(\v2\RS.SC2APIProtocol.ObservationRawR\arawData\DC2U\n\
      \\DC2feature_layer_data\CAN\ACK \SOH(\v2'.SC2APIProtocol.ObservationFeatureLayerR\DLEfeatureLayerData\DC2B\n\
      \\vrender_data\CAN\a \SOH(\v2!.SC2APIProtocol.ObservationRenderR\n\
      \renderData\DC26\n\
      \\aui_data\CAN\b \SOH(\v2\GS.SC2APIProtocol.ObservationUIR\ACKuiData"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        gameLoop__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "game_loop"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gameLoop")) ::
              Data.ProtoLens.FieldDescriptor Observation
        playerCommon__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_common"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor PlayerCommon)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerCommon")) ::
              Data.ProtoLens.FieldDescriptor Observation
        alerts__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "alerts"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Alert)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"alerts")) ::
              Data.ProtoLens.FieldDescriptor Observation
        abilities__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "abilities"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Common.AvailableAbility)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"abilities")) ::
              Data.ProtoLens.FieldDescriptor Observation
        score__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "score"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Score.Score)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'score")) ::
              Data.ProtoLens.FieldDescriptor Observation
        rawData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "raw_data"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Raw.ObservationRaw)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rawData")) ::
              Data.ProtoLens.FieldDescriptor Observation
        featureLayerData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "feature_layer_data"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Spatial.ObservationFeatureLayer)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'featureLayerData")) ::
              Data.ProtoLens.FieldDescriptor Observation
        renderData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "render_data"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Spatial.ObservationRender)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'renderData")) ::
              Data.ProtoLens.FieldDescriptor Observation
        uiData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ui_data"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Ui.ObservationUI)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uiData")) ::
              Data.ProtoLens.FieldDescriptor Observation
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 9, gameLoop__field_descriptor),
           (Data.ProtoLens.Tag 1, playerCommon__field_descriptor),
           (Data.ProtoLens.Tag 10, alerts__field_descriptor),
           (Data.ProtoLens.Tag 3, abilities__field_descriptor),
           (Data.ProtoLens.Tag 4, score__field_descriptor),
           (Data.ProtoLens.Tag 5, rawData__field_descriptor),
           (Data.ProtoLens.Tag 6, featureLayerData__field_descriptor),
           (Data.ProtoLens.Tag 7, renderData__field_descriptor),
           (Data.ProtoLens.Tag 8, uiData__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Observation'_unknownFields
        (\ x__ y__ -> x__ {_Observation'_unknownFields = y__})
  defMessage
    = Observation'_constructor
        {_Observation'gameLoop = Prelude.Nothing,
         _Observation'playerCommon = Prelude.Nothing,
         _Observation'alerts = Data.Vector.Generic.empty,
         _Observation'abilities = Data.Vector.Generic.empty,
         _Observation'score = Prelude.Nothing,
         _Observation'rawData = Prelude.Nothing,
         _Observation'featureLayerData = Prelude.Nothing,
         _Observation'renderData = Prelude.Nothing,
         _Observation'uiData = Prelude.Nothing,
         _Observation'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Observation
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Proto.S2clientprotocol.Common.AvailableAbility
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Alert
                -> Data.ProtoLens.Encoding.Bytes.Parser Observation
        loop x mutable'abilities mutable'alerts
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'abilities <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                               mutable'abilities)
                      frozen'alerts <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                            mutable'alerts)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'abilities") frozen'abilities
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'alerts") frozen'alerts x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "game_loop"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"gameLoop") y x)
                                  mutable'abilities mutable'alerts
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "player_common"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"playerCommon") y x)
                                  mutable'abilities mutable'alerts
                        80
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.toEnum
                                           (Prelude.fmap
                                              Prelude.fromIntegral
                                              Data.ProtoLens.Encoding.Bytes.getVarInt))
                                        "alerts"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'alerts y)
                                loop x mutable'abilities v
                        82
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.toEnum
                                                                       (Prelude.fmap
                                                                          Prelude.fromIntegral
                                                                          Data.ProtoLens.Encoding.Bytes.getVarInt))
                                                                    "alerts"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'alerts)
                                loop x mutable'abilities y
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "abilities"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'abilities y)
                                loop x v mutable'alerts
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "score"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"score") y x)
                                  mutable'abilities mutable'alerts
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "raw_data"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"rawData") y x)
                                  mutable'abilities mutable'alerts
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "feature_layer_data"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"featureLayerData") y x)
                                  mutable'abilities mutable'alerts
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "render_data"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"renderData") y x)
                                  mutable'abilities mutable'alerts
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "ui_data"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"uiData") y x)
                                  mutable'abilities mutable'alerts
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'abilities mutable'alerts
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'abilities <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     Data.ProtoLens.Encoding.Growing.new
              mutable'alerts <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                  Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'abilities mutable'alerts)
          "Observation"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'gameLoop") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'playerCommon") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                              ((Prelude..)
                                 ((Prelude..)
                                    Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                 Prelude.fromEnum _v))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'alerts") _x))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                                 ((Prelude..)
                                    (\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Data.ProtoLens.encodeMessage _v))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"vec'abilities") _x))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'score") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.ProtoLens.encodeMessage _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'rawData") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.ProtoLens.encodeMessage _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'featureLayerData") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.ProtoLens.encodeMessage _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'renderData") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                            ((Prelude..)
                                               (\ bs
                                                  -> (Data.Monoid.<>)
                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                          (Prelude.fromIntegral
                                                             (Data.ByteString.length bs)))
                                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Data.ProtoLens.encodeMessage _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'uiData") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                               ((Prelude..)
                                                  (\ bs
                                                     -> (Data.Monoid.<>)
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             (Prelude.fromIntegral
                                                                (Data.ByteString.length bs)))
                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                             bs))
                                                  Data.ProtoLens.encodeMessage _v))
                                     (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                        (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))))
instance Control.DeepSeq.NFData Observation where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Observation'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Observation'gameLoop x__)
                (Control.DeepSeq.deepseq
                   (_Observation'playerCommon x__)
                   (Control.DeepSeq.deepseq
                      (_Observation'alerts x__)
                      (Control.DeepSeq.deepseq
                         (_Observation'abilities x__)
                         (Control.DeepSeq.deepseq
                            (_Observation'score x__)
                            (Control.DeepSeq.deepseq
                               (_Observation'rawData x__)
                               (Control.DeepSeq.deepseq
                                  (_Observation'featureLayerData x__)
                                  (Control.DeepSeq.deepseq
                                     (_Observation'renderData x__)
                                     (Control.DeepSeq.deepseq (_Observation'uiData x__) ())))))))))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'action' @:: Lens' ObserverAction (Prelude.Maybe ObserverAction'Action)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerPerspective' @:: Lens' ObserverAction (Prelude.Maybe ActionObserverPlayerPerspective)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerPerspective' @:: Lens' ObserverAction ActionObserverPlayerPerspective@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'cameraMove' @:: Lens' ObserverAction (Prelude.Maybe ActionObserverCameraMove)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.cameraMove' @:: Lens' ObserverAction ActionObserverCameraMove@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'cameraFollowPlayer' @:: Lens' ObserverAction (Prelude.Maybe ActionObserverCameraFollowPlayer)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.cameraFollowPlayer' @:: Lens' ObserverAction ActionObserverCameraFollowPlayer@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'cameraFollowUnits' @:: Lens' ObserverAction (Prelude.Maybe ActionObserverCameraFollowUnits)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.cameraFollowUnits' @:: Lens' ObserverAction ActionObserverCameraFollowUnits@ -}
data ObserverAction
  = ObserverAction'_constructor {_ObserverAction'action :: !(Prelude.Maybe ObserverAction'Action),
                                 _ObserverAction'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ObserverAction where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
data ObserverAction'Action
  = ObserverAction'PlayerPerspective !ActionObserverPlayerPerspective |
    ObserverAction'CameraMove !ActionObserverCameraMove |
    ObserverAction'CameraFollowPlayer !ActionObserverCameraFollowPlayer |
    ObserverAction'CameraFollowUnits !ActionObserverCameraFollowUnits
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField ObserverAction "maybe'action" (Prelude.Maybe ObserverAction'Action) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ObserverAction'action
           (\ x__ y__ -> x__ {_ObserverAction'action = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ObserverAction "maybe'playerPerspective" (Prelude.Maybe ActionObserverPlayerPerspective) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ObserverAction'action
           (\ x__ y__ -> x__ {_ObserverAction'action = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (ObserverAction'PlayerPerspective x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap ObserverAction'PlayerPerspective y__))
instance Data.ProtoLens.Field.HasField ObserverAction "playerPerspective" ActionObserverPlayerPerspective where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ObserverAction'action
           (\ x__ y__ -> x__ {_ObserverAction'action = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (ObserverAction'PlayerPerspective x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap ObserverAction'PlayerPerspective y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField ObserverAction "maybe'cameraMove" (Prelude.Maybe ActionObserverCameraMove) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ObserverAction'action
           (\ x__ y__ -> x__ {_ObserverAction'action = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (ObserverAction'CameraMove x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap ObserverAction'CameraMove y__))
instance Data.ProtoLens.Field.HasField ObserverAction "cameraMove" ActionObserverCameraMove where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ObserverAction'action
           (\ x__ y__ -> x__ {_ObserverAction'action = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (ObserverAction'CameraMove x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap ObserverAction'CameraMove y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField ObserverAction "maybe'cameraFollowPlayer" (Prelude.Maybe ActionObserverCameraFollowPlayer) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ObserverAction'action
           (\ x__ y__ -> x__ {_ObserverAction'action = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (ObserverAction'CameraFollowPlayer x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap ObserverAction'CameraFollowPlayer y__))
instance Data.ProtoLens.Field.HasField ObserverAction "cameraFollowPlayer" ActionObserverCameraFollowPlayer where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ObserverAction'action
           (\ x__ y__ -> x__ {_ObserverAction'action = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (ObserverAction'CameraFollowPlayer x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap ObserverAction'CameraFollowPlayer y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField ObserverAction "maybe'cameraFollowUnits" (Prelude.Maybe ActionObserverCameraFollowUnits) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ObserverAction'action
           (\ x__ y__ -> x__ {_ObserverAction'action = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (ObserverAction'CameraFollowUnits x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap ObserverAction'CameraFollowUnits y__))
instance Data.ProtoLens.Field.HasField ObserverAction "cameraFollowUnits" ActionObserverCameraFollowUnits where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ObserverAction'action
           (\ x__ y__ -> x__ {_ObserverAction'action = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (ObserverAction'CameraFollowUnits x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap ObserverAction'CameraFollowUnits y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Message ObserverAction where
  messageName _ = Data.Text.pack "SC2APIProtocol.ObserverAction"
  packedMessageDescriptor _
    = "\n\
      \\SOObserverAction\DC2`\n\
      \\DC2player_perspective\CAN\SOH \SOH(\v2/.SC2APIProtocol.ActionObserverPlayerPerspectiveH\NULR\DC1playerPerspective\DC2K\n\
      \\vcamera_move\CAN\STX \SOH(\v2(.SC2APIProtocol.ActionObserverCameraMoveH\NULR\n\
      \cameraMove\DC2d\n\
      \\DC4camera_follow_player\CAN\ETX \SOH(\v20.SC2APIProtocol.ActionObserverCameraFollowPlayerH\NULR\DC2cameraFollowPlayer\DC2a\n\
      \\DC3camera_follow_units\CAN\EOT \SOH(\v2/.SC2APIProtocol.ActionObserverCameraFollowUnitsH\NULR\DC1cameraFollowUnitsB\b\n\
      \\ACKaction"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        playerPerspective__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_perspective"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ActionObserverPlayerPerspective)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerPerspective")) ::
              Data.ProtoLens.FieldDescriptor ObserverAction
        cameraMove__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "camera_move"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ActionObserverCameraMove)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'cameraMove")) ::
              Data.ProtoLens.FieldDescriptor ObserverAction
        cameraFollowPlayer__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "camera_follow_player"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ActionObserverCameraFollowPlayer)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'cameraFollowPlayer")) ::
              Data.ProtoLens.FieldDescriptor ObserverAction
        cameraFollowUnits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "camera_follow_units"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ActionObserverCameraFollowUnits)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'cameraFollowUnits")) ::
              Data.ProtoLens.FieldDescriptor ObserverAction
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, playerPerspective__field_descriptor),
           (Data.ProtoLens.Tag 2, cameraMove__field_descriptor),
           (Data.ProtoLens.Tag 3, cameraFollowPlayer__field_descriptor),
           (Data.ProtoLens.Tag 4, cameraFollowUnits__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ObserverAction'_unknownFields
        (\ x__ y__ -> x__ {_ObserverAction'_unknownFields = y__})
  defMessage
    = ObserverAction'_constructor
        {_ObserverAction'action = Prelude.Nothing,
         _ObserverAction'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ObserverAction
          -> Data.ProtoLens.Encoding.Bytes.Parser ObserverAction
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "player_perspective"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"playerPerspective") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "camera_move"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"cameraMove") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "camera_follow_player"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"cameraFollowPlayer") y x)
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "camera_follow_units"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"cameraFollowUnits") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ObserverAction"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'action") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just (ObserverAction'PlayerPerspective v))
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage v)
                (Prelude.Just (ObserverAction'CameraMove v))
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage v)
                (Prelude.Just (ObserverAction'CameraFollowPlayer v))
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage v)
                (Prelude.Just (ObserverAction'CameraFollowUnits v))
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ObserverAction where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ObserverAction'_unknownFields x__)
             (Control.DeepSeq.deepseq (_ObserverAction'action x__) ())
instance Control.DeepSeq.NFData ObserverAction'Action where
  rnf (ObserverAction'PlayerPerspective x__)
    = Control.DeepSeq.rnf x__
  rnf (ObserverAction'CameraMove x__) = Control.DeepSeq.rnf x__
  rnf (ObserverAction'CameraFollowPlayer x__)
    = Control.DeepSeq.rnf x__
  rnf (ObserverAction'CameraFollowUnits x__)
    = Control.DeepSeq.rnf x__
_ObserverAction'PlayerPerspective ::
  Data.ProtoLens.Prism.Prism' ObserverAction'Action ActionObserverPlayerPerspective
_ObserverAction'PlayerPerspective
  = Data.ProtoLens.Prism.prism'
      ObserverAction'PlayerPerspective
      (\ p__
         -> case p__ of
              (ObserverAction'PlayerPerspective p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_ObserverAction'CameraMove ::
  Data.ProtoLens.Prism.Prism' ObserverAction'Action ActionObserverCameraMove
_ObserverAction'CameraMove
  = Data.ProtoLens.Prism.prism'
      ObserverAction'CameraMove
      (\ p__
         -> case p__ of
              (ObserverAction'CameraMove p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_ObserverAction'CameraFollowPlayer ::
  Data.ProtoLens.Prism.Prism' ObserverAction'Action ActionObserverCameraFollowPlayer
_ObserverAction'CameraFollowPlayer
  = Data.ProtoLens.Prism.prism'
      ObserverAction'CameraFollowPlayer
      (\ p__
         -> case p__ of
              (ObserverAction'CameraFollowPlayer p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_ObserverAction'CameraFollowUnits ::
  Data.ProtoLens.Prism.Prism' ObserverAction'Action ActionObserverCameraFollowUnits
_ObserverAction'CameraFollowUnits
  = Data.ProtoLens.Prism.prism'
      ObserverAction'CameraFollowUnits
      (\ p__
         -> case p__ of
              (ObserverAction'CameraFollowUnits p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerId' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerId' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.minerals' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'minerals' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vespene' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'vespene' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.foodCap' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'foodCap' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.foodUsed' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'foodUsed' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.foodArmy' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'foodArmy' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.foodWorkers' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'foodWorkers' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.idleWorkerCount' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'idleWorkerCount' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.armyCount' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'armyCount' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.warpGateCount' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'warpGateCount' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.larvaCount' @:: Lens' PlayerCommon Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'larvaCount' @:: Lens' PlayerCommon (Prelude.Maybe Data.Word.Word32)@ -}
data PlayerCommon
  = PlayerCommon'_constructor {_PlayerCommon'playerId :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'minerals :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'vespene :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'foodCap :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'foodUsed :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'foodArmy :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'foodWorkers :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'idleWorkerCount :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'armyCount :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'warpGateCount :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'larvaCount :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerCommon'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PlayerCommon where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PlayerCommon "playerId" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'playerId
           (\ x__ y__ -> x__ {_PlayerCommon'playerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'playerId" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'playerId
           (\ x__ y__ -> x__ {_PlayerCommon'playerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerCommon "minerals" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'minerals
           (\ x__ y__ -> x__ {_PlayerCommon'minerals = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'minerals" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'minerals
           (\ x__ y__ -> x__ {_PlayerCommon'minerals = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerCommon "vespene" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'vespene
           (\ x__ y__ -> x__ {_PlayerCommon'vespene = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'vespene" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'vespene
           (\ x__ y__ -> x__ {_PlayerCommon'vespene = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerCommon "foodCap" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'foodCap
           (\ x__ y__ -> x__ {_PlayerCommon'foodCap = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'foodCap" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'foodCap
           (\ x__ y__ -> x__ {_PlayerCommon'foodCap = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerCommon "foodUsed" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'foodUsed
           (\ x__ y__ -> x__ {_PlayerCommon'foodUsed = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'foodUsed" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'foodUsed
           (\ x__ y__ -> x__ {_PlayerCommon'foodUsed = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerCommon "foodArmy" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'foodArmy
           (\ x__ y__ -> x__ {_PlayerCommon'foodArmy = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'foodArmy" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'foodArmy
           (\ x__ y__ -> x__ {_PlayerCommon'foodArmy = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerCommon "foodWorkers" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'foodWorkers
           (\ x__ y__ -> x__ {_PlayerCommon'foodWorkers = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'foodWorkers" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'foodWorkers
           (\ x__ y__ -> x__ {_PlayerCommon'foodWorkers = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerCommon "idleWorkerCount" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'idleWorkerCount
           (\ x__ y__ -> x__ {_PlayerCommon'idleWorkerCount = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'idleWorkerCount" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'idleWorkerCount
           (\ x__ y__ -> x__ {_PlayerCommon'idleWorkerCount = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerCommon "armyCount" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'armyCount
           (\ x__ y__ -> x__ {_PlayerCommon'armyCount = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'armyCount" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'armyCount
           (\ x__ y__ -> x__ {_PlayerCommon'armyCount = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerCommon "warpGateCount" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'warpGateCount
           (\ x__ y__ -> x__ {_PlayerCommon'warpGateCount = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'warpGateCount" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'warpGateCount
           (\ x__ y__ -> x__ {_PlayerCommon'warpGateCount = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerCommon "larvaCount" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'larvaCount
           (\ x__ y__ -> x__ {_PlayerCommon'larvaCount = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerCommon "maybe'larvaCount" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerCommon'larvaCount
           (\ x__ y__ -> x__ {_PlayerCommon'larvaCount = y__}))
        Prelude.id
instance Data.ProtoLens.Message PlayerCommon where
  messageName _ = Data.Text.pack "SC2APIProtocol.PlayerCommon"
  packedMessageDescriptor _
    = "\n\
      \\fPlayerCommon\DC2\ESC\n\
      \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\DC2\SUB\n\
      \\bminerals\CAN\STX \SOH(\rR\bminerals\DC2\CAN\n\
      \\avespene\CAN\ETX \SOH(\rR\avespene\DC2\EM\n\
      \\bfood_cap\CAN\EOT \SOH(\rR\afoodCap\DC2\ESC\n\
      \\tfood_used\CAN\ENQ \SOH(\rR\bfoodUsed\DC2\ESC\n\
      \\tfood_army\CAN\ACK \SOH(\rR\bfoodArmy\DC2!\n\
      \\ffood_workers\CAN\a \SOH(\rR\vfoodWorkers\DC2*\n\
      \\DC1idle_worker_count\CAN\b \SOH(\rR\SIidleWorkerCount\DC2\GS\n\
      \\n\
      \army_count\CAN\t \SOH(\rR\tarmyCount\DC2&\n\
      \\SIwarp_gate_count\CAN\n\
      \ \SOH(\rR\rwarpGateCount\DC2\US\n\
      \\vlarva_count\CAN\v \SOH(\rR\n\
      \larvaCount"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        playerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerId")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
        minerals__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "minerals"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'minerals")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
        vespene__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "vespene"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'vespene")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
        foodCap__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "food_cap"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'foodCap")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
        foodUsed__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "food_used"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'foodUsed")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
        foodArmy__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "food_army"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'foodArmy")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
        foodWorkers__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "food_workers"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'foodWorkers")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
        idleWorkerCount__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "idle_worker_count"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'idleWorkerCount")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
        armyCount__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "army_count"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'armyCount")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
        warpGateCount__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "warp_gate_count"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'warpGateCount")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
        larvaCount__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "larva_count"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'larvaCount")) ::
              Data.ProtoLens.FieldDescriptor PlayerCommon
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, playerId__field_descriptor),
           (Data.ProtoLens.Tag 2, minerals__field_descriptor),
           (Data.ProtoLens.Tag 3, vespene__field_descriptor),
           (Data.ProtoLens.Tag 4, foodCap__field_descriptor),
           (Data.ProtoLens.Tag 5, foodUsed__field_descriptor),
           (Data.ProtoLens.Tag 6, foodArmy__field_descriptor),
           (Data.ProtoLens.Tag 7, foodWorkers__field_descriptor),
           (Data.ProtoLens.Tag 8, idleWorkerCount__field_descriptor),
           (Data.ProtoLens.Tag 9, armyCount__field_descriptor),
           (Data.ProtoLens.Tag 10, warpGateCount__field_descriptor),
           (Data.ProtoLens.Tag 11, larvaCount__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _PlayerCommon'_unknownFields
        (\ x__ y__ -> x__ {_PlayerCommon'_unknownFields = y__})
  defMessage
    = PlayerCommon'_constructor
        {_PlayerCommon'playerId = Prelude.Nothing,
         _PlayerCommon'minerals = Prelude.Nothing,
         _PlayerCommon'vespene = Prelude.Nothing,
         _PlayerCommon'foodCap = Prelude.Nothing,
         _PlayerCommon'foodUsed = Prelude.Nothing,
         _PlayerCommon'foodArmy = Prelude.Nothing,
         _PlayerCommon'foodWorkers = Prelude.Nothing,
         _PlayerCommon'idleWorkerCount = Prelude.Nothing,
         _PlayerCommon'armyCount = Prelude.Nothing,
         _PlayerCommon'warpGateCount = Prelude.Nothing,
         _PlayerCommon'larvaCount = Prelude.Nothing,
         _PlayerCommon'_unknownFields = []}
  parseMessage
    = let
        loop ::
          PlayerCommon -> Data.ProtoLens.Encoding.Bytes.Parser PlayerCommon
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "player_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerId") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "minerals"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"minerals") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "vespene"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"vespene") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "food_cap"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"foodCap") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "food_used"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"foodUsed") y x)
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "food_army"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"foodArmy") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "food_workers"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"foodWorkers") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "idle_worker_count"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"idleWorkerCount") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "army_count"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"armyCount") y x)
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "warp_gate_count"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"warpGateCount") y x)
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "larva_count"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"larvaCount") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "PlayerCommon"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'playerId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'minerals") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'vespene") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'foodCap") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'foodUsed") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'foodArmy") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'foodWorkers") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'idleWorkerCount") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'armyCount") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'warpGateCount")
                                               _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'larvaCount")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        Prelude.fromIntegral _v))
                                           (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                              (Lens.Family2.view
                                                 Data.ProtoLens.unknownFields _x))))))))))))
instance Control.DeepSeq.NFData PlayerCommon where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_PlayerCommon'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_PlayerCommon'playerId x__)
                (Control.DeepSeq.deepseq
                   (_PlayerCommon'minerals x__)
                   (Control.DeepSeq.deepseq
                      (_PlayerCommon'vespene x__)
                      (Control.DeepSeq.deepseq
                         (_PlayerCommon'foodCap x__)
                         (Control.DeepSeq.deepseq
                            (_PlayerCommon'foodUsed x__)
                            (Control.DeepSeq.deepseq
                               (_PlayerCommon'foodArmy x__)
                               (Control.DeepSeq.deepseq
                                  (_PlayerCommon'foodWorkers x__)
                                  (Control.DeepSeq.deepseq
                                     (_PlayerCommon'idleWorkerCount x__)
                                     (Control.DeepSeq.deepseq
                                        (_PlayerCommon'armyCount x__)
                                        (Control.DeepSeq.deepseq
                                           (_PlayerCommon'warpGateCount x__)
                                           (Control.DeepSeq.deepseq
                                              (_PlayerCommon'larvaCount x__) ())))))))))))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerId' @:: Lens' PlayerInfo Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerId' @:: Lens' PlayerInfo (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.type'' @:: Lens' PlayerInfo PlayerType@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'type'' @:: Lens' PlayerInfo (Prelude.Maybe PlayerType)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.raceRequested' @:: Lens' PlayerInfo Proto.S2clientprotocol.Common.Race@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'raceRequested' @:: Lens' PlayerInfo (Prelude.Maybe Proto.S2clientprotocol.Common.Race)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.raceActual' @:: Lens' PlayerInfo Proto.S2clientprotocol.Common.Race@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'raceActual' @:: Lens' PlayerInfo (Prelude.Maybe Proto.S2clientprotocol.Common.Race)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.difficulty' @:: Lens' PlayerInfo Difficulty@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'difficulty' @:: Lens' PlayerInfo (Prelude.Maybe Difficulty)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.aiBuild' @:: Lens' PlayerInfo AIBuild@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'aiBuild' @:: Lens' PlayerInfo (Prelude.Maybe AIBuild)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerName' @:: Lens' PlayerInfo Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerName' @:: Lens' PlayerInfo (Prelude.Maybe Data.Text.Text)@ -}
data PlayerInfo
  = PlayerInfo'_constructor {_PlayerInfo'playerId :: !(Prelude.Maybe Data.Word.Word32),
                             _PlayerInfo'type' :: !(Prelude.Maybe PlayerType),
                             _PlayerInfo'raceRequested :: !(Prelude.Maybe Proto.S2clientprotocol.Common.Race),
                             _PlayerInfo'raceActual :: !(Prelude.Maybe Proto.S2clientprotocol.Common.Race),
                             _PlayerInfo'difficulty :: !(Prelude.Maybe Difficulty),
                             _PlayerInfo'aiBuild :: !(Prelude.Maybe AIBuild),
                             _PlayerInfo'playerName :: !(Prelude.Maybe Data.Text.Text),
                             _PlayerInfo'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PlayerInfo where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PlayerInfo "playerId" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'playerId
           (\ x__ y__ -> x__ {_PlayerInfo'playerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerInfo "maybe'playerId" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'playerId
           (\ x__ y__ -> x__ {_PlayerInfo'playerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerInfo "type'" PlayerType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'type' (\ x__ y__ -> x__ {_PlayerInfo'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerInfo "maybe'type'" (Prelude.Maybe PlayerType) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'type' (\ x__ y__ -> x__ {_PlayerInfo'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerInfo "raceRequested" Proto.S2clientprotocol.Common.Race where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'raceRequested
           (\ x__ y__ -> x__ {_PlayerInfo'raceRequested = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerInfo "maybe'raceRequested" (Prelude.Maybe Proto.S2clientprotocol.Common.Race) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'raceRequested
           (\ x__ y__ -> x__ {_PlayerInfo'raceRequested = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerInfo "raceActual" Proto.S2clientprotocol.Common.Race where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'raceActual
           (\ x__ y__ -> x__ {_PlayerInfo'raceActual = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerInfo "maybe'raceActual" (Prelude.Maybe Proto.S2clientprotocol.Common.Race) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'raceActual
           (\ x__ y__ -> x__ {_PlayerInfo'raceActual = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerInfo "difficulty" Difficulty where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'difficulty
           (\ x__ y__ -> x__ {_PlayerInfo'difficulty = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerInfo "maybe'difficulty" (Prelude.Maybe Difficulty) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'difficulty
           (\ x__ y__ -> x__ {_PlayerInfo'difficulty = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerInfo "aiBuild" AIBuild where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'aiBuild (\ x__ y__ -> x__ {_PlayerInfo'aiBuild = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerInfo "maybe'aiBuild" (Prelude.Maybe AIBuild) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'aiBuild (\ x__ y__ -> x__ {_PlayerInfo'aiBuild = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerInfo "playerName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'playerName
           (\ x__ y__ -> x__ {_PlayerInfo'playerName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerInfo "maybe'playerName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfo'playerName
           (\ x__ y__ -> x__ {_PlayerInfo'playerName = y__}))
        Prelude.id
instance Data.ProtoLens.Message PlayerInfo where
  messageName _ = Data.Text.pack "SC2APIProtocol.PlayerInfo"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \PlayerInfo\DC2\ESC\n\
      \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\DC2.\n\
      \\EOTtype\CAN\STX \SOH(\SO2\SUB.SC2APIProtocol.PlayerTypeR\EOTtype\DC2;\n\
      \\SOrace_requested\CAN\ETX \SOH(\SO2\DC4.SC2APIProtocol.RaceR\rraceRequested\DC25\n\
      \\vrace_actual\CAN\EOT \SOH(\SO2\DC4.SC2APIProtocol.RaceR\n\
      \raceActual\DC2:\n\
      \\n\
      \difficulty\CAN\ENQ \SOH(\SO2\SUB.SC2APIProtocol.DifficultyR\n\
      \difficulty\DC22\n\
      \\bai_build\CAN\a \SOH(\SO2\ETB.SC2APIProtocol.AIBuildR\aaiBuild\DC2\US\n\
      \\vplayer_name\CAN\ACK \SOH(\tR\n\
      \playerName"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        playerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerId")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfo
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor PlayerType)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfo
        raceRequested__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "race_requested"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Common.Race)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'raceRequested")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfo
        raceActual__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "race_actual"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Common.Race)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'raceActual")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfo
        difficulty__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "difficulty"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Difficulty)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'difficulty")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfo
        aiBuild__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ai_build"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor AIBuild)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'aiBuild")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfo
        playerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerName")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfo
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, playerId__field_descriptor),
           (Data.ProtoLens.Tag 2, type'__field_descriptor),
           (Data.ProtoLens.Tag 3, raceRequested__field_descriptor),
           (Data.ProtoLens.Tag 4, raceActual__field_descriptor),
           (Data.ProtoLens.Tag 5, difficulty__field_descriptor),
           (Data.ProtoLens.Tag 7, aiBuild__field_descriptor),
           (Data.ProtoLens.Tag 6, playerName__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _PlayerInfo'_unknownFields
        (\ x__ y__ -> x__ {_PlayerInfo'_unknownFields = y__})
  defMessage
    = PlayerInfo'_constructor
        {_PlayerInfo'playerId = Prelude.Nothing,
         _PlayerInfo'type' = Prelude.Nothing,
         _PlayerInfo'raceRequested = Prelude.Nothing,
         _PlayerInfo'raceActual = Prelude.Nothing,
         _PlayerInfo'difficulty = Prelude.Nothing,
         _PlayerInfo'aiBuild = Prelude.Nothing,
         _PlayerInfo'playerName = Prelude.Nothing,
         _PlayerInfo'_unknownFields = []}
  parseMessage
    = let
        loop ::
          PlayerInfo -> Data.ProtoLens.Encoding.Bytes.Parser PlayerInfo
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "player_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerId") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "type"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "race_requested"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"raceRequested") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "race_actual"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"raceActual") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "difficulty"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"difficulty") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "ai_build"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"aiBuild") y x)
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "player_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerName") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "PlayerInfo"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'playerId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'type'") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Prelude.fromEnum _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'raceRequested") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                Prelude.fromEnum _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'raceActual") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'difficulty") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral)
                                      Prelude.fromEnum _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'aiBuild") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                      ((Prelude..)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral)
                                         Prelude.fromEnum _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'playerName") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8 _v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData PlayerInfo where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_PlayerInfo'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_PlayerInfo'playerId x__)
                (Control.DeepSeq.deepseq
                   (_PlayerInfo'type' x__)
                   (Control.DeepSeq.deepseq
                      (_PlayerInfo'raceRequested x__)
                      (Control.DeepSeq.deepseq
                         (_PlayerInfo'raceActual x__)
                         (Control.DeepSeq.deepseq
                            (_PlayerInfo'difficulty x__)
                            (Control.DeepSeq.deepseq
                               (_PlayerInfo'aiBuild x__)
                               (Control.DeepSeq.deepseq (_PlayerInfo'playerName x__) ())))))))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerInfo' @:: Lens' PlayerInfoExtra PlayerInfo@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerInfo' @:: Lens' PlayerInfoExtra (Prelude.Maybe PlayerInfo)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerResult' @:: Lens' PlayerInfoExtra PlayerResult@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerResult' @:: Lens' PlayerInfoExtra (Prelude.Maybe PlayerResult)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerMmr' @:: Lens' PlayerInfoExtra Data.Int.Int32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerMmr' @:: Lens' PlayerInfoExtra (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerApm' @:: Lens' PlayerInfoExtra Data.Int.Int32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerApm' @:: Lens' PlayerInfoExtra (Prelude.Maybe Data.Int.Int32)@ -}
data PlayerInfoExtra
  = PlayerInfoExtra'_constructor {_PlayerInfoExtra'playerInfo :: !(Prelude.Maybe PlayerInfo),
                                  _PlayerInfoExtra'playerResult :: !(Prelude.Maybe PlayerResult),
                                  _PlayerInfoExtra'playerMmr :: !(Prelude.Maybe Data.Int.Int32),
                                  _PlayerInfoExtra'playerApm :: !(Prelude.Maybe Data.Int.Int32),
                                  _PlayerInfoExtra'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PlayerInfoExtra where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PlayerInfoExtra "playerInfo" PlayerInfo where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfoExtra'playerInfo
           (\ x__ y__ -> x__ {_PlayerInfoExtra'playerInfo = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField PlayerInfoExtra "maybe'playerInfo" (Prelude.Maybe PlayerInfo) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfoExtra'playerInfo
           (\ x__ y__ -> x__ {_PlayerInfoExtra'playerInfo = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerInfoExtra "playerResult" PlayerResult where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfoExtra'playerResult
           (\ x__ y__ -> x__ {_PlayerInfoExtra'playerResult = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField PlayerInfoExtra "maybe'playerResult" (Prelude.Maybe PlayerResult) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfoExtra'playerResult
           (\ x__ y__ -> x__ {_PlayerInfoExtra'playerResult = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerInfoExtra "playerMmr" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfoExtra'playerMmr
           (\ x__ y__ -> x__ {_PlayerInfoExtra'playerMmr = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerInfoExtra "maybe'playerMmr" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfoExtra'playerMmr
           (\ x__ y__ -> x__ {_PlayerInfoExtra'playerMmr = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerInfoExtra "playerApm" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfoExtra'playerApm
           (\ x__ y__ -> x__ {_PlayerInfoExtra'playerApm = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerInfoExtra "maybe'playerApm" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerInfoExtra'playerApm
           (\ x__ y__ -> x__ {_PlayerInfoExtra'playerApm = y__}))
        Prelude.id
instance Data.ProtoLens.Message PlayerInfoExtra where
  messageName _ = Data.Text.pack "SC2APIProtocol.PlayerInfoExtra"
  packedMessageDescriptor _
    = "\n\
      \\SIPlayerInfoExtra\DC2;\n\
      \\vplayer_info\CAN\SOH \SOH(\v2\SUB.SC2APIProtocol.PlayerInfoR\n\
      \playerInfo\DC2A\n\
      \\rplayer_result\CAN\STX \SOH(\v2\FS.SC2APIProtocol.PlayerResultR\fplayerResult\DC2\GS\n\
      \\n\
      \player_mmr\CAN\ETX \SOH(\ENQR\tplayerMmr\DC2\GS\n\
      \\n\
      \player_apm\CAN\EOT \SOH(\ENQR\tplayerApm"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        playerInfo__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_info"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor PlayerInfo)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerInfo")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfoExtra
        playerResult__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_result"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor PlayerResult)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerResult")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfoExtra
        playerMmr__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_mmr"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerMmr")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfoExtra
        playerApm__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_apm"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerApm")) ::
              Data.ProtoLens.FieldDescriptor PlayerInfoExtra
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, playerInfo__field_descriptor),
           (Data.ProtoLens.Tag 2, playerResult__field_descriptor),
           (Data.ProtoLens.Tag 3, playerMmr__field_descriptor),
           (Data.ProtoLens.Tag 4, playerApm__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _PlayerInfoExtra'_unknownFields
        (\ x__ y__ -> x__ {_PlayerInfoExtra'_unknownFields = y__})
  defMessage
    = PlayerInfoExtra'_constructor
        {_PlayerInfoExtra'playerInfo = Prelude.Nothing,
         _PlayerInfoExtra'playerResult = Prelude.Nothing,
         _PlayerInfoExtra'playerMmr = Prelude.Nothing,
         _PlayerInfoExtra'playerApm = Prelude.Nothing,
         _PlayerInfoExtra'_unknownFields = []}
  parseMessage
    = let
        loop ::
          PlayerInfoExtra
          -> Data.ProtoLens.Encoding.Bytes.Parser PlayerInfoExtra
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "player_info"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerInfo") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "player_result"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"playerResult") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "player_mmr"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerMmr") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "player_apm"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerApm") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "PlayerInfoExtra"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'playerInfo") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'playerResult") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'playerMmr") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'playerApm") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData PlayerInfoExtra where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_PlayerInfoExtra'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_PlayerInfoExtra'playerInfo x__)
                (Control.DeepSeq.deepseq
                   (_PlayerInfoExtra'playerResult x__)
                   (Control.DeepSeq.deepseq
                      (_PlayerInfoExtra'playerMmr x__)
                      (Control.DeepSeq.deepseq (_PlayerInfoExtra'playerApm x__) ()))))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerId' @:: Lens' PlayerResult Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerId' @:: Lens' PlayerResult (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.result' @:: Lens' PlayerResult Result@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'result' @:: Lens' PlayerResult (Prelude.Maybe Result)@ -}
data PlayerResult
  = PlayerResult'_constructor {_PlayerResult'playerId :: !(Prelude.Maybe Data.Word.Word32),
                               _PlayerResult'result :: !(Prelude.Maybe Result),
                               _PlayerResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PlayerResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PlayerResult "playerId" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerResult'playerId
           (\ x__ y__ -> x__ {_PlayerResult'playerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerResult "maybe'playerId" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerResult'playerId
           (\ x__ y__ -> x__ {_PlayerResult'playerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerResult "result" Result where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerResult'result
           (\ x__ y__ -> x__ {_PlayerResult'result = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerResult "maybe'result" (Prelude.Maybe Result) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerResult'result
           (\ x__ y__ -> x__ {_PlayerResult'result = y__}))
        Prelude.id
instance Data.ProtoLens.Message PlayerResult where
  messageName _ = Data.Text.pack "SC2APIProtocol.PlayerResult"
  packedMessageDescriptor _
    = "\n\
      \\fPlayerResult\DC2\ESC\n\
      \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\DC2.\n\
      \\ACKresult\CAN\STX \SOH(\SO2\SYN.SC2APIProtocol.ResultR\ACKresult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        playerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerId")) ::
              Data.ProtoLens.FieldDescriptor PlayerResult
        result__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Result)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'result")) ::
              Data.ProtoLens.FieldDescriptor PlayerResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, playerId__field_descriptor),
           (Data.ProtoLens.Tag 2, result__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _PlayerResult'_unknownFields
        (\ x__ y__ -> x__ {_PlayerResult'_unknownFields = y__})
  defMessage
    = PlayerResult'_constructor
        {_PlayerResult'playerId = Prelude.Nothing,
         _PlayerResult'result = Prelude.Nothing,
         _PlayerResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          PlayerResult -> Data.ProtoLens.Encoding.Bytes.Parser PlayerResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "player_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerId") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "result"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"result") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "PlayerResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'playerId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'result") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Prelude.fromEnum _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData PlayerResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_PlayerResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_PlayerResult'playerId x__)
                (Control.DeepSeq.deepseq (_PlayerResult'result x__) ()))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.type'' @:: Lens' PlayerSetup PlayerType@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'type'' @:: Lens' PlayerSetup (Prelude.Maybe PlayerType)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.race' @:: Lens' PlayerSetup Proto.S2clientprotocol.Common.Race@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'race' @:: Lens' PlayerSetup (Prelude.Maybe Proto.S2clientprotocol.Common.Race)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.difficulty' @:: Lens' PlayerSetup Difficulty@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'difficulty' @:: Lens' PlayerSetup (Prelude.Maybe Difficulty)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerName' @:: Lens' PlayerSetup Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerName' @:: Lens' PlayerSetup (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.aiBuild' @:: Lens' PlayerSetup AIBuild@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'aiBuild' @:: Lens' PlayerSetup (Prelude.Maybe AIBuild)@ -}
data PlayerSetup
  = PlayerSetup'_constructor {_PlayerSetup'type' :: !(Prelude.Maybe PlayerType),
                              _PlayerSetup'race :: !(Prelude.Maybe Proto.S2clientprotocol.Common.Race),
                              _PlayerSetup'difficulty :: !(Prelude.Maybe Difficulty),
                              _PlayerSetup'playerName :: !(Prelude.Maybe Data.Text.Text),
                              _PlayerSetup'aiBuild :: !(Prelude.Maybe AIBuild),
                              _PlayerSetup'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PlayerSetup where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PlayerSetup "type'" PlayerType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerSetup'type' (\ x__ y__ -> x__ {_PlayerSetup'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerSetup "maybe'type'" (Prelude.Maybe PlayerType) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerSetup'type' (\ x__ y__ -> x__ {_PlayerSetup'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerSetup "race" Proto.S2clientprotocol.Common.Race where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerSetup'race (\ x__ y__ -> x__ {_PlayerSetup'race = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerSetup "maybe'race" (Prelude.Maybe Proto.S2clientprotocol.Common.Race) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerSetup'race (\ x__ y__ -> x__ {_PlayerSetup'race = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerSetup "difficulty" Difficulty where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerSetup'difficulty
           (\ x__ y__ -> x__ {_PlayerSetup'difficulty = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerSetup "maybe'difficulty" (Prelude.Maybe Difficulty) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerSetup'difficulty
           (\ x__ y__ -> x__ {_PlayerSetup'difficulty = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerSetup "playerName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerSetup'playerName
           (\ x__ y__ -> x__ {_PlayerSetup'playerName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerSetup "maybe'playerName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerSetup'playerName
           (\ x__ y__ -> x__ {_PlayerSetup'playerName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PlayerSetup "aiBuild" AIBuild where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerSetup'aiBuild
           (\ x__ y__ -> x__ {_PlayerSetup'aiBuild = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PlayerSetup "maybe'aiBuild" (Prelude.Maybe AIBuild) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PlayerSetup'aiBuild
           (\ x__ y__ -> x__ {_PlayerSetup'aiBuild = y__}))
        Prelude.id
instance Data.ProtoLens.Message PlayerSetup where
  messageName _ = Data.Text.pack "SC2APIProtocol.PlayerSetup"
  packedMessageDescriptor _
    = "\n\
      \\vPlayerSetup\DC2.\n\
      \\EOTtype\CAN\SOH \SOH(\SO2\SUB.SC2APIProtocol.PlayerTypeR\EOTtype\DC2(\n\
      \\EOTrace\CAN\STX \SOH(\SO2\DC4.SC2APIProtocol.RaceR\EOTrace\DC2:\n\
      \\n\
      \difficulty\CAN\ETX \SOH(\SO2\SUB.SC2APIProtocol.DifficultyR\n\
      \difficulty\DC2\US\n\
      \\vplayer_name\CAN\EOT \SOH(\tR\n\
      \playerName\DC22\n\
      \\bai_build\CAN\ENQ \SOH(\SO2\ETB.SC2APIProtocol.AIBuildR\aaiBuild"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor PlayerType)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor PlayerSetup
        race__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "race"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Common.Race)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'race")) ::
              Data.ProtoLens.FieldDescriptor PlayerSetup
        difficulty__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "difficulty"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Difficulty)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'difficulty")) ::
              Data.ProtoLens.FieldDescriptor PlayerSetup
        playerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerName")) ::
              Data.ProtoLens.FieldDescriptor PlayerSetup
        aiBuild__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ai_build"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor AIBuild)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'aiBuild")) ::
              Data.ProtoLens.FieldDescriptor PlayerSetup
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, type'__field_descriptor),
           (Data.ProtoLens.Tag 2, race__field_descriptor),
           (Data.ProtoLens.Tag 3, difficulty__field_descriptor),
           (Data.ProtoLens.Tag 4, playerName__field_descriptor),
           (Data.ProtoLens.Tag 5, aiBuild__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _PlayerSetup'_unknownFields
        (\ x__ y__ -> x__ {_PlayerSetup'_unknownFields = y__})
  defMessage
    = PlayerSetup'_constructor
        {_PlayerSetup'type' = Prelude.Nothing,
         _PlayerSetup'race = Prelude.Nothing,
         _PlayerSetup'difficulty = Prelude.Nothing,
         _PlayerSetup'playerName = Prelude.Nothing,
         _PlayerSetup'aiBuild = Prelude.Nothing,
         _PlayerSetup'_unknownFields = []}
  parseMessage
    = let
        loop ::
          PlayerSetup -> Data.ProtoLens.Encoding.Bytes.Parser PlayerSetup
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "type"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "race"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"race") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "difficulty"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"difficulty") y x)
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "player_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerName") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "ai_build"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"aiBuild") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "PlayerSetup"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'type'") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Prelude.fromEnum _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'race") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Prelude.fromEnum _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'difficulty") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                Prelude.fromEnum _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'playerName") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'aiBuild") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral)
                                      Prelude.fromEnum _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData PlayerSetup where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_PlayerSetup'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_PlayerSetup'type' x__)
                (Control.DeepSeq.deepseq
                   (_PlayerSetup'race x__)
                   (Control.DeepSeq.deepseq
                      (_PlayerSetup'difficulty x__)
                      (Control.DeepSeq.deepseq
                         (_PlayerSetup'playerName x__)
                         (Control.DeepSeq.deepseq (_PlayerSetup'aiBuild x__) ())))))
data PlayerType
  = Participant | Computer | Observer
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum PlayerType where
  maybeToEnum 1 = Prelude.Just Participant
  maybeToEnum 2 = Prelude.Just Computer
  maybeToEnum 3 = Prelude.Just Observer
  maybeToEnum _ = Prelude.Nothing
  showEnum Participant = "Participant"
  showEnum Computer = "Computer"
  showEnum Observer = "Observer"
  readEnum k
    | (Prelude.==) k "Participant" = Prelude.Just Participant
    | (Prelude.==) k "Computer" = Prelude.Just Computer
    | (Prelude.==) k "Observer" = Prelude.Just Observer
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded PlayerType where
  minBound = Participant
  maxBound = Observer
instance Prelude.Enum PlayerType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum PlayerType: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum Participant = 1
  fromEnum Computer = 2
  fromEnum Observer = 3
  succ Observer
    = Prelude.error
        "PlayerType.succ: bad argument Observer. This value would be out of bounds."
  succ Participant = Computer
  succ Computer = Observer
  pred Participant
    = Prelude.error
        "PlayerType.pred: bad argument Participant. This value would be out of bounds."
  pred Computer = Participant
  pred Observer = Computer
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault PlayerType where
  fieldDefault = Participant
instance Control.DeepSeq.NFData PlayerType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.gamePort' @:: Lens' PortSet Data.Int.Int32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'gamePort' @:: Lens' PortSet (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.basePort' @:: Lens' PortSet Data.Int.Int32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'basePort' @:: Lens' PortSet (Prelude.Maybe Data.Int.Int32)@ -}
data PortSet
  = PortSet'_constructor {_PortSet'gamePort :: !(Prelude.Maybe Data.Int.Int32),
                          _PortSet'basePort :: !(Prelude.Maybe Data.Int.Int32),
                          _PortSet'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PortSet where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PortSet "gamePort" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PortSet'gamePort (\ x__ y__ -> x__ {_PortSet'gamePort = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PortSet "maybe'gamePort" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PortSet'gamePort (\ x__ y__ -> x__ {_PortSet'gamePort = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PortSet "basePort" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PortSet'basePort (\ x__ y__ -> x__ {_PortSet'basePort = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PortSet "maybe'basePort" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PortSet'basePort (\ x__ y__ -> x__ {_PortSet'basePort = y__}))
        Prelude.id
instance Data.ProtoLens.Message PortSet where
  messageName _ = Data.Text.pack "SC2APIProtocol.PortSet"
  packedMessageDescriptor _
    = "\n\
      \\aPortSet\DC2\ESC\n\
      \\tgame_port\CAN\SOH \SOH(\ENQR\bgamePort\DC2\ESC\n\
      \\tbase_port\CAN\STX \SOH(\ENQR\bbasePort"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        gamePort__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "game_port"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gamePort")) ::
              Data.ProtoLens.FieldDescriptor PortSet
        basePort__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "base_port"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'basePort")) ::
              Data.ProtoLens.FieldDescriptor PortSet
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, gamePort__field_descriptor),
           (Data.ProtoLens.Tag 2, basePort__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _PortSet'_unknownFields
        (\ x__ y__ -> x__ {_PortSet'_unknownFields = y__})
  defMessage
    = PortSet'_constructor
        {_PortSet'gamePort = Prelude.Nothing,
         _PortSet'basePort = Prelude.Nothing, _PortSet'_unknownFields = []}
  parseMessage
    = let
        loop :: PortSet -> Data.ProtoLens.Encoding.Bytes.Parser PortSet
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "game_port"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"gamePort") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "base_port"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"basePort") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "PortSet"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'gamePort") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'basePort") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData PortSet where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_PortSet'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_PortSet'gamePort x__)
                (Control.DeepSeq.deepseq (_PortSet'basePort x__) ()))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.id' @:: Lens' Request Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'id' @:: Lens' Request (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'request' @:: Lens' Request (Prelude.Maybe Request'Request)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'createGame' @:: Lens' Request (Prelude.Maybe RequestCreateGame)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.createGame' @:: Lens' Request RequestCreateGame@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'joinGame' @:: Lens' Request (Prelude.Maybe RequestJoinGame)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.joinGame' @:: Lens' Request RequestJoinGame@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'restartGame' @:: Lens' Request (Prelude.Maybe RequestRestartGame)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.restartGame' @:: Lens' Request RequestRestartGame@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'startReplay' @:: Lens' Request (Prelude.Maybe RequestStartReplay)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.startReplay' @:: Lens' Request RequestStartReplay@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'leaveGame' @:: Lens' Request (Prelude.Maybe RequestLeaveGame)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.leaveGame' @:: Lens' Request RequestLeaveGame@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'quickSave' @:: Lens' Request (Prelude.Maybe RequestQuickSave)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.quickSave' @:: Lens' Request RequestQuickSave@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'quickLoad' @:: Lens' Request (Prelude.Maybe RequestQuickLoad)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.quickLoad' @:: Lens' Request RequestQuickLoad@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'quit' @:: Lens' Request (Prelude.Maybe RequestQuit)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.quit' @:: Lens' Request RequestQuit@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'gameInfo' @:: Lens' Request (Prelude.Maybe RequestGameInfo)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.gameInfo' @:: Lens' Request RequestGameInfo@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'observation' @:: Lens' Request (Prelude.Maybe RequestObservation)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.observation' @:: Lens' Request RequestObservation@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'action' @:: Lens' Request (Prelude.Maybe RequestAction)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.action' @:: Lens' Request RequestAction@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'obsAction' @:: Lens' Request (Prelude.Maybe RequestObserverAction)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.obsAction' @:: Lens' Request RequestObserverAction@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'step' @:: Lens' Request (Prelude.Maybe RequestStep)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.step' @:: Lens' Request RequestStep@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'data'' @:: Lens' Request (Prelude.Maybe RequestData)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.data'' @:: Lens' Request RequestData@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'query' @:: Lens' Request (Prelude.Maybe Proto.S2clientprotocol.Query.RequestQuery)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.query' @:: Lens' Request Proto.S2clientprotocol.Query.RequestQuery@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'saveReplay' @:: Lens' Request (Prelude.Maybe RequestSaveReplay)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.saveReplay' @:: Lens' Request RequestSaveReplay@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'mapCommand' @:: Lens' Request (Prelude.Maybe RequestMapCommand)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.mapCommand' @:: Lens' Request RequestMapCommand@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'replayInfo' @:: Lens' Request (Prelude.Maybe RequestReplayInfo)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.replayInfo' @:: Lens' Request RequestReplayInfo@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'availableMaps' @:: Lens' Request (Prelude.Maybe RequestAvailableMaps)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.availableMaps' @:: Lens' Request RequestAvailableMaps@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'saveMap' @:: Lens' Request (Prelude.Maybe RequestSaveMap)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.saveMap' @:: Lens' Request RequestSaveMap@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'ping' @:: Lens' Request (Prelude.Maybe RequestPing)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.ping' @:: Lens' Request RequestPing@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'debug' @:: Lens' Request (Prelude.Maybe RequestDebug)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.debug' @:: Lens' Request RequestDebug@ -}
data Request
  = Request'_constructor {_Request'id :: !(Prelude.Maybe Data.Word.Word32),
                          _Request'request :: !(Prelude.Maybe Request'Request),
                          _Request'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Request where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
data Request'Request
  = Request'CreateGame !RequestCreateGame |
    Request'JoinGame !RequestJoinGame |
    Request'RestartGame !RequestRestartGame |
    Request'StartReplay !RequestStartReplay |
    Request'LeaveGame !RequestLeaveGame |
    Request'QuickSave !RequestQuickSave |
    Request'QuickLoad !RequestQuickLoad |
    Request'Quit !RequestQuit |
    Request'GameInfo !RequestGameInfo |
    Request'Observation !RequestObservation |
    Request'Action !RequestAction |
    Request'ObsAction !RequestObserverAction |
    Request'Step !RequestStep |
    Request'Data !RequestData |
    Request'Query !Proto.S2clientprotocol.Query.RequestQuery |
    Request'SaveReplay !RequestSaveReplay |
    Request'MapCommand !RequestMapCommand |
    Request'ReplayInfo !RequestReplayInfo |
    Request'AvailableMaps !RequestAvailableMaps |
    Request'SaveMap !RequestSaveMap |
    Request'Ping !RequestPing |
    Request'Debug !RequestDebug
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField Request "id" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'id (\ x__ y__ -> x__ {_Request'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Request "maybe'id" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'id (\ x__ y__ -> x__ {_Request'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Request "maybe'request" (Prelude.Maybe Request'Request) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Request "maybe'createGame" (Prelude.Maybe RequestCreateGame) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'CreateGame x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'CreateGame y__))
instance Data.ProtoLens.Field.HasField Request "createGame" RequestCreateGame where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'CreateGame x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'CreateGame y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'joinGame" (Prelude.Maybe RequestJoinGame) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'JoinGame x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'JoinGame y__))
instance Data.ProtoLens.Field.HasField Request "joinGame" RequestJoinGame where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'JoinGame x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'JoinGame y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'restartGame" (Prelude.Maybe RequestRestartGame) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'RestartGame x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'RestartGame y__))
instance Data.ProtoLens.Field.HasField Request "restartGame" RequestRestartGame where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'RestartGame x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'RestartGame y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'startReplay" (Prelude.Maybe RequestStartReplay) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'StartReplay x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'StartReplay y__))
instance Data.ProtoLens.Field.HasField Request "startReplay" RequestStartReplay where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'StartReplay x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'StartReplay y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'leaveGame" (Prelude.Maybe RequestLeaveGame) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'LeaveGame x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'LeaveGame y__))
instance Data.ProtoLens.Field.HasField Request "leaveGame" RequestLeaveGame where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'LeaveGame x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'LeaveGame y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'quickSave" (Prelude.Maybe RequestQuickSave) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'QuickSave x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'QuickSave y__))
instance Data.ProtoLens.Field.HasField Request "quickSave" RequestQuickSave where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'QuickSave x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'QuickSave y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'quickLoad" (Prelude.Maybe RequestQuickLoad) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'QuickLoad x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'QuickLoad y__))
instance Data.ProtoLens.Field.HasField Request "quickLoad" RequestQuickLoad where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'QuickLoad x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'QuickLoad y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'quit" (Prelude.Maybe RequestQuit) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'Quit x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'Quit y__))
instance Data.ProtoLens.Field.HasField Request "quit" RequestQuit where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'Quit x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'Quit y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'gameInfo" (Prelude.Maybe RequestGameInfo) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'GameInfo x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'GameInfo y__))
instance Data.ProtoLens.Field.HasField Request "gameInfo" RequestGameInfo where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'GameInfo x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'GameInfo y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'observation" (Prelude.Maybe RequestObservation) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'Observation x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'Observation y__))
instance Data.ProtoLens.Field.HasField Request "observation" RequestObservation where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'Observation x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'Observation y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'action" (Prelude.Maybe RequestAction) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'Action x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'Action y__))
instance Data.ProtoLens.Field.HasField Request "action" RequestAction where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'Action x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'Action y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'obsAction" (Prelude.Maybe RequestObserverAction) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'ObsAction x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'ObsAction y__))
instance Data.ProtoLens.Field.HasField Request "obsAction" RequestObserverAction where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'ObsAction x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'ObsAction y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'step" (Prelude.Maybe RequestStep) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'Step x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'Step y__))
instance Data.ProtoLens.Field.HasField Request "step" RequestStep where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'Step x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'Step y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'data'" (Prelude.Maybe RequestData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'Data x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'Data y__))
instance Data.ProtoLens.Field.HasField Request "data'" RequestData where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'Data x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'Data y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'query" (Prelude.Maybe Proto.S2clientprotocol.Query.RequestQuery) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'Query x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'Query y__))
instance Data.ProtoLens.Field.HasField Request "query" Proto.S2clientprotocol.Query.RequestQuery where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'Query x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'Query y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'saveReplay" (Prelude.Maybe RequestSaveReplay) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'SaveReplay x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'SaveReplay y__))
instance Data.ProtoLens.Field.HasField Request "saveReplay" RequestSaveReplay where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'SaveReplay x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'SaveReplay y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'mapCommand" (Prelude.Maybe RequestMapCommand) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'MapCommand x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'MapCommand y__))
instance Data.ProtoLens.Field.HasField Request "mapCommand" RequestMapCommand where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'MapCommand x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'MapCommand y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'replayInfo" (Prelude.Maybe RequestReplayInfo) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'ReplayInfo x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'ReplayInfo y__))
instance Data.ProtoLens.Field.HasField Request "replayInfo" RequestReplayInfo where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'ReplayInfo x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'ReplayInfo y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'availableMaps" (Prelude.Maybe RequestAvailableMaps) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'AvailableMaps x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'AvailableMaps y__))
instance Data.ProtoLens.Field.HasField Request "availableMaps" RequestAvailableMaps where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'AvailableMaps x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'AvailableMaps y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'saveMap" (Prelude.Maybe RequestSaveMap) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'SaveMap x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'SaveMap y__))
instance Data.ProtoLens.Field.HasField Request "saveMap" RequestSaveMap where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'SaveMap x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'SaveMap y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'ping" (Prelude.Maybe RequestPing) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'Ping x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'Ping y__))
instance Data.ProtoLens.Field.HasField Request "ping" RequestPing where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'Ping x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'Ping y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Request "maybe'debug" (Prelude.Maybe RequestDebug) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Request'Debug x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Request'Debug y__))
instance Data.ProtoLens.Field.HasField Request "debug" RequestDebug where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Request'request (\ x__ y__ -> x__ {_Request'request = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Request'Debug x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Request'Debug y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Message Request where
  messageName _ = Data.Text.pack "SC2APIProtocol.Request"
  packedMessageDescriptor _
    = "\n\
      \\aRequest\DC2D\n\
      \\vcreate_game\CAN\SOH \SOH(\v2!.SC2APIProtocol.RequestCreateGameH\NULR\n\
      \createGame\DC2>\n\
      \\tjoin_game\CAN\STX \SOH(\v2\US.SC2APIProtocol.RequestJoinGameH\NULR\bjoinGame\DC2G\n\
      \\frestart_game\CAN\ETX \SOH(\v2\".SC2APIProtocol.RequestRestartGameH\NULR\vrestartGame\DC2G\n\
      \\fstart_replay\CAN\EOT \SOH(\v2\".SC2APIProtocol.RequestStartReplayH\NULR\vstartReplay\DC2A\n\
      \\n\
      \leave_game\CAN\ENQ \SOH(\v2 .SC2APIProtocol.RequestLeaveGameH\NULR\tleaveGame\DC2A\n\
      \\n\
      \quick_save\CAN\ACK \SOH(\v2 .SC2APIProtocol.RequestQuickSaveH\NULR\tquickSave\DC2A\n\
      \\n\
      \quick_load\CAN\a \SOH(\v2 .SC2APIProtocol.RequestQuickLoadH\NULR\tquickLoad\DC21\n\
      \\EOTquit\CAN\b \SOH(\v2\ESC.SC2APIProtocol.RequestQuitH\NULR\EOTquit\DC2>\n\
      \\tgame_info\CAN\t \SOH(\v2\US.SC2APIProtocol.RequestGameInfoH\NULR\bgameInfo\DC2F\n\
      \\vobservation\CAN\n\
      \ \SOH(\v2\".SC2APIProtocol.RequestObservationH\NULR\vobservation\DC27\n\
      \\ACKaction\CAN\v \SOH(\v2\GS.SC2APIProtocol.RequestActionH\NULR\ACKaction\DC2F\n\
      \\n\
      \obs_action\CAN\NAK \SOH(\v2%.SC2APIProtocol.RequestObserverActionH\NULR\tobsAction\DC21\n\
      \\EOTstep\CAN\f \SOH(\v2\ESC.SC2APIProtocol.RequestStepH\NULR\EOTstep\DC21\n\
      \\EOTdata\CAN\r \SOH(\v2\ESC.SC2APIProtocol.RequestDataH\NULR\EOTdata\DC24\n\
      \\ENQquery\CAN\SO \SOH(\v2\FS.SC2APIProtocol.RequestQueryH\NULR\ENQquery\DC2D\n\
      \\vsave_replay\CAN\SI \SOH(\v2!.SC2APIProtocol.RequestSaveReplayH\NULR\n\
      \saveReplay\DC2D\n\
      \\vmap_command\CAN\SYN \SOH(\v2!.SC2APIProtocol.RequestMapCommandH\NULR\n\
      \mapCommand\DC2D\n\
      \\vreplay_info\CAN\DLE \SOH(\v2!.SC2APIProtocol.RequestReplayInfoH\NULR\n\
      \replayInfo\DC2M\n\
      \\SOavailable_maps\CAN\DC1 \SOH(\v2$.SC2APIProtocol.RequestAvailableMapsH\NULR\ravailableMaps\DC2;\n\
      \\bsave_map\CAN\DC2 \SOH(\v2\RS.SC2APIProtocol.RequestSaveMapH\NULR\asaveMap\DC21\n\
      \\EOTping\CAN\DC3 \SOH(\v2\ESC.SC2APIProtocol.RequestPingH\NULR\EOTping\DC24\n\
      \\ENQdebug\CAN\DC4 \SOH(\v2\FS.SC2APIProtocol.RequestDebugH\NULR\ENQdebug\DC2\SO\n\
      \\STXid\CANa \SOH(\rR\STXidB\t\n\
      \\arequest"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor Request
        createGame__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "create_game"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestCreateGame)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'createGame")) ::
              Data.ProtoLens.FieldDescriptor Request
        joinGame__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "join_game"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestJoinGame)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'joinGame")) ::
              Data.ProtoLens.FieldDescriptor Request
        restartGame__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "restart_game"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestRestartGame)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'restartGame")) ::
              Data.ProtoLens.FieldDescriptor Request
        startReplay__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start_replay"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestStartReplay)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'startReplay")) ::
              Data.ProtoLens.FieldDescriptor Request
        leaveGame__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "leave_game"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestLeaveGame)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'leaveGame")) ::
              Data.ProtoLens.FieldDescriptor Request
        quickSave__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "quick_save"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestQuickSave)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'quickSave")) ::
              Data.ProtoLens.FieldDescriptor Request
        quickLoad__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "quick_load"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestQuickLoad)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'quickLoad")) ::
              Data.ProtoLens.FieldDescriptor Request
        quit__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "quit"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestQuit)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'quit")) ::
              Data.ProtoLens.FieldDescriptor Request
        gameInfo__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "game_info"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestGameInfo)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gameInfo")) ::
              Data.ProtoLens.FieldDescriptor Request
        observation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "observation"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestObservation)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'observation")) ::
              Data.ProtoLens.FieldDescriptor Request
        action__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "action"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestAction)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'action")) ::
              Data.ProtoLens.FieldDescriptor Request
        obsAction__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obs_action"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestObserverAction)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsAction")) ::
              Data.ProtoLens.FieldDescriptor Request
        step__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "step"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestStep)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'step")) ::
              Data.ProtoLens.FieldDescriptor Request
        data'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "data"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestData)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'data'")) ::
              Data.ProtoLens.FieldDescriptor Request
        query__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "query"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Query.RequestQuery)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'query")) ::
              Data.ProtoLens.FieldDescriptor Request
        saveReplay__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "save_replay"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestSaveReplay)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'saveReplay")) ::
              Data.ProtoLens.FieldDescriptor Request
        mapCommand__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_command"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestMapCommand)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapCommand")) ::
              Data.ProtoLens.FieldDescriptor Request
        replayInfo__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replay_info"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestReplayInfo)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'replayInfo")) ::
              Data.ProtoLens.FieldDescriptor Request
        availableMaps__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "available_maps"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestAvailableMaps)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'availableMaps")) ::
              Data.ProtoLens.FieldDescriptor Request
        saveMap__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "save_map"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestSaveMap)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'saveMap")) ::
              Data.ProtoLens.FieldDescriptor Request
        ping__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ping"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestPing)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ping")) ::
              Data.ProtoLens.FieldDescriptor Request
        debug__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "debug"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RequestDebug)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'debug")) ::
              Data.ProtoLens.FieldDescriptor Request
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 97, id__field_descriptor),
           (Data.ProtoLens.Tag 1, createGame__field_descriptor),
           (Data.ProtoLens.Tag 2, joinGame__field_descriptor),
           (Data.ProtoLens.Tag 3, restartGame__field_descriptor),
           (Data.ProtoLens.Tag 4, startReplay__field_descriptor),
           (Data.ProtoLens.Tag 5, leaveGame__field_descriptor),
           (Data.ProtoLens.Tag 6, quickSave__field_descriptor),
           (Data.ProtoLens.Tag 7, quickLoad__field_descriptor),
           (Data.ProtoLens.Tag 8, quit__field_descriptor),
           (Data.ProtoLens.Tag 9, gameInfo__field_descriptor),
           (Data.ProtoLens.Tag 10, observation__field_descriptor),
           (Data.ProtoLens.Tag 11, action__field_descriptor),
           (Data.ProtoLens.Tag 21, obsAction__field_descriptor),
           (Data.ProtoLens.Tag 12, step__field_descriptor),
           (Data.ProtoLens.Tag 13, data'__field_descriptor),
           (Data.ProtoLens.Tag 14, query__field_descriptor),
           (Data.ProtoLens.Tag 15, saveReplay__field_descriptor),
           (Data.ProtoLens.Tag 22, mapCommand__field_descriptor),
           (Data.ProtoLens.Tag 16, replayInfo__field_descriptor),
           (Data.ProtoLens.Tag 17, availableMaps__field_descriptor),
           (Data.ProtoLens.Tag 18, saveMap__field_descriptor),
           (Data.ProtoLens.Tag 19, ping__field_descriptor),
           (Data.ProtoLens.Tag 20, debug__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Request'_unknownFields
        (\ x__ y__ -> x__ {_Request'_unknownFields = y__})
  defMessage
    = Request'_constructor
        {_Request'id = Prelude.Nothing, _Request'request = Prelude.Nothing,
         _Request'_unknownFields = []}
  parseMessage
    = let
        loop :: Request -> Data.ProtoLens.Encoding.Bytes.Parser Request
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        776
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "create_game"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"createGame") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "join_game"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"joinGame") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "restart_game"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"restartGame") y x)
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "start_replay"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"startReplay") y x)
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "leave_game"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"leaveGame") y x)
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "quick_save"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"quickSave") y x)
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "quick_load"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"quickLoad") y x)
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "quit"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"quit") y x)
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "game_info"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"gameInfo") y x)
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "observation"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"observation") y x)
                        90
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "action"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"action") y x)
                        170
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "obs_action"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"obsAction") y x)
                        98
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "step"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"step") y x)
                        106
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "data"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"data'") y x)
                        114
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "query"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"query") y x)
                        122
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "save_replay"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"saveReplay") y x)
                        178
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "map_command"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"mapCommand") y x)
                        130
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "replay_info"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"replayInfo") y x)
                        138
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "available_maps"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"availableMaps") y x)
                        146
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "save_map"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"saveMap") y x)
                        154
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "ping"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"ping") y x)
                        162
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "debug"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"debug") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Request"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 776)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'request") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just (Request'CreateGame v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'JoinGame v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'RestartGame v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'StartReplay v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'LeaveGame v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'QuickSave v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'QuickLoad v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'Quit v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'GameInfo v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'Observation v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'Action v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 90)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'ObsAction v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 170)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'Step v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 98)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'Data v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 106)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'Query v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 114)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'SaveReplay v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 122)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'MapCommand v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 178)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'ReplayInfo v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 130)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'AvailableMaps v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 138)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'SaveMap v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 146)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'Ping v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 154)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v)
                   (Prelude.Just (Request'Debug v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 162)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData Request where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Request'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Request'id x__)
                (Control.DeepSeq.deepseq (_Request'request x__) ()))
instance Control.DeepSeq.NFData Request'Request where
  rnf (Request'CreateGame x__) = Control.DeepSeq.rnf x__
  rnf (Request'JoinGame x__) = Control.DeepSeq.rnf x__
  rnf (Request'RestartGame x__) = Control.DeepSeq.rnf x__
  rnf (Request'StartReplay x__) = Control.DeepSeq.rnf x__
  rnf (Request'LeaveGame x__) = Control.DeepSeq.rnf x__
  rnf (Request'QuickSave x__) = Control.DeepSeq.rnf x__
  rnf (Request'QuickLoad x__) = Control.DeepSeq.rnf x__
  rnf (Request'Quit x__) = Control.DeepSeq.rnf x__
  rnf (Request'GameInfo x__) = Control.DeepSeq.rnf x__
  rnf (Request'Observation x__) = Control.DeepSeq.rnf x__
  rnf (Request'Action x__) = Control.DeepSeq.rnf x__
  rnf (Request'ObsAction x__) = Control.DeepSeq.rnf x__
  rnf (Request'Step x__) = Control.DeepSeq.rnf x__
  rnf (Request'Data x__) = Control.DeepSeq.rnf x__
  rnf (Request'Query x__) = Control.DeepSeq.rnf x__
  rnf (Request'SaveReplay x__) = Control.DeepSeq.rnf x__
  rnf (Request'MapCommand x__) = Control.DeepSeq.rnf x__
  rnf (Request'ReplayInfo x__) = Control.DeepSeq.rnf x__
  rnf (Request'AvailableMaps x__) = Control.DeepSeq.rnf x__
  rnf (Request'SaveMap x__) = Control.DeepSeq.rnf x__
  rnf (Request'Ping x__) = Control.DeepSeq.rnf x__
  rnf (Request'Debug x__) = Control.DeepSeq.rnf x__
_Request'CreateGame ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestCreateGame
_Request'CreateGame
  = Data.ProtoLens.Prism.prism'
      Request'CreateGame
      (\ p__
         -> case p__ of
              (Request'CreateGame p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'JoinGame ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestJoinGame
_Request'JoinGame
  = Data.ProtoLens.Prism.prism'
      Request'JoinGame
      (\ p__
         -> case p__ of
              (Request'JoinGame p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'RestartGame ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestRestartGame
_Request'RestartGame
  = Data.ProtoLens.Prism.prism'
      Request'RestartGame
      (\ p__
         -> case p__ of
              (Request'RestartGame p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'StartReplay ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestStartReplay
_Request'StartReplay
  = Data.ProtoLens.Prism.prism'
      Request'StartReplay
      (\ p__
         -> case p__ of
              (Request'StartReplay p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'LeaveGame ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestLeaveGame
_Request'LeaveGame
  = Data.ProtoLens.Prism.prism'
      Request'LeaveGame
      (\ p__
         -> case p__ of
              (Request'LeaveGame p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'QuickSave ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestQuickSave
_Request'QuickSave
  = Data.ProtoLens.Prism.prism'
      Request'QuickSave
      (\ p__
         -> case p__ of
              (Request'QuickSave p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'QuickLoad ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestQuickLoad
_Request'QuickLoad
  = Data.ProtoLens.Prism.prism'
      Request'QuickLoad
      (\ p__
         -> case p__ of
              (Request'QuickLoad p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'Quit ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestQuit
_Request'Quit
  = Data.ProtoLens.Prism.prism'
      Request'Quit
      (\ p__
         -> case p__ of
              (Request'Quit p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'GameInfo ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestGameInfo
_Request'GameInfo
  = Data.ProtoLens.Prism.prism'
      Request'GameInfo
      (\ p__
         -> case p__ of
              (Request'GameInfo p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'Observation ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestObservation
_Request'Observation
  = Data.ProtoLens.Prism.prism'
      Request'Observation
      (\ p__
         -> case p__ of
              (Request'Observation p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'Action ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestAction
_Request'Action
  = Data.ProtoLens.Prism.prism'
      Request'Action
      (\ p__
         -> case p__ of
              (Request'Action p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'ObsAction ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestObserverAction
_Request'ObsAction
  = Data.ProtoLens.Prism.prism'
      Request'ObsAction
      (\ p__
         -> case p__ of
              (Request'ObsAction p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'Step ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestStep
_Request'Step
  = Data.ProtoLens.Prism.prism'
      Request'Step
      (\ p__
         -> case p__ of
              (Request'Step p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'Data ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestData
_Request'Data
  = Data.ProtoLens.Prism.prism'
      Request'Data
      (\ p__
         -> case p__ of
              (Request'Data p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'Query ::
  Data.ProtoLens.Prism.Prism' Request'Request Proto.S2clientprotocol.Query.RequestQuery
_Request'Query
  = Data.ProtoLens.Prism.prism'
      Request'Query
      (\ p__
         -> case p__ of
              (Request'Query p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'SaveReplay ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestSaveReplay
_Request'SaveReplay
  = Data.ProtoLens.Prism.prism'
      Request'SaveReplay
      (\ p__
         -> case p__ of
              (Request'SaveReplay p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'MapCommand ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestMapCommand
_Request'MapCommand
  = Data.ProtoLens.Prism.prism'
      Request'MapCommand
      (\ p__
         -> case p__ of
              (Request'MapCommand p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'ReplayInfo ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestReplayInfo
_Request'ReplayInfo
  = Data.ProtoLens.Prism.prism'
      Request'ReplayInfo
      (\ p__
         -> case p__ of
              (Request'ReplayInfo p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'AvailableMaps ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestAvailableMaps
_Request'AvailableMaps
  = Data.ProtoLens.Prism.prism'
      Request'AvailableMaps
      (\ p__
         -> case p__ of
              (Request'AvailableMaps p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'SaveMap ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestSaveMap
_Request'SaveMap
  = Data.ProtoLens.Prism.prism'
      Request'SaveMap
      (\ p__
         -> case p__ of
              (Request'SaveMap p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'Ping ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestPing
_Request'Ping
  = Data.ProtoLens.Prism.prism'
      Request'Ping
      (\ p__
         -> case p__ of
              (Request'Ping p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Request'Debug ::
  Data.ProtoLens.Prism.Prism' Request'Request RequestDebug
_Request'Debug
  = Data.ProtoLens.Prism.prism'
      Request'Debug
      (\ p__
         -> case p__ of
              (Request'Debug p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.actions' @:: Lens' RequestAction [Action]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'actions' @:: Lens' RequestAction (Data.Vector.Vector Action)@ -}
data RequestAction
  = RequestAction'_constructor {_RequestAction'actions :: !(Data.Vector.Vector Action),
                                _RequestAction'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestAction where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RequestAction "actions" [Action] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestAction'actions
           (\ x__ y__ -> x__ {_RequestAction'actions = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RequestAction "vec'actions" (Data.Vector.Vector Action) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestAction'actions
           (\ x__ y__ -> x__ {_RequestAction'actions = y__}))
        Prelude.id
instance Data.ProtoLens.Message RequestAction where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestAction"
  packedMessageDescriptor _
    = "\n\
      \\rRequestAction\DC20\n\
      \\aactions\CAN\SOH \ETX(\v2\SYN.SC2APIProtocol.ActionR\aactions"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        actions__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "actions"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Action)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"actions")) ::
              Data.ProtoLens.FieldDescriptor RequestAction
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, actions__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestAction'_unknownFields
        (\ x__ y__ -> x__ {_RequestAction'_unknownFields = y__})
  defMessage
    = RequestAction'_constructor
        {_RequestAction'actions = Data.Vector.Generic.empty,
         _RequestAction'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestAction
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Action
             -> Data.ProtoLens.Encoding.Bytes.Parser RequestAction
        loop x mutable'actions
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'actions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'actions)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'actions") frozen'actions x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "actions"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'actions y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'actions
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'actions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'actions)
          "RequestAction"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'actions") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RequestAction where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestAction'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RequestAction'actions x__) ())
{- | Fields :
      -}
data RequestAvailableMaps
  = RequestAvailableMaps'_constructor {_RequestAvailableMaps'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestAvailableMaps where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RequestAvailableMaps where
  messageName _
    = Data.Text.pack "SC2APIProtocol.RequestAvailableMaps"
  packedMessageDescriptor _
    = "\n\
      \\DC4RequestAvailableMaps"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestAvailableMaps'_unknownFields
        (\ x__ y__ -> x__ {_RequestAvailableMaps'_unknownFields = y__})
  defMessage
    = RequestAvailableMaps'_constructor
        {_RequestAvailableMaps'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestAvailableMaps
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestAvailableMaps
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestAvailableMaps"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RequestAvailableMaps where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestAvailableMaps'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerSetup' @:: Lens' RequestCreateGame [PlayerSetup]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'playerSetup' @:: Lens' RequestCreateGame (Data.Vector.Vector PlayerSetup)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.disableFog' @:: Lens' RequestCreateGame Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'disableFog' @:: Lens' RequestCreateGame (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.randomSeed' @:: Lens' RequestCreateGame Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'randomSeed' @:: Lens' RequestCreateGame (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.realtime' @:: Lens' RequestCreateGame Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'realtime' @:: Lens' RequestCreateGame (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'map' @:: Lens' RequestCreateGame (Prelude.Maybe RequestCreateGame'Map)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'localMap' @:: Lens' RequestCreateGame (Prelude.Maybe LocalMap)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.localMap' @:: Lens' RequestCreateGame LocalMap@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'battlenetMapName' @:: Lens' RequestCreateGame (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.battlenetMapName' @:: Lens' RequestCreateGame Data.Text.Text@ -}
data RequestCreateGame
  = RequestCreateGame'_constructor {_RequestCreateGame'playerSetup :: !(Data.Vector.Vector PlayerSetup),
                                    _RequestCreateGame'disableFog :: !(Prelude.Maybe Prelude.Bool),
                                    _RequestCreateGame'randomSeed :: !(Prelude.Maybe Data.Word.Word32),
                                    _RequestCreateGame'realtime :: !(Prelude.Maybe Prelude.Bool),
                                    _RequestCreateGame'map :: !(Prelude.Maybe RequestCreateGame'Map),
                                    _RequestCreateGame'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestCreateGame where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
data RequestCreateGame'Map
  = RequestCreateGame'LocalMap !LocalMap |
    RequestCreateGame'BattlenetMapName !Data.Text.Text
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField RequestCreateGame "playerSetup" [PlayerSetup] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'playerSetup
           (\ x__ y__ -> x__ {_RequestCreateGame'playerSetup = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RequestCreateGame "vec'playerSetup" (Data.Vector.Vector PlayerSetup) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'playerSetup
           (\ x__ y__ -> x__ {_RequestCreateGame'playerSetup = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestCreateGame "disableFog" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'disableFog
           (\ x__ y__ -> x__ {_RequestCreateGame'disableFog = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestCreateGame "maybe'disableFog" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'disableFog
           (\ x__ y__ -> x__ {_RequestCreateGame'disableFog = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestCreateGame "randomSeed" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'randomSeed
           (\ x__ y__ -> x__ {_RequestCreateGame'randomSeed = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestCreateGame "maybe'randomSeed" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'randomSeed
           (\ x__ y__ -> x__ {_RequestCreateGame'randomSeed = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestCreateGame "realtime" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'realtime
           (\ x__ y__ -> x__ {_RequestCreateGame'realtime = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestCreateGame "maybe'realtime" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'realtime
           (\ x__ y__ -> x__ {_RequestCreateGame'realtime = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestCreateGame "maybe'map" (Prelude.Maybe RequestCreateGame'Map) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'map
           (\ x__ y__ -> x__ {_RequestCreateGame'map = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestCreateGame "maybe'localMap" (Prelude.Maybe LocalMap) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'map
           (\ x__ y__ -> x__ {_RequestCreateGame'map = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (RequestCreateGame'LocalMap x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap RequestCreateGame'LocalMap y__))
instance Data.ProtoLens.Field.HasField RequestCreateGame "localMap" LocalMap where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'map
           (\ x__ y__ -> x__ {_RequestCreateGame'map = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (RequestCreateGame'LocalMap x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap RequestCreateGame'LocalMap y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField RequestCreateGame "maybe'battlenetMapName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'map
           (\ x__ y__ -> x__ {_RequestCreateGame'map = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (RequestCreateGame'BattlenetMapName x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap RequestCreateGame'BattlenetMapName y__))
instance Data.ProtoLens.Field.HasField RequestCreateGame "battlenetMapName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestCreateGame'map
           (\ x__ y__ -> x__ {_RequestCreateGame'map = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (RequestCreateGame'BattlenetMapName x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap RequestCreateGame'BattlenetMapName y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault))
instance Data.ProtoLens.Message RequestCreateGame where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestCreateGame"
  packedMessageDescriptor _
    = "\n\
      \\DC1RequestCreateGame\DC27\n\
      \\tlocal_map\CAN\SOH \SOH(\v2\CAN.SC2APIProtocol.LocalMapH\NULR\blocalMap\DC2.\n\
      \\DC2battlenet_map_name\CAN\STX \SOH(\tH\NULR\DLEbattlenetMapName\DC2>\n\
      \\fplayer_setup\CAN\ETX \ETX(\v2\ESC.SC2APIProtocol.PlayerSetupR\vplayerSetup\DC2\US\n\
      \\vdisable_fog\CAN\EOT \SOH(\bR\n\
      \disableFog\DC2\US\n\
      \\vrandom_seed\CAN\ENQ \SOH(\rR\n\
      \randomSeed\DC2\SUB\n\
      \\brealtime\CAN\ACK \SOH(\bR\brealtimeB\ENQ\n\
      \\ETXMap"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        playerSetup__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_setup"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor PlayerSetup)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"playerSetup")) ::
              Data.ProtoLens.FieldDescriptor RequestCreateGame
        disableFog__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "disable_fog"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'disableFog")) ::
              Data.ProtoLens.FieldDescriptor RequestCreateGame
        randomSeed__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "random_seed"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'randomSeed")) ::
              Data.ProtoLens.FieldDescriptor RequestCreateGame
        realtime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "realtime"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'realtime")) ::
              Data.ProtoLens.FieldDescriptor RequestCreateGame
        localMap__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "local_map"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor LocalMap)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'localMap")) ::
              Data.ProtoLens.FieldDescriptor RequestCreateGame
        battlenetMapName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "battlenet_map_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'battlenetMapName")) ::
              Data.ProtoLens.FieldDescriptor RequestCreateGame
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 3, playerSetup__field_descriptor),
           (Data.ProtoLens.Tag 4, disableFog__field_descriptor),
           (Data.ProtoLens.Tag 5, randomSeed__field_descriptor),
           (Data.ProtoLens.Tag 6, realtime__field_descriptor),
           (Data.ProtoLens.Tag 1, localMap__field_descriptor),
           (Data.ProtoLens.Tag 2, battlenetMapName__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestCreateGame'_unknownFields
        (\ x__ y__ -> x__ {_RequestCreateGame'_unknownFields = y__})
  defMessage
    = RequestCreateGame'_constructor
        {_RequestCreateGame'playerSetup = Data.Vector.Generic.empty,
         _RequestCreateGame'disableFog = Prelude.Nothing,
         _RequestCreateGame'randomSeed = Prelude.Nothing,
         _RequestCreateGame'realtime = Prelude.Nothing,
         _RequestCreateGame'map = Prelude.Nothing,
         _RequestCreateGame'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestCreateGame
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld PlayerSetup
             -> Data.ProtoLens.Encoding.Bytes.Parser RequestCreateGame
        loop x mutable'playerSetup
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'playerSetup <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'playerSetup)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'playerSetup") frozen'playerSetup
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "player_setup"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'playerSetup y)
                                loop x v
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "disable_fog"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"disableFog") y x)
                                  mutable'playerSetup
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "random_seed"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"randomSeed") y x)
                                  mutable'playerSetup
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "realtime"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"realtime") y x)
                                  mutable'playerSetup
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "local_map"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"localMap") y x)
                                  mutable'playerSetup
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "battlenet_map_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"battlenetMapName") y x)
                                  mutable'playerSetup
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'playerSetup
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'playerSetup <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'playerSetup)
          "RequestCreateGame"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'playerSetup") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'disableFog") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'randomSeed") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'realtime") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0) _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'map") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just (RequestCreateGame'LocalMap v))
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.ProtoLens.encodeMessage v)
                            (Prelude.Just (RequestCreateGame'BattlenetMapName v))
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData RequestCreateGame where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestCreateGame'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RequestCreateGame'playerSetup x__)
                (Control.DeepSeq.deepseq
                   (_RequestCreateGame'disableFog x__)
                   (Control.DeepSeq.deepseq
                      (_RequestCreateGame'randomSeed x__)
                      (Control.DeepSeq.deepseq
                         (_RequestCreateGame'realtime x__)
                         (Control.DeepSeq.deepseq (_RequestCreateGame'map x__) ())))))
instance Control.DeepSeq.NFData RequestCreateGame'Map where
  rnf (RequestCreateGame'LocalMap x__) = Control.DeepSeq.rnf x__
  rnf (RequestCreateGame'BattlenetMapName x__)
    = Control.DeepSeq.rnf x__
_RequestCreateGame'LocalMap ::
  Data.ProtoLens.Prism.Prism' RequestCreateGame'Map LocalMap
_RequestCreateGame'LocalMap
  = Data.ProtoLens.Prism.prism'
      RequestCreateGame'LocalMap
      (\ p__
         -> case p__ of
              (RequestCreateGame'LocalMap p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_RequestCreateGame'BattlenetMapName ::
  Data.ProtoLens.Prism.Prism' RequestCreateGame'Map Data.Text.Text
_RequestCreateGame'BattlenetMapName
  = Data.ProtoLens.Prism.prism'
      RequestCreateGame'BattlenetMapName
      (\ p__
         -> case p__ of
              (RequestCreateGame'BattlenetMapName p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.abilityId' @:: Lens' RequestData Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'abilityId' @:: Lens' RequestData (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.unitTypeId' @:: Lens' RequestData Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'unitTypeId' @:: Lens' RequestData (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.upgradeId' @:: Lens' RequestData Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'upgradeId' @:: Lens' RequestData (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.buffId' @:: Lens' RequestData Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'buffId' @:: Lens' RequestData (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.effectId' @:: Lens' RequestData Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'effectId' @:: Lens' RequestData (Prelude.Maybe Prelude.Bool)@ -}
data RequestData
  = RequestData'_constructor {_RequestData'abilityId :: !(Prelude.Maybe Prelude.Bool),
                              _RequestData'unitTypeId :: !(Prelude.Maybe Prelude.Bool),
                              _RequestData'upgradeId :: !(Prelude.Maybe Prelude.Bool),
                              _RequestData'buffId :: !(Prelude.Maybe Prelude.Bool),
                              _RequestData'effectId :: !(Prelude.Maybe Prelude.Bool),
                              _RequestData'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestData where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RequestData "abilityId" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestData'abilityId
           (\ x__ y__ -> x__ {_RequestData'abilityId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestData "maybe'abilityId" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestData'abilityId
           (\ x__ y__ -> x__ {_RequestData'abilityId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestData "unitTypeId" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestData'unitTypeId
           (\ x__ y__ -> x__ {_RequestData'unitTypeId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestData "maybe'unitTypeId" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestData'unitTypeId
           (\ x__ y__ -> x__ {_RequestData'unitTypeId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestData "upgradeId" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestData'upgradeId
           (\ x__ y__ -> x__ {_RequestData'upgradeId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestData "maybe'upgradeId" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestData'upgradeId
           (\ x__ y__ -> x__ {_RequestData'upgradeId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestData "buffId" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestData'buffId (\ x__ y__ -> x__ {_RequestData'buffId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestData "maybe'buffId" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestData'buffId (\ x__ y__ -> x__ {_RequestData'buffId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestData "effectId" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestData'effectId
           (\ x__ y__ -> x__ {_RequestData'effectId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestData "maybe'effectId" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestData'effectId
           (\ x__ y__ -> x__ {_RequestData'effectId = y__}))
        Prelude.id
instance Data.ProtoLens.Message RequestData where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestData"
  packedMessageDescriptor _
    = "\n\
      \\vRequestData\DC2\GS\n\
      \\n\
      \ability_id\CAN\SOH \SOH(\bR\tabilityId\DC2 \n\
      \\funit_type_id\CAN\STX \SOH(\bR\n\
      \unitTypeId\DC2\GS\n\
      \\n\
      \upgrade_id\CAN\ETX \SOH(\bR\tupgradeId\DC2\ETB\n\
      \\abuff_id\CAN\EOT \SOH(\bR\ACKbuffId\DC2\ESC\n\
      \\teffect_id\CAN\ENQ \SOH(\bR\beffectId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        abilityId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ability_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'abilityId")) ::
              Data.ProtoLens.FieldDescriptor RequestData
        unitTypeId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "unit_type_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'unitTypeId")) ::
              Data.ProtoLens.FieldDescriptor RequestData
        upgradeId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "upgrade_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'upgradeId")) ::
              Data.ProtoLens.FieldDescriptor RequestData
        buffId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "buff_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'buffId")) ::
              Data.ProtoLens.FieldDescriptor RequestData
        effectId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "effect_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'effectId")) ::
              Data.ProtoLens.FieldDescriptor RequestData
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, abilityId__field_descriptor),
           (Data.ProtoLens.Tag 2, unitTypeId__field_descriptor),
           (Data.ProtoLens.Tag 3, upgradeId__field_descriptor),
           (Data.ProtoLens.Tag 4, buffId__field_descriptor),
           (Data.ProtoLens.Tag 5, effectId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestData'_unknownFields
        (\ x__ y__ -> x__ {_RequestData'_unknownFields = y__})
  defMessage
    = RequestData'_constructor
        {_RequestData'abilityId = Prelude.Nothing,
         _RequestData'unitTypeId = Prelude.Nothing,
         _RequestData'upgradeId = Prelude.Nothing,
         _RequestData'buffId = Prelude.Nothing,
         _RequestData'effectId = Prelude.Nothing,
         _RequestData'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestData -> Data.ProtoLens.Encoding.Bytes.Parser RequestData
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ability_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"abilityId") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "unit_type_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"unitTypeId") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "upgrade_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"upgradeId") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "buff_id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"buffId") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "effect_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"effectId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestData"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'abilityId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'unitTypeId") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'upgradeId") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'buffId") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0) _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'effectId") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0) _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData RequestData where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestData'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RequestData'abilityId x__)
                (Control.DeepSeq.deepseq
                   (_RequestData'unitTypeId x__)
                   (Control.DeepSeq.deepseq
                      (_RequestData'upgradeId x__)
                      (Control.DeepSeq.deepseq
                         (_RequestData'buffId x__)
                         (Control.DeepSeq.deepseq (_RequestData'effectId x__) ())))))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.debug' @:: Lens' RequestDebug [Proto.S2clientprotocol.Debug.DebugCommand]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'debug' @:: Lens' RequestDebug (Data.Vector.Vector Proto.S2clientprotocol.Debug.DebugCommand)@ -}
data RequestDebug
  = RequestDebug'_constructor {_RequestDebug'debug :: !(Data.Vector.Vector Proto.S2clientprotocol.Debug.DebugCommand),
                               _RequestDebug'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestDebug where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RequestDebug "debug" [Proto.S2clientprotocol.Debug.DebugCommand] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestDebug'debug (\ x__ y__ -> x__ {_RequestDebug'debug = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RequestDebug "vec'debug" (Data.Vector.Vector Proto.S2clientprotocol.Debug.DebugCommand) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestDebug'debug (\ x__ y__ -> x__ {_RequestDebug'debug = y__}))
        Prelude.id
instance Data.ProtoLens.Message RequestDebug where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestDebug"
  packedMessageDescriptor _
    = "\n\
      \\fRequestDebug\DC22\n\
      \\ENQdebug\CAN\SOH \ETX(\v2\FS.SC2APIProtocol.DebugCommandR\ENQdebug"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        debug__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "debug"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Debug.DebugCommand)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"debug")) ::
              Data.ProtoLens.FieldDescriptor RequestDebug
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, debug__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestDebug'_unknownFields
        (\ x__ y__ -> x__ {_RequestDebug'_unknownFields = y__})
  defMessage
    = RequestDebug'_constructor
        {_RequestDebug'debug = Data.Vector.Generic.empty,
         _RequestDebug'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestDebug
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Proto.S2clientprotocol.Debug.DebugCommand
             -> Data.ProtoLens.Encoding.Bytes.Parser RequestDebug
        loop x mutable'debug
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'debug <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'debug)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'debug") frozen'debug x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "debug"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'debug y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'debug
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'debug <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'debug)
          "RequestDebug"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'debug") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RequestDebug where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestDebug'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RequestDebug'debug x__) ())
{- | Fields :
      -}
data RequestGameInfo
  = RequestGameInfo'_constructor {_RequestGameInfo'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestGameInfo where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RequestGameInfo where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestGameInfo"
  packedMessageDescriptor _
    = "\n\
      \\SIRequestGameInfo"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestGameInfo'_unknownFields
        (\ x__ y__ -> x__ {_RequestGameInfo'_unknownFields = y__})
  defMessage
    = RequestGameInfo'_constructor
        {_RequestGameInfo'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestGameInfo
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestGameInfo
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestGameInfo"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RequestGameInfo where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_RequestGameInfo'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.options' @:: Lens' RequestJoinGame InterfaceOptions@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'options' @:: Lens' RequestJoinGame (Prelude.Maybe InterfaceOptions)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.serverPorts' @:: Lens' RequestJoinGame PortSet@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'serverPorts' @:: Lens' RequestJoinGame (Prelude.Maybe PortSet)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.clientPorts' @:: Lens' RequestJoinGame [PortSet]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'clientPorts' @:: Lens' RequestJoinGame (Data.Vector.Vector PortSet)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.sharedPort' @:: Lens' RequestJoinGame Data.Int.Int32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'sharedPort' @:: Lens' RequestJoinGame (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerName' @:: Lens' RequestJoinGame Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerName' @:: Lens' RequestJoinGame (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.hostIp' @:: Lens' RequestJoinGame Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'hostIp' @:: Lens' RequestJoinGame (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'participation' @:: Lens' RequestJoinGame (Prelude.Maybe RequestJoinGame'Participation)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'race' @:: Lens' RequestJoinGame (Prelude.Maybe Proto.S2clientprotocol.Common.Race)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.race' @:: Lens' RequestJoinGame Proto.S2clientprotocol.Common.Race@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'observedPlayerId' @:: Lens' RequestJoinGame (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.observedPlayerId' @:: Lens' RequestJoinGame Data.Word.Word32@ -}
data RequestJoinGame
  = RequestJoinGame'_constructor {_RequestJoinGame'options :: !(Prelude.Maybe InterfaceOptions),
                                  _RequestJoinGame'serverPorts :: !(Prelude.Maybe PortSet),
                                  _RequestJoinGame'clientPorts :: !(Data.Vector.Vector PortSet),
                                  _RequestJoinGame'sharedPort :: !(Prelude.Maybe Data.Int.Int32),
                                  _RequestJoinGame'playerName :: !(Prelude.Maybe Data.Text.Text),
                                  _RequestJoinGame'hostIp :: !(Prelude.Maybe Data.Text.Text),
                                  _RequestJoinGame'participation :: !(Prelude.Maybe RequestJoinGame'Participation),
                                  _RequestJoinGame'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestJoinGame where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
data RequestJoinGame'Participation
  = RequestJoinGame'Race !Proto.S2clientprotocol.Common.Race |
    RequestJoinGame'ObservedPlayerId !Data.Word.Word32
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField RequestJoinGame "options" InterfaceOptions where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'options
           (\ x__ y__ -> x__ {_RequestJoinGame'options = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField RequestJoinGame "maybe'options" (Prelude.Maybe InterfaceOptions) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'options
           (\ x__ y__ -> x__ {_RequestJoinGame'options = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestJoinGame "serverPorts" PortSet where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'serverPorts
           (\ x__ y__ -> x__ {_RequestJoinGame'serverPorts = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField RequestJoinGame "maybe'serverPorts" (Prelude.Maybe PortSet) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'serverPorts
           (\ x__ y__ -> x__ {_RequestJoinGame'serverPorts = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestJoinGame "clientPorts" [PortSet] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'clientPorts
           (\ x__ y__ -> x__ {_RequestJoinGame'clientPorts = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RequestJoinGame "vec'clientPorts" (Data.Vector.Vector PortSet) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'clientPorts
           (\ x__ y__ -> x__ {_RequestJoinGame'clientPorts = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestJoinGame "sharedPort" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'sharedPort
           (\ x__ y__ -> x__ {_RequestJoinGame'sharedPort = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestJoinGame "maybe'sharedPort" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'sharedPort
           (\ x__ y__ -> x__ {_RequestJoinGame'sharedPort = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestJoinGame "playerName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'playerName
           (\ x__ y__ -> x__ {_RequestJoinGame'playerName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestJoinGame "maybe'playerName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'playerName
           (\ x__ y__ -> x__ {_RequestJoinGame'playerName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestJoinGame "hostIp" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'hostIp
           (\ x__ y__ -> x__ {_RequestJoinGame'hostIp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestJoinGame "maybe'hostIp" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'hostIp
           (\ x__ y__ -> x__ {_RequestJoinGame'hostIp = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestJoinGame "maybe'participation" (Prelude.Maybe RequestJoinGame'Participation) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'participation
           (\ x__ y__ -> x__ {_RequestJoinGame'participation = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestJoinGame "maybe'race" (Prelude.Maybe Proto.S2clientprotocol.Common.Race) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'participation
           (\ x__ y__ -> x__ {_RequestJoinGame'participation = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (RequestJoinGame'Race x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap RequestJoinGame'Race y__))
instance Data.ProtoLens.Field.HasField RequestJoinGame "race" Proto.S2clientprotocol.Common.Race where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'participation
           (\ x__ y__ -> x__ {_RequestJoinGame'participation = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (RequestJoinGame'Race x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap RequestJoinGame'Race y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault))
instance Data.ProtoLens.Field.HasField RequestJoinGame "maybe'observedPlayerId" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'participation
           (\ x__ y__ -> x__ {_RequestJoinGame'participation = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (RequestJoinGame'ObservedPlayerId x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap RequestJoinGame'ObservedPlayerId y__))
instance Data.ProtoLens.Field.HasField RequestJoinGame "observedPlayerId" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestJoinGame'participation
           (\ x__ y__ -> x__ {_RequestJoinGame'participation = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (RequestJoinGame'ObservedPlayerId x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap RequestJoinGame'ObservedPlayerId y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault))
instance Data.ProtoLens.Message RequestJoinGame where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestJoinGame"
  packedMessageDescriptor _
    = "\n\
      \\SIRequestJoinGame\DC2*\n\
      \\EOTrace\CAN\SOH \SOH(\SO2\DC4.SC2APIProtocol.RaceH\NULR\EOTrace\DC2.\n\
      \\DC2observed_player_id\CAN\STX \SOH(\rH\NULR\DLEobservedPlayerId\DC2:\n\
      \\aoptions\CAN\ETX \SOH(\v2 .SC2APIProtocol.InterfaceOptionsR\aoptions\DC2:\n\
      \\fserver_ports\CAN\EOT \SOH(\v2\ETB.SC2APIProtocol.PortSetR\vserverPorts\DC2:\n\
      \\fclient_ports\CAN\ENQ \ETX(\v2\ETB.SC2APIProtocol.PortSetR\vclientPorts\DC2\US\n\
      \\vshared_port\CAN\ACK \SOH(\ENQR\n\
      \sharedPort\DC2\US\n\
      \\vplayer_name\CAN\a \SOH(\tR\n\
      \playerName\DC2\ETB\n\
      \\ahost_ip\CAN\b \SOH(\tR\ACKhostIpB\SI\n\
      \\rparticipation"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        options__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "options"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor InterfaceOptions)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'options")) ::
              Data.ProtoLens.FieldDescriptor RequestJoinGame
        serverPorts__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "server_ports"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor PortSet)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'serverPorts")) ::
              Data.ProtoLens.FieldDescriptor RequestJoinGame
        clientPorts__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "client_ports"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor PortSet)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"clientPorts")) ::
              Data.ProtoLens.FieldDescriptor RequestJoinGame
        sharedPort__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "shared_port"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sharedPort")) ::
              Data.ProtoLens.FieldDescriptor RequestJoinGame
        playerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerName")) ::
              Data.ProtoLens.FieldDescriptor RequestJoinGame
        hostIp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "host_ip"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'hostIp")) ::
              Data.ProtoLens.FieldDescriptor RequestJoinGame
        race__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "race"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Common.Race)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'race")) ::
              Data.ProtoLens.FieldDescriptor RequestJoinGame
        observedPlayerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "observed_player_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'observedPlayerId")) ::
              Data.ProtoLens.FieldDescriptor RequestJoinGame
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 3, options__field_descriptor),
           (Data.ProtoLens.Tag 4, serverPorts__field_descriptor),
           (Data.ProtoLens.Tag 5, clientPorts__field_descriptor),
           (Data.ProtoLens.Tag 6, sharedPort__field_descriptor),
           (Data.ProtoLens.Tag 7, playerName__field_descriptor),
           (Data.ProtoLens.Tag 8, hostIp__field_descriptor),
           (Data.ProtoLens.Tag 1, race__field_descriptor),
           (Data.ProtoLens.Tag 2, observedPlayerId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestJoinGame'_unknownFields
        (\ x__ y__ -> x__ {_RequestJoinGame'_unknownFields = y__})
  defMessage
    = RequestJoinGame'_constructor
        {_RequestJoinGame'options = Prelude.Nothing,
         _RequestJoinGame'serverPorts = Prelude.Nothing,
         _RequestJoinGame'clientPorts = Data.Vector.Generic.empty,
         _RequestJoinGame'sharedPort = Prelude.Nothing,
         _RequestJoinGame'playerName = Prelude.Nothing,
         _RequestJoinGame'hostIp = Prelude.Nothing,
         _RequestJoinGame'participation = Prelude.Nothing,
         _RequestJoinGame'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestJoinGame
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld PortSet
             -> Data.ProtoLens.Encoding.Bytes.Parser RequestJoinGame
        loop x mutable'clientPorts
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'clientPorts <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'clientPorts)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'clientPorts") frozen'clientPorts
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "options"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"options") y x)
                                  mutable'clientPorts
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "server_ports"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"serverPorts") y x)
                                  mutable'clientPorts
                        42
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "client_ports"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'clientPorts y)
                                loop x v
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "shared_port"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"sharedPort") y x)
                                  mutable'clientPorts
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "player_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerName") y x)
                                  mutable'clientPorts
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "host_ip"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"hostIp") y x)
                                  mutable'clientPorts
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "race"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"race") y x)
                                  mutable'clientPorts
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "observed_player_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"observedPlayerId") y x)
                                  mutable'clientPorts
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'clientPorts
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'clientPorts <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'clientPorts)
          "RequestJoinGame"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'options") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'serverPorts") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'clientPorts") _x))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'sharedPort") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'playerName") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'hostIp") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8 _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'participation") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just (RequestJoinGame'Race v))
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                                         ((Prelude..)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral)
                                            Prelude.fromEnum v)
                                  (Prelude.Just (RequestJoinGame'ObservedPlayerId v))
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData RequestJoinGame where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestJoinGame'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RequestJoinGame'options x__)
                (Control.DeepSeq.deepseq
                   (_RequestJoinGame'serverPorts x__)
                   (Control.DeepSeq.deepseq
                      (_RequestJoinGame'clientPorts x__)
                      (Control.DeepSeq.deepseq
                         (_RequestJoinGame'sharedPort x__)
                         (Control.DeepSeq.deepseq
                            (_RequestJoinGame'playerName x__)
                            (Control.DeepSeq.deepseq
                               (_RequestJoinGame'hostIp x__)
                               (Control.DeepSeq.deepseq
                                  (_RequestJoinGame'participation x__) ())))))))
instance Control.DeepSeq.NFData RequestJoinGame'Participation where
  rnf (RequestJoinGame'Race x__) = Control.DeepSeq.rnf x__
  rnf (RequestJoinGame'ObservedPlayerId x__)
    = Control.DeepSeq.rnf x__
_RequestJoinGame'Race ::
  Data.ProtoLens.Prism.Prism' RequestJoinGame'Participation Proto.S2clientprotocol.Common.Race
_RequestJoinGame'Race
  = Data.ProtoLens.Prism.prism'
      RequestJoinGame'Race
      (\ p__
         -> case p__ of
              (RequestJoinGame'Race p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_RequestJoinGame'ObservedPlayerId ::
  Data.ProtoLens.Prism.Prism' RequestJoinGame'Participation Data.Word.Word32
_RequestJoinGame'ObservedPlayerId
  = Data.ProtoLens.Prism.prism'
      RequestJoinGame'ObservedPlayerId
      (\ p__
         -> case p__ of
              (RequestJoinGame'ObservedPlayerId p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
{- | Fields :
      -}
data RequestLeaveGame
  = RequestLeaveGame'_constructor {_RequestLeaveGame'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestLeaveGame where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RequestLeaveGame where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestLeaveGame"
  packedMessageDescriptor _
    = "\n\
      \\DLERequestLeaveGame"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestLeaveGame'_unknownFields
        (\ x__ y__ -> x__ {_RequestLeaveGame'_unknownFields = y__})
  defMessage
    = RequestLeaveGame'_constructor
        {_RequestLeaveGame'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestLeaveGame
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestLeaveGame
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestLeaveGame"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RequestLeaveGame where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestLeaveGame'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.triggerCmd' @:: Lens' RequestMapCommand Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'triggerCmd' @:: Lens' RequestMapCommand (Prelude.Maybe Data.Text.Text)@ -}
data RequestMapCommand
  = RequestMapCommand'_constructor {_RequestMapCommand'triggerCmd :: !(Prelude.Maybe Data.Text.Text),
                                    _RequestMapCommand'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestMapCommand where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RequestMapCommand "triggerCmd" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestMapCommand'triggerCmd
           (\ x__ y__ -> x__ {_RequestMapCommand'triggerCmd = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestMapCommand "maybe'triggerCmd" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestMapCommand'triggerCmd
           (\ x__ y__ -> x__ {_RequestMapCommand'triggerCmd = y__}))
        Prelude.id
instance Data.ProtoLens.Message RequestMapCommand where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestMapCommand"
  packedMessageDescriptor _
    = "\n\
      \\DC1RequestMapCommand\DC2\US\n\
      \\vtrigger_cmd\CAN\SOH \SOH(\tR\n\
      \triggerCmd"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        triggerCmd__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "trigger_cmd"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'triggerCmd")) ::
              Data.ProtoLens.FieldDescriptor RequestMapCommand
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, triggerCmd__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestMapCommand'_unknownFields
        (\ x__ y__ -> x__ {_RequestMapCommand'_unknownFields = y__})
  defMessage
    = RequestMapCommand'_constructor
        {_RequestMapCommand'triggerCmd = Prelude.Nothing,
         _RequestMapCommand'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestMapCommand
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestMapCommand
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "trigger_cmd"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"triggerCmd") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestMapCommand"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'triggerCmd") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RequestMapCommand where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestMapCommand'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RequestMapCommand'triggerCmd x__) ())
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.disableFog' @:: Lens' RequestObservation Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'disableFog' @:: Lens' RequestObservation (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.gameLoop' @:: Lens' RequestObservation Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'gameLoop' @:: Lens' RequestObservation (Prelude.Maybe Data.Word.Word32)@ -}
data RequestObservation
  = RequestObservation'_constructor {_RequestObservation'disableFog :: !(Prelude.Maybe Prelude.Bool),
                                     _RequestObservation'gameLoop :: !(Prelude.Maybe Data.Word.Word32),
                                     _RequestObservation'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestObservation where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RequestObservation "disableFog" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestObservation'disableFog
           (\ x__ y__ -> x__ {_RequestObservation'disableFog = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestObservation "maybe'disableFog" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestObservation'disableFog
           (\ x__ y__ -> x__ {_RequestObservation'disableFog = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestObservation "gameLoop" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestObservation'gameLoop
           (\ x__ y__ -> x__ {_RequestObservation'gameLoop = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestObservation "maybe'gameLoop" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestObservation'gameLoop
           (\ x__ y__ -> x__ {_RequestObservation'gameLoop = y__}))
        Prelude.id
instance Data.ProtoLens.Message RequestObservation where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestObservation"
  packedMessageDescriptor _
    = "\n\
      \\DC2RequestObservation\DC2\US\n\
      \\vdisable_fog\CAN\SOH \SOH(\bR\n\
      \disableFog\DC2\ESC\n\
      \\tgame_loop\CAN\STX \SOH(\rR\bgameLoop"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        disableFog__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "disable_fog"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'disableFog")) ::
              Data.ProtoLens.FieldDescriptor RequestObservation
        gameLoop__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "game_loop"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gameLoop")) ::
              Data.ProtoLens.FieldDescriptor RequestObservation
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, disableFog__field_descriptor),
           (Data.ProtoLens.Tag 2, gameLoop__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestObservation'_unknownFields
        (\ x__ y__ -> x__ {_RequestObservation'_unknownFields = y__})
  defMessage
    = RequestObservation'_constructor
        {_RequestObservation'disableFog = Prelude.Nothing,
         _RequestObservation'gameLoop = Prelude.Nothing,
         _RequestObservation'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestObservation
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestObservation
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "disable_fog"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"disableFog") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "game_loop"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"gameLoop") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestObservation"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'disableFog") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'gameLoop") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RequestObservation where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestObservation'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RequestObservation'disableFog x__)
                (Control.DeepSeq.deepseq (_RequestObservation'gameLoop x__) ()))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.actions' @:: Lens' RequestObserverAction [ObserverAction]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'actions' @:: Lens' RequestObserverAction (Data.Vector.Vector ObserverAction)@ -}
data RequestObserverAction
  = RequestObserverAction'_constructor {_RequestObserverAction'actions :: !(Data.Vector.Vector ObserverAction),
                                        _RequestObserverAction'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestObserverAction where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RequestObserverAction "actions" [ObserverAction] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestObserverAction'actions
           (\ x__ y__ -> x__ {_RequestObserverAction'actions = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RequestObserverAction "vec'actions" (Data.Vector.Vector ObserverAction) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestObserverAction'actions
           (\ x__ y__ -> x__ {_RequestObserverAction'actions = y__}))
        Prelude.id
instance Data.ProtoLens.Message RequestObserverAction where
  messageName _
    = Data.Text.pack "SC2APIProtocol.RequestObserverAction"
  packedMessageDescriptor _
    = "\n\
      \\NAKRequestObserverAction\DC28\n\
      \\aactions\CAN\SOH \ETX(\v2\RS.SC2APIProtocol.ObserverActionR\aactions"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        actions__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "actions"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ObserverAction)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"actions")) ::
              Data.ProtoLens.FieldDescriptor RequestObserverAction
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, actions__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestObserverAction'_unknownFields
        (\ x__ y__ -> x__ {_RequestObserverAction'_unknownFields = y__})
  defMessage
    = RequestObserverAction'_constructor
        {_RequestObserverAction'actions = Data.Vector.Generic.empty,
         _RequestObserverAction'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestObserverAction
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld ObserverAction
             -> Data.ProtoLens.Encoding.Bytes.Parser RequestObserverAction
        loop x mutable'actions
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'actions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'actions)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'actions") frozen'actions x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "actions"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'actions y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'actions
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'actions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'actions)
          "RequestObserverAction"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'actions") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RequestObserverAction where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestObserverAction'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RequestObserverAction'actions x__) ())
{- | Fields :
      -}
data RequestPing
  = RequestPing'_constructor {_RequestPing'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestPing where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RequestPing where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestPing"
  packedMessageDescriptor _
    = "\n\
      \\vRequestPing"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestPing'_unknownFields
        (\ x__ y__ -> x__ {_RequestPing'_unknownFields = y__})
  defMessage
    = RequestPing'_constructor {_RequestPing'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestPing -> Data.ProtoLens.Encoding.Bytes.Parser RequestPing
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestPing"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RequestPing where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_RequestPing'_unknownFields x__) ()
{- | Fields :
      -}
data RequestQuickLoad
  = RequestQuickLoad'_constructor {_RequestQuickLoad'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestQuickLoad where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RequestQuickLoad where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestQuickLoad"
  packedMessageDescriptor _
    = "\n\
      \\DLERequestQuickLoad"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestQuickLoad'_unknownFields
        (\ x__ y__ -> x__ {_RequestQuickLoad'_unknownFields = y__})
  defMessage
    = RequestQuickLoad'_constructor
        {_RequestQuickLoad'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestQuickLoad
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestQuickLoad
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestQuickLoad"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RequestQuickLoad where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestQuickLoad'_unknownFields x__) ()
{- | Fields :
      -}
data RequestQuickSave
  = RequestQuickSave'_constructor {_RequestQuickSave'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestQuickSave where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RequestQuickSave where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestQuickSave"
  packedMessageDescriptor _
    = "\n\
      \\DLERequestQuickSave"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestQuickSave'_unknownFields
        (\ x__ y__ -> x__ {_RequestQuickSave'_unknownFields = y__})
  defMessage
    = RequestQuickSave'_constructor
        {_RequestQuickSave'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestQuickSave
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestQuickSave
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestQuickSave"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RequestQuickSave where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestQuickSave'_unknownFields x__) ()
{- | Fields :
      -}
data RequestQuit
  = RequestQuit'_constructor {_RequestQuit'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestQuit where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RequestQuit where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestQuit"
  packedMessageDescriptor _
    = "\n\
      \\vRequestQuit"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestQuit'_unknownFields
        (\ x__ y__ -> x__ {_RequestQuit'_unknownFields = y__})
  defMessage
    = RequestQuit'_constructor {_RequestQuit'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestQuit -> Data.ProtoLens.Encoding.Bytes.Parser RequestQuit
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestQuit"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RequestQuit where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_RequestQuit'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.downloadData' @:: Lens' RequestReplayInfo Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'downloadData' @:: Lens' RequestReplayInfo (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'replay' @:: Lens' RequestReplayInfo (Prelude.Maybe RequestReplayInfo'Replay)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'replayPath' @:: Lens' RequestReplayInfo (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.replayPath' @:: Lens' RequestReplayInfo Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'replayData' @:: Lens' RequestReplayInfo (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.replayData' @:: Lens' RequestReplayInfo Data.ByteString.ByteString@ -}
data RequestReplayInfo
  = RequestReplayInfo'_constructor {_RequestReplayInfo'downloadData :: !(Prelude.Maybe Prelude.Bool),
                                    _RequestReplayInfo'replay :: !(Prelude.Maybe RequestReplayInfo'Replay),
                                    _RequestReplayInfo'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestReplayInfo where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
data RequestReplayInfo'Replay
  = RequestReplayInfo'ReplayPath !Data.Text.Text |
    RequestReplayInfo'ReplayData !Data.ByteString.ByteString
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField RequestReplayInfo "downloadData" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestReplayInfo'downloadData
           (\ x__ y__ -> x__ {_RequestReplayInfo'downloadData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestReplayInfo "maybe'downloadData" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestReplayInfo'downloadData
           (\ x__ y__ -> x__ {_RequestReplayInfo'downloadData = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestReplayInfo "maybe'replay" (Prelude.Maybe RequestReplayInfo'Replay) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestReplayInfo'replay
           (\ x__ y__ -> x__ {_RequestReplayInfo'replay = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestReplayInfo "maybe'replayPath" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestReplayInfo'replay
           (\ x__ y__ -> x__ {_RequestReplayInfo'replay = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (RequestReplayInfo'ReplayPath x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap RequestReplayInfo'ReplayPath y__))
instance Data.ProtoLens.Field.HasField RequestReplayInfo "replayPath" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestReplayInfo'replay
           (\ x__ y__ -> x__ {_RequestReplayInfo'replay = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (RequestReplayInfo'ReplayPath x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap RequestReplayInfo'ReplayPath y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault))
instance Data.ProtoLens.Field.HasField RequestReplayInfo "maybe'replayData" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestReplayInfo'replay
           (\ x__ y__ -> x__ {_RequestReplayInfo'replay = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (RequestReplayInfo'ReplayData x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap RequestReplayInfo'ReplayData y__))
instance Data.ProtoLens.Field.HasField RequestReplayInfo "replayData" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestReplayInfo'replay
           (\ x__ y__ -> x__ {_RequestReplayInfo'replay = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (RequestReplayInfo'ReplayData x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap RequestReplayInfo'ReplayData y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault))
instance Data.ProtoLens.Message RequestReplayInfo where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestReplayInfo"
  packedMessageDescriptor _
    = "\n\
      \\DC1RequestReplayInfo\DC2!\n\
      \\vreplay_path\CAN\SOH \SOH(\tH\NULR\n\
      \replayPath\DC2!\n\
      \\vreplay_data\CAN\STX \SOH(\fH\NULR\n\
      \replayData\DC2#\n\
      \\rdownload_data\CAN\ETX \SOH(\bR\fdownloadDataB\b\n\
      \\ACKreplay"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        downloadData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "download_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'downloadData")) ::
              Data.ProtoLens.FieldDescriptor RequestReplayInfo
        replayPath__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replay_path"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'replayPath")) ::
              Data.ProtoLens.FieldDescriptor RequestReplayInfo
        replayData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replay_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'replayData")) ::
              Data.ProtoLens.FieldDescriptor RequestReplayInfo
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 3, downloadData__field_descriptor),
           (Data.ProtoLens.Tag 1, replayPath__field_descriptor),
           (Data.ProtoLens.Tag 2, replayData__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestReplayInfo'_unknownFields
        (\ x__ y__ -> x__ {_RequestReplayInfo'_unknownFields = y__})
  defMessage
    = RequestReplayInfo'_constructor
        {_RequestReplayInfo'downloadData = Prelude.Nothing,
         _RequestReplayInfo'replay = Prelude.Nothing,
         _RequestReplayInfo'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestReplayInfo
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestReplayInfo
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "download_data"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"downloadData") y x)
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "replay_path"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"replayPath") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "replay_data"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"replayData") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestReplayInfo"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'downloadData") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'replay") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just (RequestReplayInfo'ReplayPath v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 v)
                   (Prelude.Just (RequestReplayInfo'ReplayData v))
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RequestReplayInfo where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestReplayInfo'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RequestReplayInfo'downloadData x__)
                (Control.DeepSeq.deepseq (_RequestReplayInfo'replay x__) ()))
instance Control.DeepSeq.NFData RequestReplayInfo'Replay where
  rnf (RequestReplayInfo'ReplayPath x__) = Control.DeepSeq.rnf x__
  rnf (RequestReplayInfo'ReplayData x__) = Control.DeepSeq.rnf x__
_RequestReplayInfo'ReplayPath ::
  Data.ProtoLens.Prism.Prism' RequestReplayInfo'Replay Data.Text.Text
_RequestReplayInfo'ReplayPath
  = Data.ProtoLens.Prism.prism'
      RequestReplayInfo'ReplayPath
      (\ p__
         -> case p__ of
              (RequestReplayInfo'ReplayPath p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_RequestReplayInfo'ReplayData ::
  Data.ProtoLens.Prism.Prism' RequestReplayInfo'Replay Data.ByteString.ByteString
_RequestReplayInfo'ReplayData
  = Data.ProtoLens.Prism.prism'
      RequestReplayInfo'ReplayData
      (\ p__
         -> case p__ of
              (RequestReplayInfo'ReplayData p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
{- | Fields :
      -}
data RequestRestartGame
  = RequestRestartGame'_constructor {_RequestRestartGame'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestRestartGame where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RequestRestartGame where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestRestartGame"
  packedMessageDescriptor _
    = "\n\
      \\DC2RequestRestartGame"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestRestartGame'_unknownFields
        (\ x__ y__ -> x__ {_RequestRestartGame'_unknownFields = y__})
  defMessage
    = RequestRestartGame'_constructor
        {_RequestRestartGame'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestRestartGame
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestRestartGame
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestRestartGame"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RequestRestartGame where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestRestartGame'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.mapPath' @:: Lens' RequestSaveMap Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'mapPath' @:: Lens' RequestSaveMap (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.mapData' @:: Lens' RequestSaveMap Data.ByteString.ByteString@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'mapData' @:: Lens' RequestSaveMap (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RequestSaveMap
  = RequestSaveMap'_constructor {_RequestSaveMap'mapPath :: !(Prelude.Maybe Data.Text.Text),
                                 _RequestSaveMap'mapData :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RequestSaveMap'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestSaveMap where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RequestSaveMap "mapPath" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestSaveMap'mapPath
           (\ x__ y__ -> x__ {_RequestSaveMap'mapPath = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestSaveMap "maybe'mapPath" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestSaveMap'mapPath
           (\ x__ y__ -> x__ {_RequestSaveMap'mapPath = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestSaveMap "mapData" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestSaveMap'mapData
           (\ x__ y__ -> x__ {_RequestSaveMap'mapData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestSaveMap "maybe'mapData" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestSaveMap'mapData
           (\ x__ y__ -> x__ {_RequestSaveMap'mapData = y__}))
        Prelude.id
instance Data.ProtoLens.Message RequestSaveMap where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestSaveMap"
  packedMessageDescriptor _
    = "\n\
      \\SORequestSaveMap\DC2\EM\n\
      \\bmap_path\CAN\SOH \SOH(\tR\amapPath\DC2\EM\n\
      \\bmap_data\CAN\STX \SOH(\fR\amapData"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        mapPath__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_path"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapPath")) ::
              Data.ProtoLens.FieldDescriptor RequestSaveMap
        mapData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapData")) ::
              Data.ProtoLens.FieldDescriptor RequestSaveMap
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, mapPath__field_descriptor),
           (Data.ProtoLens.Tag 2, mapData__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestSaveMap'_unknownFields
        (\ x__ y__ -> x__ {_RequestSaveMap'_unknownFields = y__})
  defMessage
    = RequestSaveMap'_constructor
        {_RequestSaveMap'mapPath = Prelude.Nothing,
         _RequestSaveMap'mapData = Prelude.Nothing,
         _RequestSaveMap'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestSaveMap
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestSaveMap
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "map_path"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mapPath") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "map_data"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mapData") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestSaveMap"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mapPath") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mapData") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RequestSaveMap where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestSaveMap'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RequestSaveMap'mapPath x__)
                (Control.DeepSeq.deepseq (_RequestSaveMap'mapData x__) ()))
{- | Fields :
      -}
data RequestSaveReplay
  = RequestSaveReplay'_constructor {_RequestSaveReplay'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestSaveReplay where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RequestSaveReplay where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestSaveReplay"
  packedMessageDescriptor _
    = "\n\
      \\DC1RequestSaveReplay"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestSaveReplay'_unknownFields
        (\ x__ y__ -> x__ {_RequestSaveReplay'_unknownFields = y__})
  defMessage
    = RequestSaveReplay'_constructor
        {_RequestSaveReplay'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestSaveReplay
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestSaveReplay
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestSaveReplay"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RequestSaveReplay where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestSaveReplay'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.mapData' @:: Lens' RequestStartReplay Data.ByteString.ByteString@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'mapData' @:: Lens' RequestStartReplay (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.observedPlayerId' @:: Lens' RequestStartReplay Data.Int.Int32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'observedPlayerId' @:: Lens' RequestStartReplay (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.options' @:: Lens' RequestStartReplay InterfaceOptions@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'options' @:: Lens' RequestStartReplay (Prelude.Maybe InterfaceOptions)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.disableFog' @:: Lens' RequestStartReplay Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'disableFog' @:: Lens' RequestStartReplay (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.realtime' @:: Lens' RequestStartReplay Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'realtime' @:: Lens' RequestStartReplay (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.recordReplay' @:: Lens' RequestStartReplay Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'recordReplay' @:: Lens' RequestStartReplay (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'replay' @:: Lens' RequestStartReplay (Prelude.Maybe RequestStartReplay'Replay)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'replayPath' @:: Lens' RequestStartReplay (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.replayPath' @:: Lens' RequestStartReplay Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'replayData' @:: Lens' RequestStartReplay (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.replayData' @:: Lens' RequestStartReplay Data.ByteString.ByteString@ -}
data RequestStartReplay
  = RequestStartReplay'_constructor {_RequestStartReplay'mapData :: !(Prelude.Maybe Data.ByteString.ByteString),
                                     _RequestStartReplay'observedPlayerId :: !(Prelude.Maybe Data.Int.Int32),
                                     _RequestStartReplay'options :: !(Prelude.Maybe InterfaceOptions),
                                     _RequestStartReplay'disableFog :: !(Prelude.Maybe Prelude.Bool),
                                     _RequestStartReplay'realtime :: !(Prelude.Maybe Prelude.Bool),
                                     _RequestStartReplay'recordReplay :: !(Prelude.Maybe Prelude.Bool),
                                     _RequestStartReplay'replay :: !(Prelude.Maybe RequestStartReplay'Replay),
                                     _RequestStartReplay'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestStartReplay where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
data RequestStartReplay'Replay
  = RequestStartReplay'ReplayPath !Data.Text.Text |
    RequestStartReplay'ReplayData !Data.ByteString.ByteString
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField RequestStartReplay "mapData" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'mapData
           (\ x__ y__ -> x__ {_RequestStartReplay'mapData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestStartReplay "maybe'mapData" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'mapData
           (\ x__ y__ -> x__ {_RequestStartReplay'mapData = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestStartReplay "observedPlayerId" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'observedPlayerId
           (\ x__ y__ -> x__ {_RequestStartReplay'observedPlayerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestStartReplay "maybe'observedPlayerId" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'observedPlayerId
           (\ x__ y__ -> x__ {_RequestStartReplay'observedPlayerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestStartReplay "options" InterfaceOptions where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'options
           (\ x__ y__ -> x__ {_RequestStartReplay'options = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField RequestStartReplay "maybe'options" (Prelude.Maybe InterfaceOptions) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'options
           (\ x__ y__ -> x__ {_RequestStartReplay'options = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestStartReplay "disableFog" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'disableFog
           (\ x__ y__ -> x__ {_RequestStartReplay'disableFog = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestStartReplay "maybe'disableFog" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'disableFog
           (\ x__ y__ -> x__ {_RequestStartReplay'disableFog = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestStartReplay "realtime" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'realtime
           (\ x__ y__ -> x__ {_RequestStartReplay'realtime = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestStartReplay "maybe'realtime" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'realtime
           (\ x__ y__ -> x__ {_RequestStartReplay'realtime = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestStartReplay "recordReplay" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'recordReplay
           (\ x__ y__ -> x__ {_RequestStartReplay'recordReplay = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestStartReplay "maybe'recordReplay" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'recordReplay
           (\ x__ y__ -> x__ {_RequestStartReplay'recordReplay = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestStartReplay "maybe'replay" (Prelude.Maybe RequestStartReplay'Replay) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'replay
           (\ x__ y__ -> x__ {_RequestStartReplay'replay = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RequestStartReplay "maybe'replayPath" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'replay
           (\ x__ y__ -> x__ {_RequestStartReplay'replay = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (RequestStartReplay'ReplayPath x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap RequestStartReplay'ReplayPath y__))
instance Data.ProtoLens.Field.HasField RequestStartReplay "replayPath" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'replay
           (\ x__ y__ -> x__ {_RequestStartReplay'replay = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (RequestStartReplay'ReplayPath x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap RequestStartReplay'ReplayPath y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault))
instance Data.ProtoLens.Field.HasField RequestStartReplay "maybe'replayData" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'replay
           (\ x__ y__ -> x__ {_RequestStartReplay'replay = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (RequestStartReplay'ReplayData x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap RequestStartReplay'ReplayData y__))
instance Data.ProtoLens.Field.HasField RequestStartReplay "replayData" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStartReplay'replay
           (\ x__ y__ -> x__ {_RequestStartReplay'replay = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (RequestStartReplay'ReplayData x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap RequestStartReplay'ReplayData y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault))
instance Data.ProtoLens.Message RequestStartReplay where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestStartReplay"
  packedMessageDescriptor _
    = "\n\
      \\DC2RequestStartReplay\DC2!\n\
      \\vreplay_path\CAN\SOH \SOH(\tH\NULR\n\
      \replayPath\DC2!\n\
      \\vreplay_data\CAN\ENQ \SOH(\fH\NULR\n\
      \replayData\DC2\EM\n\
      \\bmap_data\CAN\ACK \SOH(\fR\amapData\DC2,\n\
      \\DC2observed_player_id\CAN\STX \SOH(\ENQR\DLEobservedPlayerId\DC2:\n\
      \\aoptions\CAN\ETX \SOH(\v2 .SC2APIProtocol.InterfaceOptionsR\aoptions\DC2\US\n\
      \\vdisable_fog\CAN\EOT \SOH(\bR\n\
      \disableFog\DC2\SUB\n\
      \\brealtime\CAN\a \SOH(\bR\brealtime\DC2#\n\
      \\rrecord_replay\CAN\b \SOH(\bR\frecordReplayB\b\n\
      \\ACKreplay"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        mapData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapData")) ::
              Data.ProtoLens.FieldDescriptor RequestStartReplay
        observedPlayerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "observed_player_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'observedPlayerId")) ::
              Data.ProtoLens.FieldDescriptor RequestStartReplay
        options__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "options"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor InterfaceOptions)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'options")) ::
              Data.ProtoLens.FieldDescriptor RequestStartReplay
        disableFog__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "disable_fog"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'disableFog")) ::
              Data.ProtoLens.FieldDescriptor RequestStartReplay
        realtime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "realtime"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'realtime")) ::
              Data.ProtoLens.FieldDescriptor RequestStartReplay
        recordReplay__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "record_replay"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'recordReplay")) ::
              Data.ProtoLens.FieldDescriptor RequestStartReplay
        replayPath__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replay_path"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'replayPath")) ::
              Data.ProtoLens.FieldDescriptor RequestStartReplay
        replayData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replay_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'replayData")) ::
              Data.ProtoLens.FieldDescriptor RequestStartReplay
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 6, mapData__field_descriptor),
           (Data.ProtoLens.Tag 2, observedPlayerId__field_descriptor),
           (Data.ProtoLens.Tag 3, options__field_descriptor),
           (Data.ProtoLens.Tag 4, disableFog__field_descriptor),
           (Data.ProtoLens.Tag 7, realtime__field_descriptor),
           (Data.ProtoLens.Tag 8, recordReplay__field_descriptor),
           (Data.ProtoLens.Tag 1, replayPath__field_descriptor),
           (Data.ProtoLens.Tag 5, replayData__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestStartReplay'_unknownFields
        (\ x__ y__ -> x__ {_RequestStartReplay'_unknownFields = y__})
  defMessage
    = RequestStartReplay'_constructor
        {_RequestStartReplay'mapData = Prelude.Nothing,
         _RequestStartReplay'observedPlayerId = Prelude.Nothing,
         _RequestStartReplay'options = Prelude.Nothing,
         _RequestStartReplay'disableFog = Prelude.Nothing,
         _RequestStartReplay'realtime = Prelude.Nothing,
         _RequestStartReplay'recordReplay = Prelude.Nothing,
         _RequestStartReplay'replay = Prelude.Nothing,
         _RequestStartReplay'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestStartReplay
          -> Data.ProtoLens.Encoding.Bytes.Parser RequestStartReplay
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "map_data"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mapData") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "observed_player_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"observedPlayerId") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "options"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"options") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "disable_fog"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"disableFog") y x)
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "realtime"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"realtime") y x)
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "record_replay"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"recordReplay") y x)
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "replay_path"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"replayPath") y x)
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "replay_data"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"replayData") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestStartReplay"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mapData") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                       ((\ bs
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'observedPlayerId") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'options") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'disableFog") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0) _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'realtime") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0) _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'recordReplay") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (\ b -> if b then 1 else 0) _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'replay") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just (RequestStartReplay'ReplayPath v))
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8 v)
                                  (Prelude.Just (RequestStartReplay'ReplayData v))
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                         ((\ bs
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData RequestStartReplay where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestStartReplay'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RequestStartReplay'mapData x__)
                (Control.DeepSeq.deepseq
                   (_RequestStartReplay'observedPlayerId x__)
                   (Control.DeepSeq.deepseq
                      (_RequestStartReplay'options x__)
                      (Control.DeepSeq.deepseq
                         (_RequestStartReplay'disableFog x__)
                         (Control.DeepSeq.deepseq
                            (_RequestStartReplay'realtime x__)
                            (Control.DeepSeq.deepseq
                               (_RequestStartReplay'recordReplay x__)
                               (Control.DeepSeq.deepseq (_RequestStartReplay'replay x__) ())))))))
instance Control.DeepSeq.NFData RequestStartReplay'Replay where
  rnf (RequestStartReplay'ReplayPath x__) = Control.DeepSeq.rnf x__
  rnf (RequestStartReplay'ReplayData x__) = Control.DeepSeq.rnf x__
_RequestStartReplay'ReplayPath ::
  Data.ProtoLens.Prism.Prism' RequestStartReplay'Replay Data.Text.Text
_RequestStartReplay'ReplayPath
  = Data.ProtoLens.Prism.prism'
      RequestStartReplay'ReplayPath
      (\ p__
         -> case p__ of
              (RequestStartReplay'ReplayPath p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_RequestStartReplay'ReplayData ::
  Data.ProtoLens.Prism.Prism' RequestStartReplay'Replay Data.ByteString.ByteString
_RequestStartReplay'ReplayData
  = Data.ProtoLens.Prism.prism'
      RequestStartReplay'ReplayData
      (\ p__
         -> case p__ of
              (RequestStartReplay'ReplayData p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.count' @:: Lens' RequestStep Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'count' @:: Lens' RequestStep (Prelude.Maybe Data.Word.Word32)@ -}
data RequestStep
  = RequestStep'_constructor {_RequestStep'count :: !(Prelude.Maybe Data.Word.Word32),
                              _RequestStep'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RequestStep where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RequestStep "count" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStep'count (\ x__ y__ -> x__ {_RequestStep'count = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RequestStep "maybe'count" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RequestStep'count (\ x__ y__ -> x__ {_RequestStep'count = y__}))
        Prelude.id
instance Data.ProtoLens.Message RequestStep where
  messageName _ = Data.Text.pack "SC2APIProtocol.RequestStep"
  packedMessageDescriptor _
    = "\n\
      \\vRequestStep\DC2\DC4\n\
      \\ENQcount\CAN\SOH \SOH(\rR\ENQcount"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        count__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "count"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'count")) ::
              Data.ProtoLens.FieldDescriptor RequestStep
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, count__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RequestStep'_unknownFields
        (\ x__ y__ -> x__ {_RequestStep'_unknownFields = y__})
  defMessage
    = RequestStep'_constructor
        {_RequestStep'count = Prelude.Nothing,
         _RequestStep'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RequestStep -> Data.ProtoLens.Encoding.Bytes.Parser RequestStep
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "count"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"count") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RequestStep"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'count") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RequestStep where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RequestStep'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RequestStep'count x__) ())
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.id' @:: Lens' Response Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'id' @:: Lens' Response (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.error' @:: Lens' Response [Data.Text.Text]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'error' @:: Lens' Response (Data.Vector.Vector Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.status' @:: Lens' Response Status@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'status' @:: Lens' Response (Prelude.Maybe Status)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'response' @:: Lens' Response (Prelude.Maybe Response'Response)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'createGame' @:: Lens' Response (Prelude.Maybe ResponseCreateGame)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.createGame' @:: Lens' Response ResponseCreateGame@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'joinGame' @:: Lens' Response (Prelude.Maybe ResponseJoinGame)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.joinGame' @:: Lens' Response ResponseJoinGame@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'restartGame' @:: Lens' Response (Prelude.Maybe ResponseRestartGame)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.restartGame' @:: Lens' Response ResponseRestartGame@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'startReplay' @:: Lens' Response (Prelude.Maybe ResponseStartReplay)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.startReplay' @:: Lens' Response ResponseStartReplay@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'leaveGame' @:: Lens' Response (Prelude.Maybe ResponseLeaveGame)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.leaveGame' @:: Lens' Response ResponseLeaveGame@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'quickSave' @:: Lens' Response (Prelude.Maybe ResponseQuickSave)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.quickSave' @:: Lens' Response ResponseQuickSave@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'quickLoad' @:: Lens' Response (Prelude.Maybe ResponseQuickLoad)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.quickLoad' @:: Lens' Response ResponseQuickLoad@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'quit' @:: Lens' Response (Prelude.Maybe ResponseQuit)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.quit' @:: Lens' Response ResponseQuit@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'gameInfo' @:: Lens' Response (Prelude.Maybe ResponseGameInfo)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.gameInfo' @:: Lens' Response ResponseGameInfo@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'observation' @:: Lens' Response (Prelude.Maybe ResponseObservation)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.observation' @:: Lens' Response ResponseObservation@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'action' @:: Lens' Response (Prelude.Maybe ResponseAction)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.action' @:: Lens' Response ResponseAction@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'obsAction' @:: Lens' Response (Prelude.Maybe ResponseObserverAction)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.obsAction' @:: Lens' Response ResponseObserverAction@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'step' @:: Lens' Response (Prelude.Maybe ResponseStep)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.step' @:: Lens' Response ResponseStep@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'data'' @:: Lens' Response (Prelude.Maybe ResponseData)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.data'' @:: Lens' Response ResponseData@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'query' @:: Lens' Response (Prelude.Maybe Proto.S2clientprotocol.Query.ResponseQuery)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.query' @:: Lens' Response Proto.S2clientprotocol.Query.ResponseQuery@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'saveReplay' @:: Lens' Response (Prelude.Maybe ResponseSaveReplay)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.saveReplay' @:: Lens' Response ResponseSaveReplay@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'replayInfo' @:: Lens' Response (Prelude.Maybe ResponseReplayInfo)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.replayInfo' @:: Lens' Response ResponseReplayInfo@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'availableMaps' @:: Lens' Response (Prelude.Maybe ResponseAvailableMaps)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.availableMaps' @:: Lens' Response ResponseAvailableMaps@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'saveMap' @:: Lens' Response (Prelude.Maybe ResponseSaveMap)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.saveMap' @:: Lens' Response ResponseSaveMap@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'mapCommand' @:: Lens' Response (Prelude.Maybe ResponseMapCommand)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.mapCommand' @:: Lens' Response ResponseMapCommand@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'ping' @:: Lens' Response (Prelude.Maybe ResponsePing)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.ping' @:: Lens' Response ResponsePing@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'debug' @:: Lens' Response (Prelude.Maybe ResponseDebug)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.debug' @:: Lens' Response ResponseDebug@ -}
data Response
  = Response'_constructor {_Response'id :: !(Prelude.Maybe Data.Word.Word32),
                           _Response'error :: !(Data.Vector.Vector Data.Text.Text),
                           _Response'status :: !(Prelude.Maybe Status),
                           _Response'response :: !(Prelude.Maybe Response'Response),
                           _Response'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Response where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
data Response'Response
  = Response'CreateGame !ResponseCreateGame |
    Response'JoinGame !ResponseJoinGame |
    Response'RestartGame !ResponseRestartGame |
    Response'StartReplay !ResponseStartReplay |
    Response'LeaveGame !ResponseLeaveGame |
    Response'QuickSave !ResponseQuickSave |
    Response'QuickLoad !ResponseQuickLoad |
    Response'Quit !ResponseQuit |
    Response'GameInfo !ResponseGameInfo |
    Response'Observation !ResponseObservation |
    Response'Action !ResponseAction |
    Response'ObsAction !ResponseObserverAction |
    Response'Step !ResponseStep |
    Response'Data !ResponseData |
    Response'Query !Proto.S2clientprotocol.Query.ResponseQuery |
    Response'SaveReplay !ResponseSaveReplay |
    Response'ReplayInfo !ResponseReplayInfo |
    Response'AvailableMaps !ResponseAvailableMaps |
    Response'SaveMap !ResponseSaveMap |
    Response'MapCommand !ResponseMapCommand |
    Response'Ping !ResponsePing |
    Response'Debug !ResponseDebug
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField Response "id" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'id (\ x__ y__ -> x__ {_Response'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Response "maybe'id" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'id (\ x__ y__ -> x__ {_Response'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Response "error" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'error (\ x__ y__ -> x__ {_Response'error = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField Response "vec'error" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'error (\ x__ y__ -> x__ {_Response'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Response "status" Status where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'status (\ x__ y__ -> x__ {_Response'status = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Response "maybe'status" (Prelude.Maybe Status) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'status (\ x__ y__ -> x__ {_Response'status = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Response "maybe'response" (Prelude.Maybe Response'Response) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Response "maybe'createGame" (Prelude.Maybe ResponseCreateGame) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'CreateGame x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'CreateGame y__))
instance Data.ProtoLens.Field.HasField Response "createGame" ResponseCreateGame where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'CreateGame x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'CreateGame y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'joinGame" (Prelude.Maybe ResponseJoinGame) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'JoinGame x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'JoinGame y__))
instance Data.ProtoLens.Field.HasField Response "joinGame" ResponseJoinGame where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'JoinGame x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'JoinGame y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'restartGame" (Prelude.Maybe ResponseRestartGame) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'RestartGame x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'RestartGame y__))
instance Data.ProtoLens.Field.HasField Response "restartGame" ResponseRestartGame where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'RestartGame x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'RestartGame y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'startReplay" (Prelude.Maybe ResponseStartReplay) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'StartReplay x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'StartReplay y__))
instance Data.ProtoLens.Field.HasField Response "startReplay" ResponseStartReplay where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'StartReplay x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'StartReplay y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'leaveGame" (Prelude.Maybe ResponseLeaveGame) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'LeaveGame x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'LeaveGame y__))
instance Data.ProtoLens.Field.HasField Response "leaveGame" ResponseLeaveGame where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'LeaveGame x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'LeaveGame y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'quickSave" (Prelude.Maybe ResponseQuickSave) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'QuickSave x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'QuickSave y__))
instance Data.ProtoLens.Field.HasField Response "quickSave" ResponseQuickSave where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'QuickSave x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'QuickSave y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'quickLoad" (Prelude.Maybe ResponseQuickLoad) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'QuickLoad x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'QuickLoad y__))
instance Data.ProtoLens.Field.HasField Response "quickLoad" ResponseQuickLoad where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'QuickLoad x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'QuickLoad y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'quit" (Prelude.Maybe ResponseQuit) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'Quit x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'Quit y__))
instance Data.ProtoLens.Field.HasField Response "quit" ResponseQuit where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'Quit x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'Quit y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'gameInfo" (Prelude.Maybe ResponseGameInfo) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'GameInfo x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'GameInfo y__))
instance Data.ProtoLens.Field.HasField Response "gameInfo" ResponseGameInfo where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'GameInfo x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'GameInfo y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'observation" (Prelude.Maybe ResponseObservation) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'Observation x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'Observation y__))
instance Data.ProtoLens.Field.HasField Response "observation" ResponseObservation where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'Observation x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'Observation y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'action" (Prelude.Maybe ResponseAction) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'Action x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'Action y__))
instance Data.ProtoLens.Field.HasField Response "action" ResponseAction where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'Action x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'Action y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'obsAction" (Prelude.Maybe ResponseObserverAction) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'ObsAction x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'ObsAction y__))
instance Data.ProtoLens.Field.HasField Response "obsAction" ResponseObserverAction where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'ObsAction x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'ObsAction y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'step" (Prelude.Maybe ResponseStep) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'Step x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'Step y__))
instance Data.ProtoLens.Field.HasField Response "step" ResponseStep where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'Step x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'Step y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'data'" (Prelude.Maybe ResponseData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'Data x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'Data y__))
instance Data.ProtoLens.Field.HasField Response "data'" ResponseData where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'Data x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'Data y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'query" (Prelude.Maybe Proto.S2clientprotocol.Query.ResponseQuery) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'Query x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'Query y__))
instance Data.ProtoLens.Field.HasField Response "query" Proto.S2clientprotocol.Query.ResponseQuery where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'Query x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'Query y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'saveReplay" (Prelude.Maybe ResponseSaveReplay) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'SaveReplay x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'SaveReplay y__))
instance Data.ProtoLens.Field.HasField Response "saveReplay" ResponseSaveReplay where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'SaveReplay x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'SaveReplay y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'replayInfo" (Prelude.Maybe ResponseReplayInfo) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'ReplayInfo x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'ReplayInfo y__))
instance Data.ProtoLens.Field.HasField Response "replayInfo" ResponseReplayInfo where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'ReplayInfo x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'ReplayInfo y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'availableMaps" (Prelude.Maybe ResponseAvailableMaps) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'AvailableMaps x__val))
                     -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'AvailableMaps y__))
instance Data.ProtoLens.Field.HasField Response "availableMaps" ResponseAvailableMaps where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'AvailableMaps x__val))
                        -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'AvailableMaps y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'saveMap" (Prelude.Maybe ResponseSaveMap) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'SaveMap x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'SaveMap y__))
instance Data.ProtoLens.Field.HasField Response "saveMap" ResponseSaveMap where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'SaveMap x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'SaveMap y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'mapCommand" (Prelude.Maybe ResponseMapCommand) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'MapCommand x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'MapCommand y__))
instance Data.ProtoLens.Field.HasField Response "mapCommand" ResponseMapCommand where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'MapCommand x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'MapCommand y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'ping" (Prelude.Maybe ResponsePing) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'Ping x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'Ping y__))
instance Data.ProtoLens.Field.HasField Response "ping" ResponsePing where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'Ping x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'Ping y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Field.HasField Response "maybe'debug" (Prelude.Maybe ResponseDebug) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        (Lens.Family2.Unchecked.lens
           (\ x__
              -> case x__ of
                   (Prelude.Just (Response'Debug x__val)) -> Prelude.Just x__val
                   _otherwise -> Prelude.Nothing)
           (\ _ y__ -> Prelude.fmap Response'Debug y__))
instance Data.ProtoLens.Field.HasField Response "debug" ResponseDebug where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Response'response (\ x__ y__ -> x__ {_Response'response = y__}))
        ((Prelude..)
           (Lens.Family2.Unchecked.lens
              (\ x__
                 -> case x__ of
                      (Prelude.Just (Response'Debug x__val)) -> Prelude.Just x__val
                      _otherwise -> Prelude.Nothing)
              (\ _ y__ -> Prelude.fmap Response'Debug y__))
           (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage))
instance Data.ProtoLens.Message Response where
  messageName _ = Data.Text.pack "SC2APIProtocol.Response"
  packedMessageDescriptor _
    = "\n\
      \\bResponse\DC2E\n\
      \\vcreate_game\CAN\SOH \SOH(\v2\".SC2APIProtocol.ResponseCreateGameH\NULR\n\
      \createGame\DC2?\n\
      \\tjoin_game\CAN\STX \SOH(\v2 .SC2APIProtocol.ResponseJoinGameH\NULR\bjoinGame\DC2H\n\
      \\frestart_game\CAN\ETX \SOH(\v2#.SC2APIProtocol.ResponseRestartGameH\NULR\vrestartGame\DC2H\n\
      \\fstart_replay\CAN\EOT \SOH(\v2#.SC2APIProtocol.ResponseStartReplayH\NULR\vstartReplay\DC2B\n\
      \\n\
      \leave_game\CAN\ENQ \SOH(\v2!.SC2APIProtocol.ResponseLeaveGameH\NULR\tleaveGame\DC2B\n\
      \\n\
      \quick_save\CAN\ACK \SOH(\v2!.SC2APIProtocol.ResponseQuickSaveH\NULR\tquickSave\DC2B\n\
      \\n\
      \quick_load\CAN\a \SOH(\v2!.SC2APIProtocol.ResponseQuickLoadH\NULR\tquickLoad\DC22\n\
      \\EOTquit\CAN\b \SOH(\v2\FS.SC2APIProtocol.ResponseQuitH\NULR\EOTquit\DC2?\n\
      \\tgame_info\CAN\t \SOH(\v2 .SC2APIProtocol.ResponseGameInfoH\NULR\bgameInfo\DC2G\n\
      \\vobservation\CAN\n\
      \ \SOH(\v2#.SC2APIProtocol.ResponseObservationH\NULR\vobservation\DC28\n\
      \\ACKaction\CAN\v \SOH(\v2\RS.SC2APIProtocol.ResponseActionH\NULR\ACKaction\DC2G\n\
      \\n\
      \obs_action\CAN\NAK \SOH(\v2&.SC2APIProtocol.ResponseObserverActionH\NULR\tobsAction\DC22\n\
      \\EOTstep\CAN\f \SOH(\v2\FS.SC2APIProtocol.ResponseStepH\NULR\EOTstep\DC22\n\
      \\EOTdata\CAN\r \SOH(\v2\FS.SC2APIProtocol.ResponseDataH\NULR\EOTdata\DC25\n\
      \\ENQquery\CAN\SO \SOH(\v2\GS.SC2APIProtocol.ResponseQueryH\NULR\ENQquery\DC2E\n\
      \\vsave_replay\CAN\SI \SOH(\v2\".SC2APIProtocol.ResponseSaveReplayH\NULR\n\
      \saveReplay\DC2E\n\
      \\vreplay_info\CAN\DLE \SOH(\v2\".SC2APIProtocol.ResponseReplayInfoH\NULR\n\
      \replayInfo\DC2N\n\
      \\SOavailable_maps\CAN\DC1 \SOH(\v2%.SC2APIProtocol.ResponseAvailableMapsH\NULR\ravailableMaps\DC2<\n\
      \\bsave_map\CAN\DC2 \SOH(\v2\US.SC2APIProtocol.ResponseSaveMapH\NULR\asaveMap\DC2E\n\
      \\vmap_command\CAN\SYN \SOH(\v2\".SC2APIProtocol.ResponseMapCommandH\NULR\n\
      \mapCommand\DC22\n\
      \\EOTping\CAN\DC3 \SOH(\v2\FS.SC2APIProtocol.ResponsePingH\NULR\EOTping\DC25\n\
      \\ENQdebug\CAN\DC4 \SOH(\v2\GS.SC2APIProtocol.ResponseDebugH\NULR\ENQdebug\DC2\SO\n\
      \\STXid\CANa \SOH(\rR\STXid\DC2\DC4\n\
      \\ENQerror\CANb \ETX(\tR\ENQerror\DC2.\n\
      \\ACKstatus\CANc \SOH(\SO2\SYN.SC2APIProtocol.StatusR\ACKstatusB\n\
      \\n\
      \\bresponse"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor Response
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"error")) ::
              Data.ProtoLens.FieldDescriptor Response
        status__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "status"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Status)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'status")) ::
              Data.ProtoLens.FieldDescriptor Response
        createGame__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "create_game"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseCreateGame)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'createGame")) ::
              Data.ProtoLens.FieldDescriptor Response
        joinGame__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "join_game"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseJoinGame)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'joinGame")) ::
              Data.ProtoLens.FieldDescriptor Response
        restartGame__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "restart_game"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseRestartGame)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'restartGame")) ::
              Data.ProtoLens.FieldDescriptor Response
        startReplay__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start_replay"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseStartReplay)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'startReplay")) ::
              Data.ProtoLens.FieldDescriptor Response
        leaveGame__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "leave_game"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseLeaveGame)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'leaveGame")) ::
              Data.ProtoLens.FieldDescriptor Response
        quickSave__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "quick_save"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseQuickSave)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'quickSave")) ::
              Data.ProtoLens.FieldDescriptor Response
        quickLoad__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "quick_load"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseQuickLoad)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'quickLoad")) ::
              Data.ProtoLens.FieldDescriptor Response
        quit__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "quit"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseQuit)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'quit")) ::
              Data.ProtoLens.FieldDescriptor Response
        gameInfo__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "game_info"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseGameInfo)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gameInfo")) ::
              Data.ProtoLens.FieldDescriptor Response
        observation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "observation"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseObservation)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'observation")) ::
              Data.ProtoLens.FieldDescriptor Response
        action__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "action"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseAction)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'action")) ::
              Data.ProtoLens.FieldDescriptor Response
        obsAction__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obs_action"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseObserverAction)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsAction")) ::
              Data.ProtoLens.FieldDescriptor Response
        step__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "step"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseStep)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'step")) ::
              Data.ProtoLens.FieldDescriptor Response
        data'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "data"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseData)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'data'")) ::
              Data.ProtoLens.FieldDescriptor Response
        query__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "query"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Query.ResponseQuery)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'query")) ::
              Data.ProtoLens.FieldDescriptor Response
        saveReplay__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "save_replay"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseSaveReplay)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'saveReplay")) ::
              Data.ProtoLens.FieldDescriptor Response
        replayInfo__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replay_info"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseReplayInfo)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'replayInfo")) ::
              Data.ProtoLens.FieldDescriptor Response
        availableMaps__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "available_maps"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseAvailableMaps)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'availableMaps")) ::
              Data.ProtoLens.FieldDescriptor Response
        saveMap__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "save_map"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseSaveMap)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'saveMap")) ::
              Data.ProtoLens.FieldDescriptor Response
        mapCommand__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_command"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseMapCommand)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapCommand")) ::
              Data.ProtoLens.FieldDescriptor Response
        ping__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ping"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponsePing)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ping")) ::
              Data.ProtoLens.FieldDescriptor Response
        debug__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "debug"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseDebug)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'debug")) ::
              Data.ProtoLens.FieldDescriptor Response
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 97, id__field_descriptor),
           (Data.ProtoLens.Tag 98, error__field_descriptor),
           (Data.ProtoLens.Tag 99, status__field_descriptor),
           (Data.ProtoLens.Tag 1, createGame__field_descriptor),
           (Data.ProtoLens.Tag 2, joinGame__field_descriptor),
           (Data.ProtoLens.Tag 3, restartGame__field_descriptor),
           (Data.ProtoLens.Tag 4, startReplay__field_descriptor),
           (Data.ProtoLens.Tag 5, leaveGame__field_descriptor),
           (Data.ProtoLens.Tag 6, quickSave__field_descriptor),
           (Data.ProtoLens.Tag 7, quickLoad__field_descriptor),
           (Data.ProtoLens.Tag 8, quit__field_descriptor),
           (Data.ProtoLens.Tag 9, gameInfo__field_descriptor),
           (Data.ProtoLens.Tag 10, observation__field_descriptor),
           (Data.ProtoLens.Tag 11, action__field_descriptor),
           (Data.ProtoLens.Tag 21, obsAction__field_descriptor),
           (Data.ProtoLens.Tag 12, step__field_descriptor),
           (Data.ProtoLens.Tag 13, data'__field_descriptor),
           (Data.ProtoLens.Tag 14, query__field_descriptor),
           (Data.ProtoLens.Tag 15, saveReplay__field_descriptor),
           (Data.ProtoLens.Tag 16, replayInfo__field_descriptor),
           (Data.ProtoLens.Tag 17, availableMaps__field_descriptor),
           (Data.ProtoLens.Tag 18, saveMap__field_descriptor),
           (Data.ProtoLens.Tag 22, mapCommand__field_descriptor),
           (Data.ProtoLens.Tag 19, ping__field_descriptor),
           (Data.ProtoLens.Tag 20, debug__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Response'_unknownFields
        (\ x__ y__ -> x__ {_Response'_unknownFields = y__})
  defMessage
    = Response'_constructor
        {_Response'id = Prelude.Nothing,
         _Response'error = Data.Vector.Generic.empty,
         _Response'status = Prelude.Nothing,
         _Response'response = Prelude.Nothing,
         _Response'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Response
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
             -> Data.ProtoLens.Encoding.Bytes.Parser Response
        loop x mutable'error
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'error <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'error)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'error") frozen'error x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        776
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                                  mutable'error
                        786
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                        Data.ProtoLens.Encoding.Bytes.getBytes
                                                          (Prelude.fromIntegral len)
                                            Data.ProtoLens.Encoding.Bytes.runEither
                                              (case Data.Text.Encoding.decodeUtf8' value of
                                                 (Prelude.Left err)
                                                   -> Prelude.Left (Prelude.show err)
                                                 (Prelude.Right r) -> Prelude.Right r))
                                        "error"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'error y)
                                loop x v
                        792
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "status"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"status") y x)
                                  mutable'error
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "create_game"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"createGame") y x)
                                  mutable'error
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "join_game"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"joinGame") y x)
                                  mutable'error
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "restart_game"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"restartGame") y x)
                                  mutable'error
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "start_replay"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"startReplay") y x)
                                  mutable'error
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "leave_game"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"leaveGame") y x)
                                  mutable'error
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "quick_save"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"quickSave") y x)
                                  mutable'error
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "quick_load"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"quickLoad") y x)
                                  mutable'error
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "quit"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"quit") y x)
                                  mutable'error
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "game_info"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"gameInfo") y x)
                                  mutable'error
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "observation"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"observation") y x)
                                  mutable'error
                        90
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "action"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"action") y x)
                                  mutable'error
                        170
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "obs_action"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"obsAction") y x)
                                  mutable'error
                        98
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "step"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"step") y x)
                                  mutable'error
                        106
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "data"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"data'") y x)
                                  mutable'error
                        114
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "query"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"query") y x)
                                  mutable'error
                        122
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "save_replay"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"saveReplay") y x)
                                  mutable'error
                        130
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "replay_info"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"replayInfo") y x)
                                  mutable'error
                        138
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "available_maps"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"availableMaps") y x)
                                  mutable'error
                        146
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "save_map"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"saveMap") y x)
                                  mutable'error
                        178
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "map_command"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"mapCommand") y x)
                                  mutable'error
                        154
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "ping"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ping") y x)
                                  mutable'error
                        162
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "debug"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"debug") y x)
                                  mutable'error
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'error
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'error <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'error)
          "Response"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 776)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 786)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.Text.Encoding.encodeUtf8 _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'error") _x))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'status") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 792)
                             ((Prelude..)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                Prelude.fromEnum _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'response") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just (Response'CreateGame v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'JoinGame v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'RestartGame v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'StartReplay v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'LeaveGame v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'QuickSave v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'QuickLoad v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'Quit v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'GameInfo v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'Observation v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'Action v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 90)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'ObsAction v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 170)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'Step v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 98)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'Data v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 106)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'Query v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 114)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'SaveReplay v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 122)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'ReplayInfo v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 130)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'AvailableMaps v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 138)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'SaveMap v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 146)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'MapCommand v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 178)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'Ping v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 154)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v)
                         (Prelude.Just (Response'Debug v))
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 162)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Response where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Response'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Response'id x__)
                (Control.DeepSeq.deepseq
                   (_Response'error x__)
                   (Control.DeepSeq.deepseq
                      (_Response'status x__)
                      (Control.DeepSeq.deepseq (_Response'response x__) ()))))
instance Control.DeepSeq.NFData Response'Response where
  rnf (Response'CreateGame x__) = Control.DeepSeq.rnf x__
  rnf (Response'JoinGame x__) = Control.DeepSeq.rnf x__
  rnf (Response'RestartGame x__) = Control.DeepSeq.rnf x__
  rnf (Response'StartReplay x__) = Control.DeepSeq.rnf x__
  rnf (Response'LeaveGame x__) = Control.DeepSeq.rnf x__
  rnf (Response'QuickSave x__) = Control.DeepSeq.rnf x__
  rnf (Response'QuickLoad x__) = Control.DeepSeq.rnf x__
  rnf (Response'Quit x__) = Control.DeepSeq.rnf x__
  rnf (Response'GameInfo x__) = Control.DeepSeq.rnf x__
  rnf (Response'Observation x__) = Control.DeepSeq.rnf x__
  rnf (Response'Action x__) = Control.DeepSeq.rnf x__
  rnf (Response'ObsAction x__) = Control.DeepSeq.rnf x__
  rnf (Response'Step x__) = Control.DeepSeq.rnf x__
  rnf (Response'Data x__) = Control.DeepSeq.rnf x__
  rnf (Response'Query x__) = Control.DeepSeq.rnf x__
  rnf (Response'SaveReplay x__) = Control.DeepSeq.rnf x__
  rnf (Response'ReplayInfo x__) = Control.DeepSeq.rnf x__
  rnf (Response'AvailableMaps x__) = Control.DeepSeq.rnf x__
  rnf (Response'SaveMap x__) = Control.DeepSeq.rnf x__
  rnf (Response'MapCommand x__) = Control.DeepSeq.rnf x__
  rnf (Response'Ping x__) = Control.DeepSeq.rnf x__
  rnf (Response'Debug x__) = Control.DeepSeq.rnf x__
_Response'CreateGame ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseCreateGame
_Response'CreateGame
  = Data.ProtoLens.Prism.prism'
      Response'CreateGame
      (\ p__
         -> case p__ of
              (Response'CreateGame p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'JoinGame ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseJoinGame
_Response'JoinGame
  = Data.ProtoLens.Prism.prism'
      Response'JoinGame
      (\ p__
         -> case p__ of
              (Response'JoinGame p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'RestartGame ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseRestartGame
_Response'RestartGame
  = Data.ProtoLens.Prism.prism'
      Response'RestartGame
      (\ p__
         -> case p__ of
              (Response'RestartGame p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'StartReplay ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseStartReplay
_Response'StartReplay
  = Data.ProtoLens.Prism.prism'
      Response'StartReplay
      (\ p__
         -> case p__ of
              (Response'StartReplay p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'LeaveGame ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseLeaveGame
_Response'LeaveGame
  = Data.ProtoLens.Prism.prism'
      Response'LeaveGame
      (\ p__
         -> case p__ of
              (Response'LeaveGame p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'QuickSave ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseQuickSave
_Response'QuickSave
  = Data.ProtoLens.Prism.prism'
      Response'QuickSave
      (\ p__
         -> case p__ of
              (Response'QuickSave p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'QuickLoad ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseQuickLoad
_Response'QuickLoad
  = Data.ProtoLens.Prism.prism'
      Response'QuickLoad
      (\ p__
         -> case p__ of
              (Response'QuickLoad p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'Quit ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseQuit
_Response'Quit
  = Data.ProtoLens.Prism.prism'
      Response'Quit
      (\ p__
         -> case p__ of
              (Response'Quit p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'GameInfo ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseGameInfo
_Response'GameInfo
  = Data.ProtoLens.Prism.prism'
      Response'GameInfo
      (\ p__
         -> case p__ of
              (Response'GameInfo p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'Observation ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseObservation
_Response'Observation
  = Data.ProtoLens.Prism.prism'
      Response'Observation
      (\ p__
         -> case p__ of
              (Response'Observation p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'Action ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseAction
_Response'Action
  = Data.ProtoLens.Prism.prism'
      Response'Action
      (\ p__
         -> case p__ of
              (Response'Action p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'ObsAction ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseObserverAction
_Response'ObsAction
  = Data.ProtoLens.Prism.prism'
      Response'ObsAction
      (\ p__
         -> case p__ of
              (Response'ObsAction p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'Step ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseStep
_Response'Step
  = Data.ProtoLens.Prism.prism'
      Response'Step
      (\ p__
         -> case p__ of
              (Response'Step p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'Data ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseData
_Response'Data
  = Data.ProtoLens.Prism.prism'
      Response'Data
      (\ p__
         -> case p__ of
              (Response'Data p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'Query ::
  Data.ProtoLens.Prism.Prism' Response'Response Proto.S2clientprotocol.Query.ResponseQuery
_Response'Query
  = Data.ProtoLens.Prism.prism'
      Response'Query
      (\ p__
         -> case p__ of
              (Response'Query p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'SaveReplay ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseSaveReplay
_Response'SaveReplay
  = Data.ProtoLens.Prism.prism'
      Response'SaveReplay
      (\ p__
         -> case p__ of
              (Response'SaveReplay p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'ReplayInfo ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseReplayInfo
_Response'ReplayInfo
  = Data.ProtoLens.Prism.prism'
      Response'ReplayInfo
      (\ p__
         -> case p__ of
              (Response'ReplayInfo p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'AvailableMaps ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseAvailableMaps
_Response'AvailableMaps
  = Data.ProtoLens.Prism.prism'
      Response'AvailableMaps
      (\ p__
         -> case p__ of
              (Response'AvailableMaps p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'SaveMap ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseSaveMap
_Response'SaveMap
  = Data.ProtoLens.Prism.prism'
      Response'SaveMap
      (\ p__
         -> case p__ of
              (Response'SaveMap p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'MapCommand ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseMapCommand
_Response'MapCommand
  = Data.ProtoLens.Prism.prism'
      Response'MapCommand
      (\ p__
         -> case p__ of
              (Response'MapCommand p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'Ping ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponsePing
_Response'Ping
  = Data.ProtoLens.Prism.prism'
      Response'Ping
      (\ p__
         -> case p__ of
              (Response'Ping p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
_Response'Debug ::
  Data.ProtoLens.Prism.Prism' Response'Response ResponseDebug
_Response'Debug
  = Data.ProtoLens.Prism.prism'
      Response'Debug
      (\ p__
         -> case p__ of
              (Response'Debug p__val) -> Prelude.Just p__val
              _otherwise -> Prelude.Nothing)
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.result' @:: Lens' ResponseAction [Proto.S2clientprotocol.Error.ActionResult]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'result' @:: Lens' ResponseAction (Data.Vector.Vector Proto.S2clientprotocol.Error.ActionResult)@ -}
data ResponseAction
  = ResponseAction'_constructor {_ResponseAction'result :: !(Data.Vector.Vector Proto.S2clientprotocol.Error.ActionResult),
                                 _ResponseAction'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseAction where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseAction "result" [Proto.S2clientprotocol.Error.ActionResult] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseAction'result
           (\ x__ y__ -> x__ {_ResponseAction'result = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseAction "vec'result" (Data.Vector.Vector Proto.S2clientprotocol.Error.ActionResult) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseAction'result
           (\ x__ y__ -> x__ {_ResponseAction'result = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseAction where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseAction"
  packedMessageDescriptor _
    = "\n\
      \\SOResponseAction\DC24\n\
      \\ACKresult\CAN\SOH \ETX(\SO2\FS.SC2APIProtocol.ActionResultR\ACKresult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        result__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "result"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Error.ActionResult)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"result")) ::
              Data.ProtoLens.FieldDescriptor ResponseAction
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, result__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseAction'_unknownFields
        (\ x__ y__ -> x__ {_ResponseAction'_unknownFields = y__})
  defMessage
    = ResponseAction'_constructor
        {_ResponseAction'result = Data.Vector.Generic.empty,
         _ResponseAction'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseAction
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Proto.S2clientprotocol.Error.ActionResult
             -> Data.ProtoLens.Encoding.Bytes.Parser ResponseAction
        loop x mutable'result
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'result <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                            mutable'result)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'result") frozen'result x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.toEnum
                                           (Prelude.fmap
                                              Prelude.fromIntegral
                                              Data.ProtoLens.Encoding.Bytes.getVarInt))
                                        "result"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'result y)
                                loop x v
                        10
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.toEnum
                                                                       (Prelude.fmap
                                                                          Prelude.fromIntegral
                                                                          Data.ProtoLens.Encoding.Bytes.getVarInt))
                                                                    "result"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'result)
                                loop x y
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'result
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'result <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                  Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'result)
          "ResponseAction"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                        ((Prelude..)
                           ((Prelude..)
                              Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                           Prelude.fromEnum _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'result") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ResponseAction where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseAction'_unknownFields x__)
             (Control.DeepSeq.deepseq (_ResponseAction'result x__) ())
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.localMapPaths' @:: Lens' ResponseAvailableMaps [Data.Text.Text]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'localMapPaths' @:: Lens' ResponseAvailableMaps (Data.Vector.Vector Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.battlenetMapNames' @:: Lens' ResponseAvailableMaps [Data.Text.Text]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'battlenetMapNames' @:: Lens' ResponseAvailableMaps (Data.Vector.Vector Data.Text.Text)@ -}
data ResponseAvailableMaps
  = ResponseAvailableMaps'_constructor {_ResponseAvailableMaps'localMapPaths :: !(Data.Vector.Vector Data.Text.Text),
                                        _ResponseAvailableMaps'battlenetMapNames :: !(Data.Vector.Vector Data.Text.Text),
                                        _ResponseAvailableMaps'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseAvailableMaps where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseAvailableMaps "localMapPaths" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseAvailableMaps'localMapPaths
           (\ x__ y__ -> x__ {_ResponseAvailableMaps'localMapPaths = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseAvailableMaps "vec'localMapPaths" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseAvailableMaps'localMapPaths
           (\ x__ y__ -> x__ {_ResponseAvailableMaps'localMapPaths = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseAvailableMaps "battlenetMapNames" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseAvailableMaps'battlenetMapNames
           (\ x__ y__
              -> x__ {_ResponseAvailableMaps'battlenetMapNames = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseAvailableMaps "vec'battlenetMapNames" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseAvailableMaps'battlenetMapNames
           (\ x__ y__
              -> x__ {_ResponseAvailableMaps'battlenetMapNames = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseAvailableMaps where
  messageName _
    = Data.Text.pack "SC2APIProtocol.ResponseAvailableMaps"
  packedMessageDescriptor _
    = "\n\
      \\NAKResponseAvailableMaps\DC2&\n\
      \\SIlocal_map_paths\CAN\SOH \ETX(\tR\rlocalMapPaths\DC2.\n\
      \\DC3battlenet_map_names\CAN\STX \ETX(\tR\DC1battlenetMapNames"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        localMapPaths__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "local_map_paths"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"localMapPaths")) ::
              Data.ProtoLens.FieldDescriptor ResponseAvailableMaps
        battlenetMapNames__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "battlenet_map_names"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"battlenetMapNames")) ::
              Data.ProtoLens.FieldDescriptor ResponseAvailableMaps
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, localMapPaths__field_descriptor),
           (Data.ProtoLens.Tag 2, battlenetMapNames__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseAvailableMaps'_unknownFields
        (\ x__ y__ -> x__ {_ResponseAvailableMaps'_unknownFields = y__})
  defMessage
    = ResponseAvailableMaps'_constructor
        {_ResponseAvailableMaps'localMapPaths = Data.Vector.Generic.empty,
         _ResponseAvailableMaps'battlenetMapNames = Data.Vector.Generic.empty,
         _ResponseAvailableMaps'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseAvailableMaps
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
                -> Data.ProtoLens.Encoding.Bytes.Parser ResponseAvailableMaps
        loop x mutable'battlenetMapNames mutable'localMapPaths
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'battlenetMapNames <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                    (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                       mutable'battlenetMapNames)
                      frozen'localMapPaths <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                   mutable'localMapPaths)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'battlenetMapNames")
                              frozen'battlenetMapNames
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'localMapPaths")
                                 frozen'localMapPaths x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                        Data.ProtoLens.Encoding.Bytes.getBytes
                                                          (Prelude.fromIntegral len)
                                            Data.ProtoLens.Encoding.Bytes.runEither
                                              (case Data.Text.Encoding.decodeUtf8' value of
                                                 (Prelude.Left err)
                                                   -> Prelude.Left (Prelude.show err)
                                                 (Prelude.Right r) -> Prelude.Right r))
                                        "local_map_paths"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'localMapPaths y)
                                loop x mutable'battlenetMapNames v
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                        Data.ProtoLens.Encoding.Bytes.getBytes
                                                          (Prelude.fromIntegral len)
                                            Data.ProtoLens.Encoding.Bytes.runEither
                                              (case Data.Text.Encoding.decodeUtf8' value of
                                                 (Prelude.Left err)
                                                   -> Prelude.Left (Prelude.show err)
                                                 (Prelude.Right r) -> Prelude.Right r))
                                        "battlenet_map_names"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'battlenetMapNames y)
                                loop x v mutable'localMapPaths
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'battlenetMapNames mutable'localMapPaths
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'battlenetMapNames <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             Data.ProtoLens.Encoding.Growing.new
              mutable'localMapPaths <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'battlenetMapNames
                mutable'localMapPaths)
          "ResponseAvailableMaps"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.Text.Encoding.encodeUtf8 _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'localMapPaths") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.Text.Encoding.encodeUtf8 _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'battlenetMapNames") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData ResponseAvailableMaps where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseAvailableMaps'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponseAvailableMaps'localMapPaths x__)
                (Control.DeepSeq.deepseq
                   (_ResponseAvailableMaps'battlenetMapNames x__) ()))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.error' @:: Lens' ResponseCreateGame ResponseCreateGame'Error@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'error' @:: Lens' ResponseCreateGame (Prelude.Maybe ResponseCreateGame'Error)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.errorDetails' @:: Lens' ResponseCreateGame Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'errorDetails' @:: Lens' ResponseCreateGame (Prelude.Maybe Data.Text.Text)@ -}
data ResponseCreateGame
  = ResponseCreateGame'_constructor {_ResponseCreateGame'error :: !(Prelude.Maybe ResponseCreateGame'Error),
                                     _ResponseCreateGame'errorDetails :: !(Prelude.Maybe Data.Text.Text),
                                     _ResponseCreateGame'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseCreateGame where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseCreateGame "error" ResponseCreateGame'Error where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseCreateGame'error
           (\ x__ y__ -> x__ {_ResponseCreateGame'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseCreateGame "maybe'error" (Prelude.Maybe ResponseCreateGame'Error) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseCreateGame'error
           (\ x__ y__ -> x__ {_ResponseCreateGame'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseCreateGame "errorDetails" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseCreateGame'errorDetails
           (\ x__ y__ -> x__ {_ResponseCreateGame'errorDetails = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseCreateGame "maybe'errorDetails" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseCreateGame'errorDetails
           (\ x__ y__ -> x__ {_ResponseCreateGame'errorDetails = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseCreateGame where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseCreateGame"
  packedMessageDescriptor _
    = "\n\
      \\DC2ResponseCreateGame\DC2>\n\
      \\ENQerror\CAN\SOH \SOH(\SO2(.SC2APIProtocol.ResponseCreateGame.ErrorR\ENQerror\DC2#\n\
      \\rerror_details\CAN\STX \SOH(\tR\ferrorDetails\"\181\SOH\n\
      \\ENQError\DC2\SO\n\
      \\n\
      \MissingMap\DLE\SOH\DC2\DC2\n\
      \\SOInvalidMapPath\DLE\STX\DC2\DC2\n\
      \\SOInvalidMapData\DLE\ETX\DC2\DC2\n\
      \\SOInvalidMapName\DLE\EOT\DC2\DC4\n\
      \\DLEInvalidMapHandle\DLE\ENQ\DC2\SYN\n\
      \\DC2MissingPlayerSetup\DLE\ACK\DC2\SYN\n\
      \\DC2InvalidPlayerSetup\DLE\a\DC2\SUB\n\
      \\SYNMultiplayerUnsupported\DLE\b"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseCreateGame'Error)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor ResponseCreateGame
        errorDetails__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_details"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorDetails")) ::
              Data.ProtoLens.FieldDescriptor ResponseCreateGame
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, error__field_descriptor),
           (Data.ProtoLens.Tag 2, errorDetails__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseCreateGame'_unknownFields
        (\ x__ y__ -> x__ {_ResponseCreateGame'_unknownFields = y__})
  defMessage
    = ResponseCreateGame'_constructor
        {_ResponseCreateGame'error = Prelude.Nothing,
         _ResponseCreateGame'errorDetails = Prelude.Nothing,
         _ResponseCreateGame'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseCreateGame
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseCreateGame
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "error_details"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorDetails") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseCreateGame"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Prelude.fromEnum _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'errorDetails") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData ResponseCreateGame where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseCreateGame'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponseCreateGame'error x__)
                (Control.DeepSeq.deepseq
                   (_ResponseCreateGame'errorDetails x__) ()))
data ResponseCreateGame'Error
  = ResponseCreateGame'MissingMap |
    ResponseCreateGame'InvalidMapPath |
    ResponseCreateGame'InvalidMapData |
    ResponseCreateGame'InvalidMapName |
    ResponseCreateGame'InvalidMapHandle |
    ResponseCreateGame'MissingPlayerSetup |
    ResponseCreateGame'InvalidPlayerSetup |
    ResponseCreateGame'MultiplayerUnsupported
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ResponseCreateGame'Error where
  maybeToEnum 1 = Prelude.Just ResponseCreateGame'MissingMap
  maybeToEnum 2 = Prelude.Just ResponseCreateGame'InvalidMapPath
  maybeToEnum 3 = Prelude.Just ResponseCreateGame'InvalidMapData
  maybeToEnum 4 = Prelude.Just ResponseCreateGame'InvalidMapName
  maybeToEnum 5 = Prelude.Just ResponseCreateGame'InvalidMapHandle
  maybeToEnum 6 = Prelude.Just ResponseCreateGame'MissingPlayerSetup
  maybeToEnum 7 = Prelude.Just ResponseCreateGame'InvalidPlayerSetup
  maybeToEnum 8
    = Prelude.Just ResponseCreateGame'MultiplayerUnsupported
  maybeToEnum _ = Prelude.Nothing
  showEnum ResponseCreateGame'MissingMap = "MissingMap"
  showEnum ResponseCreateGame'InvalidMapPath = "InvalidMapPath"
  showEnum ResponseCreateGame'InvalidMapData = "InvalidMapData"
  showEnum ResponseCreateGame'InvalidMapName = "InvalidMapName"
  showEnum ResponseCreateGame'InvalidMapHandle = "InvalidMapHandle"
  showEnum ResponseCreateGame'MissingPlayerSetup
    = "MissingPlayerSetup"
  showEnum ResponseCreateGame'InvalidPlayerSetup
    = "InvalidPlayerSetup"
  showEnum ResponseCreateGame'MultiplayerUnsupported
    = "MultiplayerUnsupported"
  readEnum k
    | (Prelude.==) k "MissingMap"
    = Prelude.Just ResponseCreateGame'MissingMap
    | (Prelude.==) k "InvalidMapPath"
    = Prelude.Just ResponseCreateGame'InvalidMapPath
    | (Prelude.==) k "InvalidMapData"
    = Prelude.Just ResponseCreateGame'InvalidMapData
    | (Prelude.==) k "InvalidMapName"
    = Prelude.Just ResponseCreateGame'InvalidMapName
    | (Prelude.==) k "InvalidMapHandle"
    = Prelude.Just ResponseCreateGame'InvalidMapHandle
    | (Prelude.==) k "MissingPlayerSetup"
    = Prelude.Just ResponseCreateGame'MissingPlayerSetup
    | (Prelude.==) k "InvalidPlayerSetup"
    = Prelude.Just ResponseCreateGame'InvalidPlayerSetup
    | (Prelude.==) k "MultiplayerUnsupported"
    = Prelude.Just ResponseCreateGame'MultiplayerUnsupported
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ResponseCreateGame'Error where
  minBound = ResponseCreateGame'MissingMap
  maxBound = ResponseCreateGame'MultiplayerUnsupported
instance Prelude.Enum ResponseCreateGame'Error where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Error: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum ResponseCreateGame'MissingMap = 1
  fromEnum ResponseCreateGame'InvalidMapPath = 2
  fromEnum ResponseCreateGame'InvalidMapData = 3
  fromEnum ResponseCreateGame'InvalidMapName = 4
  fromEnum ResponseCreateGame'InvalidMapHandle = 5
  fromEnum ResponseCreateGame'MissingPlayerSetup = 6
  fromEnum ResponseCreateGame'InvalidPlayerSetup = 7
  fromEnum ResponseCreateGame'MultiplayerUnsupported = 8
  succ ResponseCreateGame'MultiplayerUnsupported
    = Prelude.error
        "ResponseCreateGame'Error.succ: bad argument ResponseCreateGame'MultiplayerUnsupported. This value would be out of bounds."
  succ ResponseCreateGame'MissingMap
    = ResponseCreateGame'InvalidMapPath
  succ ResponseCreateGame'InvalidMapPath
    = ResponseCreateGame'InvalidMapData
  succ ResponseCreateGame'InvalidMapData
    = ResponseCreateGame'InvalidMapName
  succ ResponseCreateGame'InvalidMapName
    = ResponseCreateGame'InvalidMapHandle
  succ ResponseCreateGame'InvalidMapHandle
    = ResponseCreateGame'MissingPlayerSetup
  succ ResponseCreateGame'MissingPlayerSetup
    = ResponseCreateGame'InvalidPlayerSetup
  succ ResponseCreateGame'InvalidPlayerSetup
    = ResponseCreateGame'MultiplayerUnsupported
  pred ResponseCreateGame'MissingMap
    = Prelude.error
        "ResponseCreateGame'Error.pred: bad argument ResponseCreateGame'MissingMap. This value would be out of bounds."
  pred ResponseCreateGame'InvalidMapPath
    = ResponseCreateGame'MissingMap
  pred ResponseCreateGame'InvalidMapData
    = ResponseCreateGame'InvalidMapPath
  pred ResponseCreateGame'InvalidMapName
    = ResponseCreateGame'InvalidMapData
  pred ResponseCreateGame'InvalidMapHandle
    = ResponseCreateGame'InvalidMapName
  pred ResponseCreateGame'MissingPlayerSetup
    = ResponseCreateGame'InvalidMapHandle
  pred ResponseCreateGame'InvalidPlayerSetup
    = ResponseCreateGame'MissingPlayerSetup
  pred ResponseCreateGame'MultiplayerUnsupported
    = ResponseCreateGame'InvalidPlayerSetup
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ResponseCreateGame'Error where
  fieldDefault = ResponseCreateGame'MissingMap
instance Control.DeepSeq.NFData ResponseCreateGame'Error where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.abilities' @:: Lens' ResponseData [Proto.S2clientprotocol.Data.AbilityData]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'abilities' @:: Lens' ResponseData (Data.Vector.Vector Proto.S2clientprotocol.Data.AbilityData)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.units' @:: Lens' ResponseData [Proto.S2clientprotocol.Data.UnitTypeData]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'units' @:: Lens' ResponseData (Data.Vector.Vector Proto.S2clientprotocol.Data.UnitTypeData)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.upgrades' @:: Lens' ResponseData [Proto.S2clientprotocol.Data.UpgradeData]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'upgrades' @:: Lens' ResponseData (Data.Vector.Vector Proto.S2clientprotocol.Data.UpgradeData)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.buffs' @:: Lens' ResponseData [Proto.S2clientprotocol.Data.BuffData]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'buffs' @:: Lens' ResponseData (Data.Vector.Vector Proto.S2clientprotocol.Data.BuffData)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.effects' @:: Lens' ResponseData [Proto.S2clientprotocol.Data.EffectData]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'effects' @:: Lens' ResponseData (Data.Vector.Vector Proto.S2clientprotocol.Data.EffectData)@ -}
data ResponseData
  = ResponseData'_constructor {_ResponseData'abilities :: !(Data.Vector.Vector Proto.S2clientprotocol.Data.AbilityData),
                               _ResponseData'units :: !(Data.Vector.Vector Proto.S2clientprotocol.Data.UnitTypeData),
                               _ResponseData'upgrades :: !(Data.Vector.Vector Proto.S2clientprotocol.Data.UpgradeData),
                               _ResponseData'buffs :: !(Data.Vector.Vector Proto.S2clientprotocol.Data.BuffData),
                               _ResponseData'effects :: !(Data.Vector.Vector Proto.S2clientprotocol.Data.EffectData),
                               _ResponseData'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseData where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseData "abilities" [Proto.S2clientprotocol.Data.AbilityData] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseData'abilities
           (\ x__ y__ -> x__ {_ResponseData'abilities = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseData "vec'abilities" (Data.Vector.Vector Proto.S2clientprotocol.Data.AbilityData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseData'abilities
           (\ x__ y__ -> x__ {_ResponseData'abilities = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseData "units" [Proto.S2clientprotocol.Data.UnitTypeData] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseData'units (\ x__ y__ -> x__ {_ResponseData'units = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseData "vec'units" (Data.Vector.Vector Proto.S2clientprotocol.Data.UnitTypeData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseData'units (\ x__ y__ -> x__ {_ResponseData'units = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseData "upgrades" [Proto.S2clientprotocol.Data.UpgradeData] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseData'upgrades
           (\ x__ y__ -> x__ {_ResponseData'upgrades = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseData "vec'upgrades" (Data.Vector.Vector Proto.S2clientprotocol.Data.UpgradeData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseData'upgrades
           (\ x__ y__ -> x__ {_ResponseData'upgrades = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseData "buffs" [Proto.S2clientprotocol.Data.BuffData] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseData'buffs (\ x__ y__ -> x__ {_ResponseData'buffs = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseData "vec'buffs" (Data.Vector.Vector Proto.S2clientprotocol.Data.BuffData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseData'buffs (\ x__ y__ -> x__ {_ResponseData'buffs = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseData "effects" [Proto.S2clientprotocol.Data.EffectData] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseData'effects
           (\ x__ y__ -> x__ {_ResponseData'effects = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseData "vec'effects" (Data.Vector.Vector Proto.S2clientprotocol.Data.EffectData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseData'effects
           (\ x__ y__ -> x__ {_ResponseData'effects = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseData where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseData"
  packedMessageDescriptor _
    = "\n\
      \\fResponseData\DC29\n\
      \\tabilities\CAN\SOH \ETX(\v2\ESC.SC2APIProtocol.AbilityDataR\tabilities\DC22\n\
      \\ENQunits\CAN\STX \ETX(\v2\FS.SC2APIProtocol.UnitTypeDataR\ENQunits\DC27\n\
      \\bupgrades\CAN\ETX \ETX(\v2\ESC.SC2APIProtocol.UpgradeDataR\bupgrades\DC2.\n\
      \\ENQbuffs\CAN\EOT \ETX(\v2\CAN.SC2APIProtocol.BuffDataR\ENQbuffs\DC24\n\
      \\aeffects\CAN\ENQ \ETX(\v2\SUB.SC2APIProtocol.EffectDataR\aeffects"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        abilities__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "abilities"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Data.AbilityData)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"abilities")) ::
              Data.ProtoLens.FieldDescriptor ResponseData
        units__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "units"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Data.UnitTypeData)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"units")) ::
              Data.ProtoLens.FieldDescriptor ResponseData
        upgrades__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "upgrades"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Data.UpgradeData)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"upgrades")) ::
              Data.ProtoLens.FieldDescriptor ResponseData
        buffs__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "buffs"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Data.BuffData)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"buffs")) ::
              Data.ProtoLens.FieldDescriptor ResponseData
        effects__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "effects"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Data.EffectData)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"effects")) ::
              Data.ProtoLens.FieldDescriptor ResponseData
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, abilities__field_descriptor),
           (Data.ProtoLens.Tag 2, units__field_descriptor),
           (Data.ProtoLens.Tag 3, upgrades__field_descriptor),
           (Data.ProtoLens.Tag 4, buffs__field_descriptor),
           (Data.ProtoLens.Tag 5, effects__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseData'_unknownFields
        (\ x__ y__ -> x__ {_ResponseData'_unknownFields = y__})
  defMessage
    = ResponseData'_constructor
        {_ResponseData'abilities = Data.Vector.Generic.empty,
         _ResponseData'units = Data.Vector.Generic.empty,
         _ResponseData'upgrades = Data.Vector.Generic.empty,
         _ResponseData'buffs = Data.Vector.Generic.empty,
         _ResponseData'effects = Data.Vector.Generic.empty,
         _ResponseData'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseData
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Proto.S2clientprotocol.Data.AbilityData
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Proto.S2clientprotocol.Data.BuffData
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Proto.S2clientprotocol.Data.EffectData
                   -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Proto.S2clientprotocol.Data.UnitTypeData
                      -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Proto.S2clientprotocol.Data.UpgradeData
                         -> Data.ProtoLens.Encoding.Bytes.Parser ResponseData
        loop
          x
          mutable'abilities
          mutable'buffs
          mutable'effects
          mutable'units
          mutable'upgrades
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'abilities <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                               mutable'abilities)
                      frozen'buffs <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'buffs)
                      frozen'effects <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'effects)
                      frozen'units <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'units)
                      frozen'upgrades <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'upgrades)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'abilities") frozen'abilities
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'buffs") frozen'buffs
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'effects") frozen'effects
                                    (Lens.Family2.set
                                       (Data.ProtoLens.Field.field @"vec'units") frozen'units
                                       (Lens.Family2.set
                                          (Data.ProtoLens.Field.field @"vec'upgrades")
                                          frozen'upgrades x))))))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "abilities"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'abilities y)
                                loop
                                  x v mutable'buffs mutable'effects mutable'units mutable'upgrades
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "units"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'units y)
                                loop
                                  x mutable'abilities mutable'buffs mutable'effects v
                                  mutable'upgrades
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "upgrades"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'upgrades y)
                                loop
                                  x mutable'abilities mutable'buffs mutable'effects mutable'units v
                        34
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "buffs"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'buffs y)
                                loop
                                  x mutable'abilities v mutable'effects mutable'units
                                  mutable'upgrades
                        42
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "effects"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'effects y)
                                loop
                                  x mutable'abilities mutable'buffs v mutable'units mutable'upgrades
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'abilities mutable'buffs mutable'effects mutable'units
                                  mutable'upgrades
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'abilities <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     Data.ProtoLens.Encoding.Growing.new
              mutable'buffs <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              mutable'effects <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              mutable'units <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              mutable'upgrades <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'abilities mutable'buffs
                mutable'effects mutable'units mutable'upgrades)
          "ResponseData"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'abilities") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'units") _x))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'upgrades") _x))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                 ((Prelude..)
                                    (\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Data.ProtoLens.encodeMessage _v))
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'buffs") _x))
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                            (\ _v
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                    ((Prelude..)
                                       (\ bs
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (Prelude.fromIntegral
                                                     (Data.ByteString.length bs)))
                                               (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                       Data.ProtoLens.encodeMessage _v))
                            (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'effects") _x))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData ResponseData where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseData'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponseData'abilities x__)
                (Control.DeepSeq.deepseq
                   (_ResponseData'units x__)
                   (Control.DeepSeq.deepseq
                      (_ResponseData'upgrades x__)
                      (Control.DeepSeq.deepseq
                         (_ResponseData'buffs x__)
                         (Control.DeepSeq.deepseq (_ResponseData'effects x__) ())))))
{- | Fields :
      -}
data ResponseDebug
  = ResponseDebug'_constructor {_ResponseDebug'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseDebug where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ResponseDebug where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseDebug"
  packedMessageDescriptor _
    = "\n\
      \\rResponseDebug"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseDebug'_unknownFields
        (\ x__ y__ -> x__ {_ResponseDebug'_unknownFields = y__})
  defMessage
    = ResponseDebug'_constructor {_ResponseDebug'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseDebug -> Data.ProtoLens.Encoding.Bytes.Parser ResponseDebug
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseDebug"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData ResponseDebug where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_ResponseDebug'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.mapName' @:: Lens' ResponseGameInfo Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'mapName' @:: Lens' ResponseGameInfo (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.modNames' @:: Lens' ResponseGameInfo [Data.Text.Text]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'modNames' @:: Lens' ResponseGameInfo (Data.Vector.Vector Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.localMapPath' @:: Lens' ResponseGameInfo Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'localMapPath' @:: Lens' ResponseGameInfo (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerInfo' @:: Lens' ResponseGameInfo [PlayerInfo]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'playerInfo' @:: Lens' ResponseGameInfo (Data.Vector.Vector PlayerInfo)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.startRaw' @:: Lens' ResponseGameInfo Proto.S2clientprotocol.Raw.StartRaw@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'startRaw' @:: Lens' ResponseGameInfo (Prelude.Maybe Proto.S2clientprotocol.Raw.StartRaw)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.options' @:: Lens' ResponseGameInfo InterfaceOptions@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'options' @:: Lens' ResponseGameInfo (Prelude.Maybe InterfaceOptions)@ -}
data ResponseGameInfo
  = ResponseGameInfo'_constructor {_ResponseGameInfo'mapName :: !(Prelude.Maybe Data.Text.Text),
                                   _ResponseGameInfo'modNames :: !(Data.Vector.Vector Data.Text.Text),
                                   _ResponseGameInfo'localMapPath :: !(Prelude.Maybe Data.Text.Text),
                                   _ResponseGameInfo'playerInfo :: !(Data.Vector.Vector PlayerInfo),
                                   _ResponseGameInfo'startRaw :: !(Prelude.Maybe Proto.S2clientprotocol.Raw.StartRaw),
                                   _ResponseGameInfo'options :: !(Prelude.Maybe InterfaceOptions),
                                   _ResponseGameInfo'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseGameInfo where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseGameInfo "mapName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'mapName
           (\ x__ y__ -> x__ {_ResponseGameInfo'mapName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseGameInfo "maybe'mapName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'mapName
           (\ x__ y__ -> x__ {_ResponseGameInfo'mapName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseGameInfo "modNames" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'modNames
           (\ x__ y__ -> x__ {_ResponseGameInfo'modNames = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseGameInfo "vec'modNames" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'modNames
           (\ x__ y__ -> x__ {_ResponseGameInfo'modNames = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseGameInfo "localMapPath" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'localMapPath
           (\ x__ y__ -> x__ {_ResponseGameInfo'localMapPath = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseGameInfo "maybe'localMapPath" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'localMapPath
           (\ x__ y__ -> x__ {_ResponseGameInfo'localMapPath = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseGameInfo "playerInfo" [PlayerInfo] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'playerInfo
           (\ x__ y__ -> x__ {_ResponseGameInfo'playerInfo = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseGameInfo "vec'playerInfo" (Data.Vector.Vector PlayerInfo) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'playerInfo
           (\ x__ y__ -> x__ {_ResponseGameInfo'playerInfo = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseGameInfo "startRaw" Proto.S2clientprotocol.Raw.StartRaw where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'startRaw
           (\ x__ y__ -> x__ {_ResponseGameInfo'startRaw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField ResponseGameInfo "maybe'startRaw" (Prelude.Maybe Proto.S2clientprotocol.Raw.StartRaw) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'startRaw
           (\ x__ y__ -> x__ {_ResponseGameInfo'startRaw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseGameInfo "options" InterfaceOptions where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'options
           (\ x__ y__ -> x__ {_ResponseGameInfo'options = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField ResponseGameInfo "maybe'options" (Prelude.Maybe InterfaceOptions) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseGameInfo'options
           (\ x__ y__ -> x__ {_ResponseGameInfo'options = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseGameInfo where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseGameInfo"
  packedMessageDescriptor _
    = "\n\
      \\DLEResponseGameInfo\DC2\EM\n\
      \\bmap_name\CAN\SOH \SOH(\tR\amapName\DC2\ESC\n\
      \\tmod_names\CAN\ACK \ETX(\tR\bmodNames\DC2$\n\
      \\SOlocal_map_path\CAN\STX \SOH(\tR\flocalMapPath\DC2;\n\
      \\vplayer_info\CAN\ETX \ETX(\v2\SUB.SC2APIProtocol.PlayerInfoR\n\
      \playerInfo\DC25\n\
      \\tstart_raw\CAN\EOT \SOH(\v2\CAN.SC2APIProtocol.StartRawR\bstartRaw\DC2:\n\
      \\aoptions\CAN\ENQ \SOH(\v2 .SC2APIProtocol.InterfaceOptionsR\aoptions"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        mapName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapName")) ::
              Data.ProtoLens.FieldDescriptor ResponseGameInfo
        modNames__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mod_names"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"modNames")) ::
              Data.ProtoLens.FieldDescriptor ResponseGameInfo
        localMapPath__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "local_map_path"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'localMapPath")) ::
              Data.ProtoLens.FieldDescriptor ResponseGameInfo
        playerInfo__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_info"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor PlayerInfo)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"playerInfo")) ::
              Data.ProtoLens.FieldDescriptor ResponseGameInfo
        startRaw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start_raw"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Raw.StartRaw)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'startRaw")) ::
              Data.ProtoLens.FieldDescriptor ResponseGameInfo
        options__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "options"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor InterfaceOptions)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'options")) ::
              Data.ProtoLens.FieldDescriptor ResponseGameInfo
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, mapName__field_descriptor),
           (Data.ProtoLens.Tag 6, modNames__field_descriptor),
           (Data.ProtoLens.Tag 2, localMapPath__field_descriptor),
           (Data.ProtoLens.Tag 3, playerInfo__field_descriptor),
           (Data.ProtoLens.Tag 4, startRaw__field_descriptor),
           (Data.ProtoLens.Tag 5, options__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseGameInfo'_unknownFields
        (\ x__ y__ -> x__ {_ResponseGameInfo'_unknownFields = y__})
  defMessage
    = ResponseGameInfo'_constructor
        {_ResponseGameInfo'mapName = Prelude.Nothing,
         _ResponseGameInfo'modNames = Data.Vector.Generic.empty,
         _ResponseGameInfo'localMapPath = Prelude.Nothing,
         _ResponseGameInfo'playerInfo = Data.Vector.Generic.empty,
         _ResponseGameInfo'startRaw = Prelude.Nothing,
         _ResponseGameInfo'options = Prelude.Nothing,
         _ResponseGameInfo'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseGameInfo
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld PlayerInfo
                -> Data.ProtoLens.Encoding.Bytes.Parser ResponseGameInfo
        loop x mutable'modNames mutable'playerInfo
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'modNames <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'modNames)
                      frozen'playerInfo <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'playerInfo)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'modNames") frozen'modNames
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'playerInfo") frozen'playerInfo
                                 x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "map_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"mapName") y x)
                                  mutable'modNames mutable'playerInfo
                        50
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                        Data.ProtoLens.Encoding.Bytes.getBytes
                                                          (Prelude.fromIntegral len)
                                            Data.ProtoLens.Encoding.Bytes.runEither
                                              (case Data.Text.Encoding.decodeUtf8' value of
                                                 (Prelude.Left err)
                                                   -> Prelude.Left (Prelude.show err)
                                                 (Prelude.Right r) -> Prelude.Right r))
                                        "mod_names"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'modNames y)
                                loop x v mutable'playerInfo
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "local_map_path"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"localMapPath") y x)
                                  mutable'modNames mutable'playerInfo
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "player_info"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'playerInfo y)
                                loop x mutable'modNames v
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "start_raw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"startRaw") y x)
                                  mutable'modNames mutable'playerInfo
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "options"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"options") y x)
                                  mutable'modNames mutable'playerInfo
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'modNames mutable'playerInfo
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'modNames <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              mutable'playerInfo <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'modNames mutable'playerInfo)
          "ResponseGameInfo"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mapName") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.Text.Encoding.encodeUtf8 _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'modNames") _x))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'localMapPath") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                                 ((Prelude..)
                                    (\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Data.ProtoLens.encodeMessage _v))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"vec'playerInfo") _x))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'startRaw") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.ProtoLens.encodeMessage _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'options") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.ProtoLens.encodeMessage _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData ResponseGameInfo where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseGameInfo'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponseGameInfo'mapName x__)
                (Control.DeepSeq.deepseq
                   (_ResponseGameInfo'modNames x__)
                   (Control.DeepSeq.deepseq
                      (_ResponseGameInfo'localMapPath x__)
                      (Control.DeepSeq.deepseq
                         (_ResponseGameInfo'playerInfo x__)
                         (Control.DeepSeq.deepseq
                            (_ResponseGameInfo'startRaw x__)
                            (Control.DeepSeq.deepseq (_ResponseGameInfo'options x__) ()))))))
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerId' @:: Lens' ResponseJoinGame Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'playerId' @:: Lens' ResponseJoinGame (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.error' @:: Lens' ResponseJoinGame ResponseJoinGame'Error@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'error' @:: Lens' ResponseJoinGame (Prelude.Maybe ResponseJoinGame'Error)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.errorDetails' @:: Lens' ResponseJoinGame Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'errorDetails' @:: Lens' ResponseJoinGame (Prelude.Maybe Data.Text.Text)@ -}
data ResponseJoinGame
  = ResponseJoinGame'_constructor {_ResponseJoinGame'playerId :: !(Prelude.Maybe Data.Word.Word32),
                                   _ResponseJoinGame'error :: !(Prelude.Maybe ResponseJoinGame'Error),
                                   _ResponseJoinGame'errorDetails :: !(Prelude.Maybe Data.Text.Text),
                                   _ResponseJoinGame'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseJoinGame where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseJoinGame "playerId" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseJoinGame'playerId
           (\ x__ y__ -> x__ {_ResponseJoinGame'playerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseJoinGame "maybe'playerId" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseJoinGame'playerId
           (\ x__ y__ -> x__ {_ResponseJoinGame'playerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseJoinGame "error" ResponseJoinGame'Error where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseJoinGame'error
           (\ x__ y__ -> x__ {_ResponseJoinGame'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseJoinGame "maybe'error" (Prelude.Maybe ResponseJoinGame'Error) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseJoinGame'error
           (\ x__ y__ -> x__ {_ResponseJoinGame'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseJoinGame "errorDetails" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseJoinGame'errorDetails
           (\ x__ y__ -> x__ {_ResponseJoinGame'errorDetails = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseJoinGame "maybe'errorDetails" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseJoinGame'errorDetails
           (\ x__ y__ -> x__ {_ResponseJoinGame'errorDetails = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseJoinGame where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseJoinGame"
  packedMessageDescriptor _
    = "\n\
      \\DLEResponseJoinGame\DC2\ESC\n\
      \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\DC2<\n\
      \\ENQerror\CAN\STX \SOH(\SO2&.SC2APIProtocol.ResponseJoinGame.ErrorR\ENQerror\DC2#\n\
      \\rerror_details\CAN\ETX \SOH(\tR\ferrorDetails\"\140\STX\n\
      \\ENQError\DC2\CAN\n\
      \\DC4MissingParticipation\DLE\SOH\DC2\ESC\n\
      \\ETBInvalidObservedPlayerId\DLE\STX\DC2\DC2\n\
      \\SOMissingOptions\DLE\ETX\DC2\DLE\n\
      \\fMissingPorts\DLE\EOT\DC2\f\n\
      \\bGameFull\DLE\ENQ\DC2\SI\n\
      \\vLaunchError\DLE\ACK\DC2\SYN\n\
      \\DC2FeatureUnsupported\DLE\a\DC2\DC2\n\
      \\SONoSpaceForUser\DLE\b\DC2\DC3\n\
      \\SIMapDoesNotExist\DLE\t\DC2\DC1\n\
      \\rCannotOpenMap\DLE\n\
      \\DC2\DC1\n\
      \\rChecksumError\DLE\v\DC2\DLE\n\
      \\fNetworkError\DLE\f\DC2\SO\n\
      \\n\
      \OtherError\DLE\r"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        playerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'playerId")) ::
              Data.ProtoLens.FieldDescriptor ResponseJoinGame
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseJoinGame'Error)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor ResponseJoinGame
        errorDetails__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_details"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorDetails")) ::
              Data.ProtoLens.FieldDescriptor ResponseJoinGame
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, playerId__field_descriptor),
           (Data.ProtoLens.Tag 2, error__field_descriptor),
           (Data.ProtoLens.Tag 3, errorDetails__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseJoinGame'_unknownFields
        (\ x__ y__ -> x__ {_ResponseJoinGame'_unknownFields = y__})
  defMessage
    = ResponseJoinGame'_constructor
        {_ResponseJoinGame'playerId = Prelude.Nothing,
         _ResponseJoinGame'error = Prelude.Nothing,
         _ResponseJoinGame'errorDetails = Prelude.Nothing,
         _ResponseJoinGame'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseJoinGame
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseJoinGame
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "player_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"playerId") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "error_details"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorDetails") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseJoinGame"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'playerId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Prelude.fromEnum _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'errorDetails") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData ResponseJoinGame where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseJoinGame'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponseJoinGame'playerId x__)
                (Control.DeepSeq.deepseq
                   (_ResponseJoinGame'error x__)
                   (Control.DeepSeq.deepseq (_ResponseJoinGame'errorDetails x__) ())))
data ResponseJoinGame'Error
  = ResponseJoinGame'MissingParticipation |
    ResponseJoinGame'InvalidObservedPlayerId |
    ResponseJoinGame'MissingOptions |
    ResponseJoinGame'MissingPorts |
    ResponseJoinGame'GameFull |
    ResponseJoinGame'LaunchError |
    ResponseJoinGame'FeatureUnsupported |
    ResponseJoinGame'NoSpaceForUser |
    ResponseJoinGame'MapDoesNotExist |
    ResponseJoinGame'CannotOpenMap |
    ResponseJoinGame'ChecksumError |
    ResponseJoinGame'NetworkError |
    ResponseJoinGame'OtherError
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ResponseJoinGame'Error where
  maybeToEnum 1 = Prelude.Just ResponseJoinGame'MissingParticipation
  maybeToEnum 2
    = Prelude.Just ResponseJoinGame'InvalidObservedPlayerId
  maybeToEnum 3 = Prelude.Just ResponseJoinGame'MissingOptions
  maybeToEnum 4 = Prelude.Just ResponseJoinGame'MissingPorts
  maybeToEnum 5 = Prelude.Just ResponseJoinGame'GameFull
  maybeToEnum 6 = Prelude.Just ResponseJoinGame'LaunchError
  maybeToEnum 7 = Prelude.Just ResponseJoinGame'FeatureUnsupported
  maybeToEnum 8 = Prelude.Just ResponseJoinGame'NoSpaceForUser
  maybeToEnum 9 = Prelude.Just ResponseJoinGame'MapDoesNotExist
  maybeToEnum 10 = Prelude.Just ResponseJoinGame'CannotOpenMap
  maybeToEnum 11 = Prelude.Just ResponseJoinGame'ChecksumError
  maybeToEnum 12 = Prelude.Just ResponseJoinGame'NetworkError
  maybeToEnum 13 = Prelude.Just ResponseJoinGame'OtherError
  maybeToEnum _ = Prelude.Nothing
  showEnum ResponseJoinGame'MissingParticipation
    = "MissingParticipation"
  showEnum ResponseJoinGame'InvalidObservedPlayerId
    = "InvalidObservedPlayerId"
  showEnum ResponseJoinGame'MissingOptions = "MissingOptions"
  showEnum ResponseJoinGame'MissingPorts = "MissingPorts"
  showEnum ResponseJoinGame'GameFull = "GameFull"
  showEnum ResponseJoinGame'LaunchError = "LaunchError"
  showEnum ResponseJoinGame'FeatureUnsupported = "FeatureUnsupported"
  showEnum ResponseJoinGame'NoSpaceForUser = "NoSpaceForUser"
  showEnum ResponseJoinGame'MapDoesNotExist = "MapDoesNotExist"
  showEnum ResponseJoinGame'CannotOpenMap = "CannotOpenMap"
  showEnum ResponseJoinGame'ChecksumError = "ChecksumError"
  showEnum ResponseJoinGame'NetworkError = "NetworkError"
  showEnum ResponseJoinGame'OtherError = "OtherError"
  readEnum k
    | (Prelude.==) k "MissingParticipation"
    = Prelude.Just ResponseJoinGame'MissingParticipation
    | (Prelude.==) k "InvalidObservedPlayerId"
    = Prelude.Just ResponseJoinGame'InvalidObservedPlayerId
    | (Prelude.==) k "MissingOptions"
    = Prelude.Just ResponseJoinGame'MissingOptions
    | (Prelude.==) k "MissingPorts"
    = Prelude.Just ResponseJoinGame'MissingPorts
    | (Prelude.==) k "GameFull"
    = Prelude.Just ResponseJoinGame'GameFull
    | (Prelude.==) k "LaunchError"
    = Prelude.Just ResponseJoinGame'LaunchError
    | (Prelude.==) k "FeatureUnsupported"
    = Prelude.Just ResponseJoinGame'FeatureUnsupported
    | (Prelude.==) k "NoSpaceForUser"
    = Prelude.Just ResponseJoinGame'NoSpaceForUser
    | (Prelude.==) k "MapDoesNotExist"
    = Prelude.Just ResponseJoinGame'MapDoesNotExist
    | (Prelude.==) k "CannotOpenMap"
    = Prelude.Just ResponseJoinGame'CannotOpenMap
    | (Prelude.==) k "ChecksumError"
    = Prelude.Just ResponseJoinGame'ChecksumError
    | (Prelude.==) k "NetworkError"
    = Prelude.Just ResponseJoinGame'NetworkError
    | (Prelude.==) k "OtherError"
    = Prelude.Just ResponseJoinGame'OtherError
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ResponseJoinGame'Error where
  minBound = ResponseJoinGame'MissingParticipation
  maxBound = ResponseJoinGame'OtherError
instance Prelude.Enum ResponseJoinGame'Error where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Error: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum ResponseJoinGame'MissingParticipation = 1
  fromEnum ResponseJoinGame'InvalidObservedPlayerId = 2
  fromEnum ResponseJoinGame'MissingOptions = 3
  fromEnum ResponseJoinGame'MissingPorts = 4
  fromEnum ResponseJoinGame'GameFull = 5
  fromEnum ResponseJoinGame'LaunchError = 6
  fromEnum ResponseJoinGame'FeatureUnsupported = 7
  fromEnum ResponseJoinGame'NoSpaceForUser = 8
  fromEnum ResponseJoinGame'MapDoesNotExist = 9
  fromEnum ResponseJoinGame'CannotOpenMap = 10
  fromEnum ResponseJoinGame'ChecksumError = 11
  fromEnum ResponseJoinGame'NetworkError = 12
  fromEnum ResponseJoinGame'OtherError = 13
  succ ResponseJoinGame'OtherError
    = Prelude.error
        "ResponseJoinGame'Error.succ: bad argument ResponseJoinGame'OtherError. This value would be out of bounds."
  succ ResponseJoinGame'MissingParticipation
    = ResponseJoinGame'InvalidObservedPlayerId
  succ ResponseJoinGame'InvalidObservedPlayerId
    = ResponseJoinGame'MissingOptions
  succ ResponseJoinGame'MissingOptions
    = ResponseJoinGame'MissingPorts
  succ ResponseJoinGame'MissingPorts = ResponseJoinGame'GameFull
  succ ResponseJoinGame'GameFull = ResponseJoinGame'LaunchError
  succ ResponseJoinGame'LaunchError
    = ResponseJoinGame'FeatureUnsupported
  succ ResponseJoinGame'FeatureUnsupported
    = ResponseJoinGame'NoSpaceForUser
  succ ResponseJoinGame'NoSpaceForUser
    = ResponseJoinGame'MapDoesNotExist
  succ ResponseJoinGame'MapDoesNotExist
    = ResponseJoinGame'CannotOpenMap
  succ ResponseJoinGame'CannotOpenMap
    = ResponseJoinGame'ChecksumError
  succ ResponseJoinGame'ChecksumError = ResponseJoinGame'NetworkError
  succ ResponseJoinGame'NetworkError = ResponseJoinGame'OtherError
  pred ResponseJoinGame'MissingParticipation
    = Prelude.error
        "ResponseJoinGame'Error.pred: bad argument ResponseJoinGame'MissingParticipation. This value would be out of bounds."
  pred ResponseJoinGame'InvalidObservedPlayerId
    = ResponseJoinGame'MissingParticipation
  pred ResponseJoinGame'MissingOptions
    = ResponseJoinGame'InvalidObservedPlayerId
  pred ResponseJoinGame'MissingPorts
    = ResponseJoinGame'MissingOptions
  pred ResponseJoinGame'GameFull = ResponseJoinGame'MissingPorts
  pred ResponseJoinGame'LaunchError = ResponseJoinGame'GameFull
  pred ResponseJoinGame'FeatureUnsupported
    = ResponseJoinGame'LaunchError
  pred ResponseJoinGame'NoSpaceForUser
    = ResponseJoinGame'FeatureUnsupported
  pred ResponseJoinGame'MapDoesNotExist
    = ResponseJoinGame'NoSpaceForUser
  pred ResponseJoinGame'CannotOpenMap
    = ResponseJoinGame'MapDoesNotExist
  pred ResponseJoinGame'ChecksumError
    = ResponseJoinGame'CannotOpenMap
  pred ResponseJoinGame'NetworkError = ResponseJoinGame'ChecksumError
  pred ResponseJoinGame'OtherError = ResponseJoinGame'NetworkError
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ResponseJoinGame'Error where
  fieldDefault = ResponseJoinGame'MissingParticipation
instance Control.DeepSeq.NFData ResponseJoinGame'Error where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
      -}
data ResponseLeaveGame
  = ResponseLeaveGame'_constructor {_ResponseLeaveGame'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseLeaveGame where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ResponseLeaveGame where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseLeaveGame"
  packedMessageDescriptor _
    = "\n\
      \\DC1ResponseLeaveGame"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseLeaveGame'_unknownFields
        (\ x__ y__ -> x__ {_ResponseLeaveGame'_unknownFields = y__})
  defMessage
    = ResponseLeaveGame'_constructor
        {_ResponseLeaveGame'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseLeaveGame
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseLeaveGame
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseLeaveGame"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData ResponseLeaveGame where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseLeaveGame'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.error' @:: Lens' ResponseMapCommand ResponseMapCommand'Error@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'error' @:: Lens' ResponseMapCommand (Prelude.Maybe ResponseMapCommand'Error)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.errorDetails' @:: Lens' ResponseMapCommand Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'errorDetails' @:: Lens' ResponseMapCommand (Prelude.Maybe Data.Text.Text)@ -}
data ResponseMapCommand
  = ResponseMapCommand'_constructor {_ResponseMapCommand'error :: !(Prelude.Maybe ResponseMapCommand'Error),
                                     _ResponseMapCommand'errorDetails :: !(Prelude.Maybe Data.Text.Text),
                                     _ResponseMapCommand'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseMapCommand where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseMapCommand "error" ResponseMapCommand'Error where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseMapCommand'error
           (\ x__ y__ -> x__ {_ResponseMapCommand'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseMapCommand "maybe'error" (Prelude.Maybe ResponseMapCommand'Error) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseMapCommand'error
           (\ x__ y__ -> x__ {_ResponseMapCommand'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseMapCommand "errorDetails" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseMapCommand'errorDetails
           (\ x__ y__ -> x__ {_ResponseMapCommand'errorDetails = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseMapCommand "maybe'errorDetails" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseMapCommand'errorDetails
           (\ x__ y__ -> x__ {_ResponseMapCommand'errorDetails = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseMapCommand where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseMapCommand"
  packedMessageDescriptor _
    = "\n\
      \\DC2ResponseMapCommand\DC2>\n\
      \\ENQerror\CAN\SOH \SOH(\SO2(.SC2APIProtocol.ResponseMapCommand.ErrorR\ENQerror\DC2#\n\
      \\rerror_details\CAN\STX \SOH(\tR\ferrorDetails\"\ESC\n\
      \\ENQError\DC2\DC2\n\
      \\SONoTriggerError\DLE\SOH"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseMapCommand'Error)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor ResponseMapCommand
        errorDetails__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_details"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorDetails")) ::
              Data.ProtoLens.FieldDescriptor ResponseMapCommand
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, error__field_descriptor),
           (Data.ProtoLens.Tag 2, errorDetails__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseMapCommand'_unknownFields
        (\ x__ y__ -> x__ {_ResponseMapCommand'_unknownFields = y__})
  defMessage
    = ResponseMapCommand'_constructor
        {_ResponseMapCommand'error = Prelude.Nothing,
         _ResponseMapCommand'errorDetails = Prelude.Nothing,
         _ResponseMapCommand'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseMapCommand
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseMapCommand
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "error_details"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorDetails") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseMapCommand"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Prelude.fromEnum _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'errorDetails") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData ResponseMapCommand where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseMapCommand'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponseMapCommand'error x__)
                (Control.DeepSeq.deepseq
                   (_ResponseMapCommand'errorDetails x__) ()))
data ResponseMapCommand'Error
  = ResponseMapCommand'NoTriggerError
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ResponseMapCommand'Error where
  maybeToEnum 1 = Prelude.Just ResponseMapCommand'NoTriggerError
  maybeToEnum _ = Prelude.Nothing
  showEnum ResponseMapCommand'NoTriggerError = "NoTriggerError"
  readEnum k
    | (Prelude.==) k "NoTriggerError"
    = Prelude.Just ResponseMapCommand'NoTriggerError
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ResponseMapCommand'Error where
  minBound = ResponseMapCommand'NoTriggerError
  maxBound = ResponseMapCommand'NoTriggerError
instance Prelude.Enum ResponseMapCommand'Error where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Error: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum ResponseMapCommand'NoTriggerError = 1
  succ ResponseMapCommand'NoTriggerError
    = Prelude.error
        "ResponseMapCommand'Error.succ: bad argument ResponseMapCommand'NoTriggerError. This value would be out of bounds."
  pred ResponseMapCommand'NoTriggerError
    = Prelude.error
        "ResponseMapCommand'Error.pred: bad argument ResponseMapCommand'NoTriggerError. This value would be out of bounds."
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ResponseMapCommand'Error where
  fieldDefault = ResponseMapCommand'NoTriggerError
instance Control.DeepSeq.NFData ResponseMapCommand'Error where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.actions' @:: Lens' ResponseObservation [Action]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'actions' @:: Lens' ResponseObservation (Data.Vector.Vector Action)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.actionErrors' @:: Lens' ResponseObservation [ActionError]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'actionErrors' @:: Lens' ResponseObservation (Data.Vector.Vector ActionError)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.observation' @:: Lens' ResponseObservation Observation@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'observation' @:: Lens' ResponseObservation (Prelude.Maybe Observation)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerResult' @:: Lens' ResponseObservation [PlayerResult]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'playerResult' @:: Lens' ResponseObservation (Data.Vector.Vector PlayerResult)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.chat' @:: Lens' ResponseObservation [ChatReceived]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'chat' @:: Lens' ResponseObservation (Data.Vector.Vector ChatReceived)@ -}
data ResponseObservation
  = ResponseObservation'_constructor {_ResponseObservation'actions :: !(Data.Vector.Vector Action),
                                      _ResponseObservation'actionErrors :: !(Data.Vector.Vector ActionError),
                                      _ResponseObservation'observation :: !(Prelude.Maybe Observation),
                                      _ResponseObservation'playerResult :: !(Data.Vector.Vector PlayerResult),
                                      _ResponseObservation'chat :: !(Data.Vector.Vector ChatReceived),
                                      _ResponseObservation'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseObservation where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseObservation "actions" [Action] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseObservation'actions
           (\ x__ y__ -> x__ {_ResponseObservation'actions = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseObservation "vec'actions" (Data.Vector.Vector Action) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseObservation'actions
           (\ x__ y__ -> x__ {_ResponseObservation'actions = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseObservation "actionErrors" [ActionError] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseObservation'actionErrors
           (\ x__ y__ -> x__ {_ResponseObservation'actionErrors = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseObservation "vec'actionErrors" (Data.Vector.Vector ActionError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseObservation'actionErrors
           (\ x__ y__ -> x__ {_ResponseObservation'actionErrors = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseObservation "observation" Observation where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseObservation'observation
           (\ x__ y__ -> x__ {_ResponseObservation'observation = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField ResponseObservation "maybe'observation" (Prelude.Maybe Observation) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseObservation'observation
           (\ x__ y__ -> x__ {_ResponseObservation'observation = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseObservation "playerResult" [PlayerResult] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseObservation'playerResult
           (\ x__ y__ -> x__ {_ResponseObservation'playerResult = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseObservation "vec'playerResult" (Data.Vector.Vector PlayerResult) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseObservation'playerResult
           (\ x__ y__ -> x__ {_ResponseObservation'playerResult = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseObservation "chat" [ChatReceived] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseObservation'chat
           (\ x__ y__ -> x__ {_ResponseObservation'chat = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseObservation "vec'chat" (Data.Vector.Vector ChatReceived) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseObservation'chat
           (\ x__ y__ -> x__ {_ResponseObservation'chat = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseObservation where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseObservation"
  packedMessageDescriptor _
    = "\n\
      \\DC3ResponseObservation\DC20\n\
      \\aactions\CAN\SOH \ETX(\v2\SYN.SC2APIProtocol.ActionR\aactions\DC2@\n\
      \\raction_errors\CAN\STX \ETX(\v2\ESC.SC2APIProtocol.ActionErrorR\factionErrors\DC2=\n\
      \\vobservation\CAN\ETX \SOH(\v2\ESC.SC2APIProtocol.ObservationR\vobservation\DC2A\n\
      \\rplayer_result\CAN\EOT \ETX(\v2\FS.SC2APIProtocol.PlayerResultR\fplayerResult\DC20\n\
      \\EOTchat\CAN\ENQ \ETX(\v2\FS.SC2APIProtocol.ChatReceivedR\EOTchat"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        actions__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "actions"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Action)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"actions")) ::
              Data.ProtoLens.FieldDescriptor ResponseObservation
        actionErrors__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "action_errors"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ActionError)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"actionErrors")) ::
              Data.ProtoLens.FieldDescriptor ResponseObservation
        observation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "observation"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Observation)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'observation")) ::
              Data.ProtoLens.FieldDescriptor ResponseObservation
        playerResult__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_result"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor PlayerResult)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"playerResult")) ::
              Data.ProtoLens.FieldDescriptor ResponseObservation
        chat__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "chat"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ChatReceived)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"chat")) ::
              Data.ProtoLens.FieldDescriptor ResponseObservation
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, actions__field_descriptor),
           (Data.ProtoLens.Tag 2, actionErrors__field_descriptor),
           (Data.ProtoLens.Tag 3, observation__field_descriptor),
           (Data.ProtoLens.Tag 4, playerResult__field_descriptor),
           (Data.ProtoLens.Tag 5, chat__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseObservation'_unknownFields
        (\ x__ y__ -> x__ {_ResponseObservation'_unknownFields = y__})
  defMessage
    = ResponseObservation'_constructor
        {_ResponseObservation'actions = Data.Vector.Generic.empty,
         _ResponseObservation'actionErrors = Data.Vector.Generic.empty,
         _ResponseObservation'observation = Prelude.Nothing,
         _ResponseObservation'playerResult = Data.Vector.Generic.empty,
         _ResponseObservation'chat = Data.Vector.Generic.empty,
         _ResponseObservation'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseObservation
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld ActionError
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Action
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld ChatReceived
                   -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld PlayerResult
                      -> Data.ProtoLens.Encoding.Bytes.Parser ResponseObservation
        loop
          x
          mutable'actionErrors
          mutable'actions
          mutable'chat
          mutable'playerResult
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'actionErrors <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                               (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                  mutable'actionErrors)
                      frozen'actions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'actions)
                      frozen'chat <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'chat)
                      frozen'playerResult <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                               (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                  mutable'playerResult)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'actionErrors")
                              frozen'actionErrors
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'actions") frozen'actions
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'chat") frozen'chat
                                    (Lens.Family2.set
                                       (Data.ProtoLens.Field.field @"vec'playerResult")
                                       frozen'playerResult x)))))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "actions"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'actions y)
                                loop x mutable'actionErrors v mutable'chat mutable'playerResult
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "action_errors"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'actionErrors y)
                                loop x v mutable'actions mutable'chat mutable'playerResult
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "observation"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"observation") y x)
                                  mutable'actionErrors mutable'actions mutable'chat
                                  mutable'playerResult
                        34
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "player_result"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'playerResult y)
                                loop x mutable'actionErrors mutable'actions mutable'chat v
                        42
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "chat"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'chat y)
                                loop x mutable'actionErrors mutable'actions v mutable'playerResult
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'actionErrors mutable'actions mutable'chat
                                  mutable'playerResult
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'actionErrors <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        Data.ProtoLens.Encoding.Growing.new
              mutable'actions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              mutable'chat <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              mutable'playerResult <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'actionErrors mutable'actions
                mutable'chat mutable'playerResult)
          "ResponseObservation"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'actions") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'actionErrors") _x))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'observation") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage _v))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                 ((Prelude..)
                                    (\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Data.ProtoLens.encodeMessage _v))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"vec'playerResult") _x))
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                            (\ _v
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                    ((Prelude..)
                                       (\ bs
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (Prelude.fromIntegral
                                                     (Data.ByteString.length bs)))
                                               (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                       Data.ProtoLens.encodeMessage _v))
                            (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'chat") _x))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData ResponseObservation where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseObservation'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponseObservation'actions x__)
                (Control.DeepSeq.deepseq
                   (_ResponseObservation'actionErrors x__)
                   (Control.DeepSeq.deepseq
                      (_ResponseObservation'observation x__)
                      (Control.DeepSeq.deepseq
                         (_ResponseObservation'playerResult x__)
                         (Control.DeepSeq.deepseq (_ResponseObservation'chat x__) ())))))
{- | Fields :
      -}
data ResponseObserverAction
  = ResponseObserverAction'_constructor {_ResponseObserverAction'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseObserverAction where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ResponseObserverAction where
  messageName _
    = Data.Text.pack "SC2APIProtocol.ResponseObserverAction"
  packedMessageDescriptor _
    = "\n\
      \\SYNResponseObserverAction"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseObserverAction'_unknownFields
        (\ x__ y__ -> x__ {_ResponseObserverAction'_unknownFields = y__})
  defMessage
    = ResponseObserverAction'_constructor
        {_ResponseObserverAction'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseObserverAction
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseObserverAction
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseObserverAction"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData ResponseObserverAction where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseObserverAction'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.gameVersion' @:: Lens' ResponsePing Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'gameVersion' @:: Lens' ResponsePing (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.dataVersion' @:: Lens' ResponsePing Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'dataVersion' @:: Lens' ResponsePing (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.dataBuild' @:: Lens' ResponsePing Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'dataBuild' @:: Lens' ResponsePing (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.baseBuild' @:: Lens' ResponsePing Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'baseBuild' @:: Lens' ResponsePing (Prelude.Maybe Data.Word.Word32)@ -}
data ResponsePing
  = ResponsePing'_constructor {_ResponsePing'gameVersion :: !(Prelude.Maybe Data.Text.Text),
                               _ResponsePing'dataVersion :: !(Prelude.Maybe Data.Text.Text),
                               _ResponsePing'dataBuild :: !(Prelude.Maybe Data.Word.Word32),
                               _ResponsePing'baseBuild :: !(Prelude.Maybe Data.Word.Word32),
                               _ResponsePing'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponsePing where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponsePing "gameVersion" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponsePing'gameVersion
           (\ x__ y__ -> x__ {_ResponsePing'gameVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponsePing "maybe'gameVersion" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponsePing'gameVersion
           (\ x__ y__ -> x__ {_ResponsePing'gameVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponsePing "dataVersion" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponsePing'dataVersion
           (\ x__ y__ -> x__ {_ResponsePing'dataVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponsePing "maybe'dataVersion" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponsePing'dataVersion
           (\ x__ y__ -> x__ {_ResponsePing'dataVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponsePing "dataBuild" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponsePing'dataBuild
           (\ x__ y__ -> x__ {_ResponsePing'dataBuild = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponsePing "maybe'dataBuild" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponsePing'dataBuild
           (\ x__ y__ -> x__ {_ResponsePing'dataBuild = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponsePing "baseBuild" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponsePing'baseBuild
           (\ x__ y__ -> x__ {_ResponsePing'baseBuild = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponsePing "maybe'baseBuild" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponsePing'baseBuild
           (\ x__ y__ -> x__ {_ResponsePing'baseBuild = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponsePing where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponsePing"
  packedMessageDescriptor _
    = "\n\
      \\fResponsePing\DC2!\n\
      \\fgame_version\CAN\SOH \SOH(\tR\vgameVersion\DC2!\n\
      \\fdata_version\CAN\STX \SOH(\tR\vdataVersion\DC2\GS\n\
      \\n\
      \data_build\CAN\ETX \SOH(\rR\tdataBuild\DC2\GS\n\
      \\n\
      \base_build\CAN\EOT \SOH(\rR\tbaseBuild"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        gameVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "game_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gameVersion")) ::
              Data.ProtoLens.FieldDescriptor ResponsePing
        dataVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "data_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dataVersion")) ::
              Data.ProtoLens.FieldDescriptor ResponsePing
        dataBuild__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "data_build"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dataBuild")) ::
              Data.ProtoLens.FieldDescriptor ResponsePing
        baseBuild__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "base_build"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'baseBuild")) ::
              Data.ProtoLens.FieldDescriptor ResponsePing
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, gameVersion__field_descriptor),
           (Data.ProtoLens.Tag 2, dataVersion__field_descriptor),
           (Data.ProtoLens.Tag 3, dataBuild__field_descriptor),
           (Data.ProtoLens.Tag 4, baseBuild__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponsePing'_unknownFields
        (\ x__ y__ -> x__ {_ResponsePing'_unknownFields = y__})
  defMessage
    = ResponsePing'_constructor
        {_ResponsePing'gameVersion = Prelude.Nothing,
         _ResponsePing'dataVersion = Prelude.Nothing,
         _ResponsePing'dataBuild = Prelude.Nothing,
         _ResponsePing'baseBuild = Prelude.Nothing,
         _ResponsePing'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponsePing -> Data.ProtoLens.Encoding.Bytes.Parser ResponsePing
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "game_version"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"gameVersion") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "data_version"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"dataVersion") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "data_build"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"dataBuild") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "base_build"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"baseBuild") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponsePing"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'gameVersion") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'dataVersion") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'dataBuild") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'baseBuild") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData ResponsePing where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponsePing'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponsePing'gameVersion x__)
                (Control.DeepSeq.deepseq
                   (_ResponsePing'dataVersion x__)
                   (Control.DeepSeq.deepseq
                      (_ResponsePing'dataBuild x__)
                      (Control.DeepSeq.deepseq (_ResponsePing'baseBuild x__) ()))))
{- | Fields :
      -}
data ResponseQuickLoad
  = ResponseQuickLoad'_constructor {_ResponseQuickLoad'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseQuickLoad where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ResponseQuickLoad where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseQuickLoad"
  packedMessageDescriptor _
    = "\n\
      \\DC1ResponseQuickLoad"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseQuickLoad'_unknownFields
        (\ x__ y__ -> x__ {_ResponseQuickLoad'_unknownFields = y__})
  defMessage
    = ResponseQuickLoad'_constructor
        {_ResponseQuickLoad'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseQuickLoad
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseQuickLoad
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseQuickLoad"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData ResponseQuickLoad where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseQuickLoad'_unknownFields x__) ()
{- | Fields :
      -}
data ResponseQuickSave
  = ResponseQuickSave'_constructor {_ResponseQuickSave'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseQuickSave where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ResponseQuickSave where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseQuickSave"
  packedMessageDescriptor _
    = "\n\
      \\DC1ResponseQuickSave"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseQuickSave'_unknownFields
        (\ x__ y__ -> x__ {_ResponseQuickSave'_unknownFields = y__})
  defMessage
    = ResponseQuickSave'_constructor
        {_ResponseQuickSave'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseQuickSave
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseQuickSave
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseQuickSave"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData ResponseQuickSave where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseQuickSave'_unknownFields x__) ()
{- | Fields :
      -}
data ResponseQuit
  = ResponseQuit'_constructor {_ResponseQuit'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseQuit where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ResponseQuit where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseQuit"
  packedMessageDescriptor _
    = "\n\
      \\fResponseQuit"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseQuit'_unknownFields
        (\ x__ y__ -> x__ {_ResponseQuit'_unknownFields = y__})
  defMessage
    = ResponseQuit'_constructor {_ResponseQuit'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseQuit -> Data.ProtoLens.Encoding.Bytes.Parser ResponseQuit
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseQuit"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData ResponseQuit where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_ResponseQuit'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.mapName' @:: Lens' ResponseReplayInfo Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'mapName' @:: Lens' ResponseReplayInfo (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.localMapPath' @:: Lens' ResponseReplayInfo Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'localMapPath' @:: Lens' ResponseReplayInfo (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.playerInfo' @:: Lens' ResponseReplayInfo [PlayerInfoExtra]@
         * 'Proto.S2clientprotocol.Sc2api_Fields.vec'playerInfo' @:: Lens' ResponseReplayInfo (Data.Vector.Vector PlayerInfoExtra)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.gameDurationLoops' @:: Lens' ResponseReplayInfo Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'gameDurationLoops' @:: Lens' ResponseReplayInfo (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.gameDurationSeconds' @:: Lens' ResponseReplayInfo Prelude.Float@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'gameDurationSeconds' @:: Lens' ResponseReplayInfo (Prelude.Maybe Prelude.Float)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.gameVersion' @:: Lens' ResponseReplayInfo Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'gameVersion' @:: Lens' ResponseReplayInfo (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.dataVersion' @:: Lens' ResponseReplayInfo Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'dataVersion' @:: Lens' ResponseReplayInfo (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.dataBuild' @:: Lens' ResponseReplayInfo Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'dataBuild' @:: Lens' ResponseReplayInfo (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.baseBuild' @:: Lens' ResponseReplayInfo Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'baseBuild' @:: Lens' ResponseReplayInfo (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.error' @:: Lens' ResponseReplayInfo ResponseReplayInfo'Error@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'error' @:: Lens' ResponseReplayInfo (Prelude.Maybe ResponseReplayInfo'Error)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.errorDetails' @:: Lens' ResponseReplayInfo Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'errorDetails' @:: Lens' ResponseReplayInfo (Prelude.Maybe Data.Text.Text)@ -}
data ResponseReplayInfo
  = ResponseReplayInfo'_constructor {_ResponseReplayInfo'mapName :: !(Prelude.Maybe Data.Text.Text),
                                     _ResponseReplayInfo'localMapPath :: !(Prelude.Maybe Data.Text.Text),
                                     _ResponseReplayInfo'playerInfo :: !(Data.Vector.Vector PlayerInfoExtra),
                                     _ResponseReplayInfo'gameDurationLoops :: !(Prelude.Maybe Data.Word.Word32),
                                     _ResponseReplayInfo'gameDurationSeconds :: !(Prelude.Maybe Prelude.Float),
                                     _ResponseReplayInfo'gameVersion :: !(Prelude.Maybe Data.Text.Text),
                                     _ResponseReplayInfo'dataVersion :: !(Prelude.Maybe Data.Text.Text),
                                     _ResponseReplayInfo'dataBuild :: !(Prelude.Maybe Data.Word.Word32),
                                     _ResponseReplayInfo'baseBuild :: !(Prelude.Maybe Data.Word.Word32),
                                     _ResponseReplayInfo'error :: !(Prelude.Maybe ResponseReplayInfo'Error),
                                     _ResponseReplayInfo'errorDetails :: !(Prelude.Maybe Data.Text.Text),
                                     _ResponseReplayInfo'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseReplayInfo where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "mapName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'mapName
           (\ x__ y__ -> x__ {_ResponseReplayInfo'mapName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "maybe'mapName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'mapName
           (\ x__ y__ -> x__ {_ResponseReplayInfo'mapName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "localMapPath" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'localMapPath
           (\ x__ y__ -> x__ {_ResponseReplayInfo'localMapPath = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "maybe'localMapPath" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'localMapPath
           (\ x__ y__ -> x__ {_ResponseReplayInfo'localMapPath = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "playerInfo" [PlayerInfoExtra] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'playerInfo
           (\ x__ y__ -> x__ {_ResponseReplayInfo'playerInfo = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "vec'playerInfo" (Data.Vector.Vector PlayerInfoExtra) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'playerInfo
           (\ x__ y__ -> x__ {_ResponseReplayInfo'playerInfo = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "gameDurationLoops" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'gameDurationLoops
           (\ x__ y__ -> x__ {_ResponseReplayInfo'gameDurationLoops = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "maybe'gameDurationLoops" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'gameDurationLoops
           (\ x__ y__ -> x__ {_ResponseReplayInfo'gameDurationLoops = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "gameDurationSeconds" Prelude.Float where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'gameDurationSeconds
           (\ x__ y__ -> x__ {_ResponseReplayInfo'gameDurationSeconds = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "maybe'gameDurationSeconds" (Prelude.Maybe Prelude.Float) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'gameDurationSeconds
           (\ x__ y__ -> x__ {_ResponseReplayInfo'gameDurationSeconds = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "gameVersion" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'gameVersion
           (\ x__ y__ -> x__ {_ResponseReplayInfo'gameVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "maybe'gameVersion" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'gameVersion
           (\ x__ y__ -> x__ {_ResponseReplayInfo'gameVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "dataVersion" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'dataVersion
           (\ x__ y__ -> x__ {_ResponseReplayInfo'dataVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "maybe'dataVersion" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'dataVersion
           (\ x__ y__ -> x__ {_ResponseReplayInfo'dataVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "dataBuild" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'dataBuild
           (\ x__ y__ -> x__ {_ResponseReplayInfo'dataBuild = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "maybe'dataBuild" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'dataBuild
           (\ x__ y__ -> x__ {_ResponseReplayInfo'dataBuild = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "baseBuild" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'baseBuild
           (\ x__ y__ -> x__ {_ResponseReplayInfo'baseBuild = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "maybe'baseBuild" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'baseBuild
           (\ x__ y__ -> x__ {_ResponseReplayInfo'baseBuild = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "error" ResponseReplayInfo'Error where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'error
           (\ x__ y__ -> x__ {_ResponseReplayInfo'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "maybe'error" (Prelude.Maybe ResponseReplayInfo'Error) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'error
           (\ x__ y__ -> x__ {_ResponseReplayInfo'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "errorDetails" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'errorDetails
           (\ x__ y__ -> x__ {_ResponseReplayInfo'errorDetails = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseReplayInfo "maybe'errorDetails" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseReplayInfo'errorDetails
           (\ x__ y__ -> x__ {_ResponseReplayInfo'errorDetails = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseReplayInfo where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseReplayInfo"
  packedMessageDescriptor _
    = "\n\
      \\DC2ResponseReplayInfo\DC2\EM\n\
      \\bmap_name\CAN\SOH \SOH(\tR\amapName\DC2$\n\
      \\SOlocal_map_path\CAN\STX \SOH(\tR\flocalMapPath\DC2@\n\
      \\vplayer_info\CAN\ETX \ETX(\v2\US.SC2APIProtocol.PlayerInfoExtraR\n\
      \playerInfo\DC2.\n\
      \\DC3game_duration_loops\CAN\EOT \SOH(\rR\DC1gameDurationLoops\DC22\n\
      \\NAKgame_duration_seconds\CAN\ENQ \SOH(\STXR\DC3gameDurationSeconds\DC2!\n\
      \\fgame_version\CAN\ACK \SOH(\tR\vgameVersion\DC2!\n\
      \\fdata_version\CAN\v \SOH(\tR\vdataVersion\DC2\GS\n\
      \\n\
      \data_build\CAN\a \SOH(\rR\tdataBuild\DC2\GS\n\
      \\n\
      \base_build\CAN\b \SOH(\rR\tbaseBuild\DC2>\n\
      \\ENQerror\CAN\t \SOH(\SO2(.SC2APIProtocol.ResponseReplayInfo.ErrorR\ENQerror\DC2#\n\
      \\rerror_details\CAN\n\
      \ \SOH(\tR\ferrorDetails\"m\n\
      \\ENQError\DC2\DC1\n\
      \\rMissingReplay\DLE\SOH\DC2\NAK\n\
      \\DC1InvalidReplayPath\DLE\STX\DC2\NAK\n\
      \\DC1InvalidReplayData\DLE\ETX\DC2\DLE\n\
      \\fParsingError\DLE\EOT\DC2\DC1\n\
      \\rDownloadError\DLE\ENQ"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        mapName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapName")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
        localMapPath__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "local_map_path"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'localMapPath")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
        playerInfo__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "player_info"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor PlayerInfoExtra)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"playerInfo")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
        gameDurationLoops__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "game_duration_loops"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gameDurationLoops")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
        gameDurationSeconds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "game_duration_seconds"
              (Data.ProtoLens.ScalarField Data.ProtoLens.FloatField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Float)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gameDurationSeconds")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
        gameVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "game_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gameVersion")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
        dataVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "data_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dataVersion")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
        dataBuild__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "data_build"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dataBuild")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
        baseBuild__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "base_build"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'baseBuild")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseReplayInfo'Error)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
        errorDetails__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_details"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorDetails")) ::
              Data.ProtoLens.FieldDescriptor ResponseReplayInfo
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, mapName__field_descriptor),
           (Data.ProtoLens.Tag 2, localMapPath__field_descriptor),
           (Data.ProtoLens.Tag 3, playerInfo__field_descriptor),
           (Data.ProtoLens.Tag 4, gameDurationLoops__field_descriptor),
           (Data.ProtoLens.Tag 5, gameDurationSeconds__field_descriptor),
           (Data.ProtoLens.Tag 6, gameVersion__field_descriptor),
           (Data.ProtoLens.Tag 11, dataVersion__field_descriptor),
           (Data.ProtoLens.Tag 7, dataBuild__field_descriptor),
           (Data.ProtoLens.Tag 8, baseBuild__field_descriptor),
           (Data.ProtoLens.Tag 9, error__field_descriptor),
           (Data.ProtoLens.Tag 10, errorDetails__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseReplayInfo'_unknownFields
        (\ x__ y__ -> x__ {_ResponseReplayInfo'_unknownFields = y__})
  defMessage
    = ResponseReplayInfo'_constructor
        {_ResponseReplayInfo'mapName = Prelude.Nothing,
         _ResponseReplayInfo'localMapPath = Prelude.Nothing,
         _ResponseReplayInfo'playerInfo = Data.Vector.Generic.empty,
         _ResponseReplayInfo'gameDurationLoops = Prelude.Nothing,
         _ResponseReplayInfo'gameDurationSeconds = Prelude.Nothing,
         _ResponseReplayInfo'gameVersion = Prelude.Nothing,
         _ResponseReplayInfo'dataVersion = Prelude.Nothing,
         _ResponseReplayInfo'dataBuild = Prelude.Nothing,
         _ResponseReplayInfo'baseBuild = Prelude.Nothing,
         _ResponseReplayInfo'error = Prelude.Nothing,
         _ResponseReplayInfo'errorDetails = Prelude.Nothing,
         _ResponseReplayInfo'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseReplayInfo
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld PlayerInfoExtra
             -> Data.ProtoLens.Encoding.Bytes.Parser ResponseReplayInfo
        loop x mutable'playerInfo
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'playerInfo <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'playerInfo)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'playerInfo") frozen'playerInfo
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "map_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"mapName") y x)
                                  mutable'playerInfo
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "local_map_path"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"localMapPath") y x)
                                  mutable'playerInfo
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "player_info"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'playerInfo y)
                                loop x v
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "game_duration_loops"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"gameDurationLoops") y x)
                                  mutable'playerInfo
                        45
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToFloat
                                          Data.ProtoLens.Encoding.Bytes.getFixed32)
                                       "game_duration_seconds"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"gameDurationSeconds") y x)
                                  mutable'playerInfo
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "game_version"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"gameVersion") y x)
                                  mutable'playerInfo
                        90
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "data_version"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"dataVersion") y x)
                                  mutable'playerInfo
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "data_build"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"dataBuild") y x)
                                  mutable'playerInfo
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "base_build"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"baseBuild") y x)
                                  mutable'playerInfo
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  mutable'playerInfo
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "error_details"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorDetails") y x)
                                  mutable'playerInfo
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'playerInfo
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'playerInfo <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'playerInfo)
          "ResponseReplayInfo"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mapName") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'localMapPath") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'playerInfo") _x))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'gameDurationLoops") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'gameDurationSeconds") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 45)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putFixed32
                                      Data.ProtoLens.Encoding.Bytes.floatToWord _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'gameVersion") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8 _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'dataVersion") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 90)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8 _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'dataBuild") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'baseBuild") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'error") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                                  ((Prelude..)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        Prelude.fromIntegral)
                                                     Prelude.fromEnum _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'errorDetails")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                     ((Prelude..)
                                                        (\ bs
                                                           -> (Data.Monoid.<>)
                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                   (Prelude.fromIntegral
                                                                      (Data.ByteString.length bs)))
                                                                (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                   bs))
                                                        Data.Text.Encoding.encodeUtf8 _v))
                                           (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                              (Lens.Family2.view
                                                 Data.ProtoLens.unknownFields _x))))))))))))
instance Control.DeepSeq.NFData ResponseReplayInfo where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseReplayInfo'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponseReplayInfo'mapName x__)
                (Control.DeepSeq.deepseq
                   (_ResponseReplayInfo'localMapPath x__)
                   (Control.DeepSeq.deepseq
                      (_ResponseReplayInfo'playerInfo x__)
                      (Control.DeepSeq.deepseq
                         (_ResponseReplayInfo'gameDurationLoops x__)
                         (Control.DeepSeq.deepseq
                            (_ResponseReplayInfo'gameDurationSeconds x__)
                            (Control.DeepSeq.deepseq
                               (_ResponseReplayInfo'gameVersion x__)
                               (Control.DeepSeq.deepseq
                                  (_ResponseReplayInfo'dataVersion x__)
                                  (Control.DeepSeq.deepseq
                                     (_ResponseReplayInfo'dataBuild x__)
                                     (Control.DeepSeq.deepseq
                                        (_ResponseReplayInfo'baseBuild x__)
                                        (Control.DeepSeq.deepseq
                                           (_ResponseReplayInfo'error x__)
                                           (Control.DeepSeq.deepseq
                                              (_ResponseReplayInfo'errorDetails x__) ())))))))))))
data ResponseReplayInfo'Error
  = ResponseReplayInfo'MissingReplay |
    ResponseReplayInfo'InvalidReplayPath |
    ResponseReplayInfo'InvalidReplayData |
    ResponseReplayInfo'ParsingError |
    ResponseReplayInfo'DownloadError
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ResponseReplayInfo'Error where
  maybeToEnum 1 = Prelude.Just ResponseReplayInfo'MissingReplay
  maybeToEnum 2 = Prelude.Just ResponseReplayInfo'InvalidReplayPath
  maybeToEnum 3 = Prelude.Just ResponseReplayInfo'InvalidReplayData
  maybeToEnum 4 = Prelude.Just ResponseReplayInfo'ParsingError
  maybeToEnum 5 = Prelude.Just ResponseReplayInfo'DownloadError
  maybeToEnum _ = Prelude.Nothing
  showEnum ResponseReplayInfo'MissingReplay = "MissingReplay"
  showEnum ResponseReplayInfo'InvalidReplayPath = "InvalidReplayPath"
  showEnum ResponseReplayInfo'InvalidReplayData = "InvalidReplayData"
  showEnum ResponseReplayInfo'ParsingError = "ParsingError"
  showEnum ResponseReplayInfo'DownloadError = "DownloadError"
  readEnum k
    | (Prelude.==) k "MissingReplay"
    = Prelude.Just ResponseReplayInfo'MissingReplay
    | (Prelude.==) k "InvalidReplayPath"
    = Prelude.Just ResponseReplayInfo'InvalidReplayPath
    | (Prelude.==) k "InvalidReplayData"
    = Prelude.Just ResponseReplayInfo'InvalidReplayData
    | (Prelude.==) k "ParsingError"
    = Prelude.Just ResponseReplayInfo'ParsingError
    | (Prelude.==) k "DownloadError"
    = Prelude.Just ResponseReplayInfo'DownloadError
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ResponseReplayInfo'Error where
  minBound = ResponseReplayInfo'MissingReplay
  maxBound = ResponseReplayInfo'DownloadError
instance Prelude.Enum ResponseReplayInfo'Error where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Error: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum ResponseReplayInfo'MissingReplay = 1
  fromEnum ResponseReplayInfo'InvalidReplayPath = 2
  fromEnum ResponseReplayInfo'InvalidReplayData = 3
  fromEnum ResponseReplayInfo'ParsingError = 4
  fromEnum ResponseReplayInfo'DownloadError = 5
  succ ResponseReplayInfo'DownloadError
    = Prelude.error
        "ResponseReplayInfo'Error.succ: bad argument ResponseReplayInfo'DownloadError. This value would be out of bounds."
  succ ResponseReplayInfo'MissingReplay
    = ResponseReplayInfo'InvalidReplayPath
  succ ResponseReplayInfo'InvalidReplayPath
    = ResponseReplayInfo'InvalidReplayData
  succ ResponseReplayInfo'InvalidReplayData
    = ResponseReplayInfo'ParsingError
  succ ResponseReplayInfo'ParsingError
    = ResponseReplayInfo'DownloadError
  pred ResponseReplayInfo'MissingReplay
    = Prelude.error
        "ResponseReplayInfo'Error.pred: bad argument ResponseReplayInfo'MissingReplay. This value would be out of bounds."
  pred ResponseReplayInfo'InvalidReplayPath
    = ResponseReplayInfo'MissingReplay
  pred ResponseReplayInfo'InvalidReplayData
    = ResponseReplayInfo'InvalidReplayPath
  pred ResponseReplayInfo'ParsingError
    = ResponseReplayInfo'InvalidReplayData
  pred ResponseReplayInfo'DownloadError
    = ResponseReplayInfo'ParsingError
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ResponseReplayInfo'Error where
  fieldDefault = ResponseReplayInfo'MissingReplay
instance Control.DeepSeq.NFData ResponseReplayInfo'Error where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.error' @:: Lens' ResponseRestartGame ResponseRestartGame'Error@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'error' @:: Lens' ResponseRestartGame (Prelude.Maybe ResponseRestartGame'Error)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.errorDetails' @:: Lens' ResponseRestartGame Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'errorDetails' @:: Lens' ResponseRestartGame (Prelude.Maybe Data.Text.Text)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.needHardReset' @:: Lens' ResponseRestartGame Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'needHardReset' @:: Lens' ResponseRestartGame (Prelude.Maybe Prelude.Bool)@ -}
data ResponseRestartGame
  = ResponseRestartGame'_constructor {_ResponseRestartGame'error :: !(Prelude.Maybe ResponseRestartGame'Error),
                                      _ResponseRestartGame'errorDetails :: !(Prelude.Maybe Data.Text.Text),
                                      _ResponseRestartGame'needHardReset :: !(Prelude.Maybe Prelude.Bool),
                                      _ResponseRestartGame'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseRestartGame where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseRestartGame "error" ResponseRestartGame'Error where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseRestartGame'error
           (\ x__ y__ -> x__ {_ResponseRestartGame'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseRestartGame "maybe'error" (Prelude.Maybe ResponseRestartGame'Error) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseRestartGame'error
           (\ x__ y__ -> x__ {_ResponseRestartGame'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseRestartGame "errorDetails" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseRestartGame'errorDetails
           (\ x__ y__ -> x__ {_ResponseRestartGame'errorDetails = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseRestartGame "maybe'errorDetails" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseRestartGame'errorDetails
           (\ x__ y__ -> x__ {_ResponseRestartGame'errorDetails = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseRestartGame "needHardReset" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseRestartGame'needHardReset
           (\ x__ y__ -> x__ {_ResponseRestartGame'needHardReset = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseRestartGame "maybe'needHardReset" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseRestartGame'needHardReset
           (\ x__ y__ -> x__ {_ResponseRestartGame'needHardReset = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseRestartGame where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseRestartGame"
  packedMessageDescriptor _
    = "\n\
      \\DC3ResponseRestartGame\DC2?\n\
      \\ENQerror\CAN\SOH \SOH(\SO2).SC2APIProtocol.ResponseRestartGame.ErrorR\ENQerror\DC2#\n\
      \\rerror_details\CAN\STX \SOH(\tR\ferrorDetails\DC2&\n\
      \\SIneed_hard_reset\CAN\ETX \SOH(\bR\rneedHardReset\"\CAN\n\
      \\ENQError\DC2\SI\n\
      \\vLaunchError\DLE\SOH"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseRestartGame'Error)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor ResponseRestartGame
        errorDetails__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_details"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorDetails")) ::
              Data.ProtoLens.FieldDescriptor ResponseRestartGame
        needHardReset__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "need_hard_reset"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'needHardReset")) ::
              Data.ProtoLens.FieldDescriptor ResponseRestartGame
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, error__field_descriptor),
           (Data.ProtoLens.Tag 2, errorDetails__field_descriptor),
           (Data.ProtoLens.Tag 3, needHardReset__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseRestartGame'_unknownFields
        (\ x__ y__ -> x__ {_ResponseRestartGame'_unknownFields = y__})
  defMessage
    = ResponseRestartGame'_constructor
        {_ResponseRestartGame'error = Prelude.Nothing,
         _ResponseRestartGame'errorDetails = Prelude.Nothing,
         _ResponseRestartGame'needHardReset = Prelude.Nothing,
         _ResponseRestartGame'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseRestartGame
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseRestartGame
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "error_details"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorDetails") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "need_hard_reset"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"needHardReset") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseRestartGame"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Prelude.fromEnum _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'errorDetails") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'needHardReset") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData ResponseRestartGame where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseRestartGame'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponseRestartGame'error x__)
                (Control.DeepSeq.deepseq
                   (_ResponseRestartGame'errorDetails x__)
                   (Control.DeepSeq.deepseq
                      (_ResponseRestartGame'needHardReset x__) ())))
data ResponseRestartGame'Error
  = ResponseRestartGame'LaunchError
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ResponseRestartGame'Error where
  maybeToEnum 1 = Prelude.Just ResponseRestartGame'LaunchError
  maybeToEnum _ = Prelude.Nothing
  showEnum ResponseRestartGame'LaunchError = "LaunchError"
  readEnum k
    | (Prelude.==) k "LaunchError"
    = Prelude.Just ResponseRestartGame'LaunchError
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ResponseRestartGame'Error where
  minBound = ResponseRestartGame'LaunchError
  maxBound = ResponseRestartGame'LaunchError
instance Prelude.Enum ResponseRestartGame'Error where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Error: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum ResponseRestartGame'LaunchError = 1
  succ ResponseRestartGame'LaunchError
    = Prelude.error
        "ResponseRestartGame'Error.succ: bad argument ResponseRestartGame'LaunchError. This value would be out of bounds."
  pred ResponseRestartGame'LaunchError
    = Prelude.error
        "ResponseRestartGame'Error.pred: bad argument ResponseRestartGame'LaunchError. This value would be out of bounds."
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ResponseRestartGame'Error where
  fieldDefault = ResponseRestartGame'LaunchError
instance Control.DeepSeq.NFData ResponseRestartGame'Error where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.error' @:: Lens' ResponseSaveMap ResponseSaveMap'Error@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'error' @:: Lens' ResponseSaveMap (Prelude.Maybe ResponseSaveMap'Error)@ -}
data ResponseSaveMap
  = ResponseSaveMap'_constructor {_ResponseSaveMap'error :: !(Prelude.Maybe ResponseSaveMap'Error),
                                  _ResponseSaveMap'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseSaveMap where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseSaveMap "error" ResponseSaveMap'Error where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseSaveMap'error
           (\ x__ y__ -> x__ {_ResponseSaveMap'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseSaveMap "maybe'error" (Prelude.Maybe ResponseSaveMap'Error) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseSaveMap'error
           (\ x__ y__ -> x__ {_ResponseSaveMap'error = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseSaveMap where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseSaveMap"
  packedMessageDescriptor _
    = "\n\
      \\SIResponseSaveMap\DC2;\n\
      \\ENQerror\CAN\SOH \SOH(\SO2%.SC2APIProtocol.ResponseSaveMap.ErrorR\ENQerror\"\ESC\n\
      \\ENQError\DC2\DC2\n\
      \\SOInvalidMapData\DLE\SOH"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseSaveMap'Error)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor ResponseSaveMap
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, error__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseSaveMap'_unknownFields
        (\ x__ y__ -> x__ {_ResponseSaveMap'_unknownFields = y__})
  defMessage
    = ResponseSaveMap'_constructor
        {_ResponseSaveMap'error = Prelude.Nothing,
         _ResponseSaveMap'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseSaveMap
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseSaveMap
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseSaveMap"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Prelude.fromEnum _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ResponseSaveMap where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseSaveMap'_unknownFields x__)
             (Control.DeepSeq.deepseq (_ResponseSaveMap'error x__) ())
data ResponseSaveMap'Error
  = ResponseSaveMap'InvalidMapData
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ResponseSaveMap'Error where
  maybeToEnum 1 = Prelude.Just ResponseSaveMap'InvalidMapData
  maybeToEnum _ = Prelude.Nothing
  showEnum ResponseSaveMap'InvalidMapData = "InvalidMapData"
  readEnum k
    | (Prelude.==) k "InvalidMapData"
    = Prelude.Just ResponseSaveMap'InvalidMapData
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ResponseSaveMap'Error where
  minBound = ResponseSaveMap'InvalidMapData
  maxBound = ResponseSaveMap'InvalidMapData
instance Prelude.Enum ResponseSaveMap'Error where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Error: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum ResponseSaveMap'InvalidMapData = 1
  succ ResponseSaveMap'InvalidMapData
    = Prelude.error
        "ResponseSaveMap'Error.succ: bad argument ResponseSaveMap'InvalidMapData. This value would be out of bounds."
  pred ResponseSaveMap'InvalidMapData
    = Prelude.error
        "ResponseSaveMap'Error.pred: bad argument ResponseSaveMap'InvalidMapData. This value would be out of bounds."
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ResponseSaveMap'Error where
  fieldDefault = ResponseSaveMap'InvalidMapData
instance Control.DeepSeq.NFData ResponseSaveMap'Error where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.data'' @:: Lens' ResponseSaveReplay Data.ByteString.ByteString@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'data'' @:: Lens' ResponseSaveReplay (Prelude.Maybe Data.ByteString.ByteString)@ -}
data ResponseSaveReplay
  = ResponseSaveReplay'_constructor {_ResponseSaveReplay'data' :: !(Prelude.Maybe Data.ByteString.ByteString),
                                     _ResponseSaveReplay'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseSaveReplay where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseSaveReplay "data'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseSaveReplay'data'
           (\ x__ y__ -> x__ {_ResponseSaveReplay'data' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseSaveReplay "maybe'data'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseSaveReplay'data'
           (\ x__ y__ -> x__ {_ResponseSaveReplay'data' = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseSaveReplay where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseSaveReplay"
  packedMessageDescriptor _
    = "\n\
      \\DC2ResponseSaveReplay\DC2\DC2\n\
      \\EOTdata\CAN\SOH \SOH(\fR\EOTdata"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        data'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'data'")) ::
              Data.ProtoLens.FieldDescriptor ResponseSaveReplay
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, data'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseSaveReplay'_unknownFields
        (\ x__ y__ -> x__ {_ResponseSaveReplay'_unknownFields = y__})
  defMessage
    = ResponseSaveReplay'_constructor
        {_ResponseSaveReplay'data' = Prelude.Nothing,
         _ResponseSaveReplay'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseSaveReplay
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseSaveReplay
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "data"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"data'") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseSaveReplay"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'data'") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((\ bs
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ResponseSaveReplay where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseSaveReplay'_unknownFields x__)
             (Control.DeepSeq.deepseq (_ResponseSaveReplay'data' x__) ())
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.error' @:: Lens' ResponseStartReplay ResponseStartReplay'Error@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'error' @:: Lens' ResponseStartReplay (Prelude.Maybe ResponseStartReplay'Error)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.errorDetails' @:: Lens' ResponseStartReplay Data.Text.Text@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'errorDetails' @:: Lens' ResponseStartReplay (Prelude.Maybe Data.Text.Text)@ -}
data ResponseStartReplay
  = ResponseStartReplay'_constructor {_ResponseStartReplay'error :: !(Prelude.Maybe ResponseStartReplay'Error),
                                      _ResponseStartReplay'errorDetails :: !(Prelude.Maybe Data.Text.Text),
                                      _ResponseStartReplay'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseStartReplay where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseStartReplay "error" ResponseStartReplay'Error where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseStartReplay'error
           (\ x__ y__ -> x__ {_ResponseStartReplay'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseStartReplay "maybe'error" (Prelude.Maybe ResponseStartReplay'Error) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseStartReplay'error
           (\ x__ y__ -> x__ {_ResponseStartReplay'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ResponseStartReplay "errorDetails" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseStartReplay'errorDetails
           (\ x__ y__ -> x__ {_ResponseStartReplay'errorDetails = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseStartReplay "maybe'errorDetails" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseStartReplay'errorDetails
           (\ x__ y__ -> x__ {_ResponseStartReplay'errorDetails = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseStartReplay where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseStartReplay"
  packedMessageDescriptor _
    = "\n\
      \\DC3ResponseStartReplay\DC2?\n\
      \\ENQerror\CAN\SOH \SOH(\SO2).SC2APIProtocol.ResponseStartReplay.ErrorR\ENQerror\DC2#\n\
      \\rerror_details\CAN\STX \SOH(\tR\ferrorDetails\"\158\SOH\n\
      \\ENQError\DC2\DC1\n\
      \\rMissingReplay\DLE\SOH\DC2\NAK\n\
      \\DC1InvalidReplayPath\DLE\STX\DC2\NAK\n\
      \\DC1InvalidReplayData\DLE\ETX\DC2\DC2\n\
      \\SOInvalidMapData\DLE\EOT\DC2\ESC\n\
      \\ETBInvalidObservedPlayerId\DLE\ENQ\DC2\DC2\n\
      \\SOMissingOptions\DLE\ACK\DC2\SI\n\
      \\vLaunchError\DLE\a"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ResponseStartReplay'Error)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor ResponseStartReplay
        errorDetails__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_details"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorDetails")) ::
              Data.ProtoLens.FieldDescriptor ResponseStartReplay
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, error__field_descriptor),
           (Data.ProtoLens.Tag 2, errorDetails__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseStartReplay'_unknownFields
        (\ x__ y__ -> x__ {_ResponseStartReplay'_unknownFields = y__})
  defMessage
    = ResponseStartReplay'_constructor
        {_ResponseStartReplay'error = Prelude.Nothing,
         _ResponseStartReplay'errorDetails = Prelude.Nothing,
         _ResponseStartReplay'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseStartReplay
          -> Data.ProtoLens.Encoding.Bytes.Parser ResponseStartReplay
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "error_details"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorDetails") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseStartReplay"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Prelude.fromEnum _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'errorDetails") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData ResponseStartReplay where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseStartReplay'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ResponseStartReplay'error x__)
                (Control.DeepSeq.deepseq
                   (_ResponseStartReplay'errorDetails x__) ()))
data ResponseStartReplay'Error
  = ResponseStartReplay'MissingReplay |
    ResponseStartReplay'InvalidReplayPath |
    ResponseStartReplay'InvalidReplayData |
    ResponseStartReplay'InvalidMapData |
    ResponseStartReplay'InvalidObservedPlayerId |
    ResponseStartReplay'MissingOptions |
    ResponseStartReplay'LaunchError
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ResponseStartReplay'Error where
  maybeToEnum 1 = Prelude.Just ResponseStartReplay'MissingReplay
  maybeToEnum 2 = Prelude.Just ResponseStartReplay'InvalidReplayPath
  maybeToEnum 3 = Prelude.Just ResponseStartReplay'InvalidReplayData
  maybeToEnum 4 = Prelude.Just ResponseStartReplay'InvalidMapData
  maybeToEnum 5
    = Prelude.Just ResponseStartReplay'InvalidObservedPlayerId
  maybeToEnum 6 = Prelude.Just ResponseStartReplay'MissingOptions
  maybeToEnum 7 = Prelude.Just ResponseStartReplay'LaunchError
  maybeToEnum _ = Prelude.Nothing
  showEnum ResponseStartReplay'MissingReplay = "MissingReplay"
  showEnum ResponseStartReplay'InvalidReplayPath
    = "InvalidReplayPath"
  showEnum ResponseStartReplay'InvalidReplayData
    = "InvalidReplayData"
  showEnum ResponseStartReplay'InvalidMapData = "InvalidMapData"
  showEnum ResponseStartReplay'InvalidObservedPlayerId
    = "InvalidObservedPlayerId"
  showEnum ResponseStartReplay'MissingOptions = "MissingOptions"
  showEnum ResponseStartReplay'LaunchError = "LaunchError"
  readEnum k
    | (Prelude.==) k "MissingReplay"
    = Prelude.Just ResponseStartReplay'MissingReplay
    | (Prelude.==) k "InvalidReplayPath"
    = Prelude.Just ResponseStartReplay'InvalidReplayPath
    | (Prelude.==) k "InvalidReplayData"
    = Prelude.Just ResponseStartReplay'InvalidReplayData
    | (Prelude.==) k "InvalidMapData"
    = Prelude.Just ResponseStartReplay'InvalidMapData
    | (Prelude.==) k "InvalidObservedPlayerId"
    = Prelude.Just ResponseStartReplay'InvalidObservedPlayerId
    | (Prelude.==) k "MissingOptions"
    = Prelude.Just ResponseStartReplay'MissingOptions
    | (Prelude.==) k "LaunchError"
    = Prelude.Just ResponseStartReplay'LaunchError
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ResponseStartReplay'Error where
  minBound = ResponseStartReplay'MissingReplay
  maxBound = ResponseStartReplay'LaunchError
instance Prelude.Enum ResponseStartReplay'Error where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Error: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum ResponseStartReplay'MissingReplay = 1
  fromEnum ResponseStartReplay'InvalidReplayPath = 2
  fromEnum ResponseStartReplay'InvalidReplayData = 3
  fromEnum ResponseStartReplay'InvalidMapData = 4
  fromEnum ResponseStartReplay'InvalidObservedPlayerId = 5
  fromEnum ResponseStartReplay'MissingOptions = 6
  fromEnum ResponseStartReplay'LaunchError = 7
  succ ResponseStartReplay'LaunchError
    = Prelude.error
        "ResponseStartReplay'Error.succ: bad argument ResponseStartReplay'LaunchError. This value would be out of bounds."
  succ ResponseStartReplay'MissingReplay
    = ResponseStartReplay'InvalidReplayPath
  succ ResponseStartReplay'InvalidReplayPath
    = ResponseStartReplay'InvalidReplayData
  succ ResponseStartReplay'InvalidReplayData
    = ResponseStartReplay'InvalidMapData
  succ ResponseStartReplay'InvalidMapData
    = ResponseStartReplay'InvalidObservedPlayerId
  succ ResponseStartReplay'InvalidObservedPlayerId
    = ResponseStartReplay'MissingOptions
  succ ResponseStartReplay'MissingOptions
    = ResponseStartReplay'LaunchError
  pred ResponseStartReplay'MissingReplay
    = Prelude.error
        "ResponseStartReplay'Error.pred: bad argument ResponseStartReplay'MissingReplay. This value would be out of bounds."
  pred ResponseStartReplay'InvalidReplayPath
    = ResponseStartReplay'MissingReplay
  pred ResponseStartReplay'InvalidReplayData
    = ResponseStartReplay'InvalidReplayPath
  pred ResponseStartReplay'InvalidMapData
    = ResponseStartReplay'InvalidReplayData
  pred ResponseStartReplay'InvalidObservedPlayerId
    = ResponseStartReplay'InvalidMapData
  pred ResponseStartReplay'MissingOptions
    = ResponseStartReplay'InvalidObservedPlayerId
  pred ResponseStartReplay'LaunchError
    = ResponseStartReplay'MissingOptions
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ResponseStartReplay'Error where
  fieldDefault = ResponseStartReplay'MissingReplay
instance Control.DeepSeq.NFData ResponseStartReplay'Error where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.simulationLoop' @:: Lens' ResponseStep Data.Word.Word32@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'simulationLoop' @:: Lens' ResponseStep (Prelude.Maybe Data.Word.Word32)@ -}
data ResponseStep
  = ResponseStep'_constructor {_ResponseStep'simulationLoop :: !(Prelude.Maybe Data.Word.Word32),
                               _ResponseStep'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ResponseStep where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ResponseStep "simulationLoop" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseStep'simulationLoop
           (\ x__ y__ -> x__ {_ResponseStep'simulationLoop = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ResponseStep "maybe'simulationLoop" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ResponseStep'simulationLoop
           (\ x__ y__ -> x__ {_ResponseStep'simulationLoop = y__}))
        Prelude.id
instance Data.ProtoLens.Message ResponseStep where
  messageName _ = Data.Text.pack "SC2APIProtocol.ResponseStep"
  packedMessageDescriptor _
    = "\n\
      \\fResponseStep\DC2'\n\
      \\SIsimulation_loop\CAN\SOH \SOH(\rR\SOsimulationLoop"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        simulationLoop__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "simulation_loop"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'simulationLoop")) ::
              Data.ProtoLens.FieldDescriptor ResponseStep
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, simulationLoop__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ResponseStep'_unknownFields
        (\ x__ y__ -> x__ {_ResponseStep'_unknownFields = y__})
  defMessage
    = ResponseStep'_constructor
        {_ResponseStep'simulationLoop = Prelude.Nothing,
         _ResponseStep'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ResponseStep -> Data.ProtoLens.Encoding.Bytes.Parser ResponseStep
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "simulation_loop"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"simulationLoop") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ResponseStep"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'simulationLoop") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ResponseStep where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ResponseStep'_unknownFields x__)
             (Control.DeepSeq.deepseq (_ResponseStep'simulationLoop x__) ())
data Result
  = Victory | Defeat | Tie | Undecided
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum Result where
  maybeToEnum 1 = Prelude.Just Victory
  maybeToEnum 2 = Prelude.Just Defeat
  maybeToEnum 3 = Prelude.Just Tie
  maybeToEnum 4 = Prelude.Just Undecided
  maybeToEnum _ = Prelude.Nothing
  showEnum Victory = "Victory"
  showEnum Defeat = "Defeat"
  showEnum Tie = "Tie"
  showEnum Undecided = "Undecided"
  readEnum k
    | (Prelude.==) k "Victory" = Prelude.Just Victory
    | (Prelude.==) k "Defeat" = Prelude.Just Defeat
    | (Prelude.==) k "Tie" = Prelude.Just Tie
    | (Prelude.==) k "Undecided" = Prelude.Just Undecided
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded Result where
  minBound = Victory
  maxBound = Undecided
instance Prelude.Enum Result where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Result: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum Victory = 1
  fromEnum Defeat = 2
  fromEnum Tie = 3
  fromEnum Undecided = 4
  succ Undecided
    = Prelude.error
        "Result.succ: bad argument Undecided. This value would be out of bounds."
  succ Victory = Defeat
  succ Defeat = Tie
  succ Tie = Undecided
  pred Victory
    = Prelude.error
        "Result.pred: bad argument Victory. This value would be out of bounds."
  pred Defeat = Victory
  pred Tie = Defeat
  pred Undecided = Tie
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault Result where
  fieldDefault = Victory
instance Control.DeepSeq.NFData Result where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.S2clientprotocol.Sc2api_Fields.resolution' @:: Lens' SpatialCameraSetup Proto.S2clientprotocol.Common.Size2DI@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'resolution' @:: Lens' SpatialCameraSetup (Prelude.Maybe Proto.S2clientprotocol.Common.Size2DI)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.minimapResolution' @:: Lens' SpatialCameraSetup Proto.S2clientprotocol.Common.Size2DI@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'minimapResolution' @:: Lens' SpatialCameraSetup (Prelude.Maybe Proto.S2clientprotocol.Common.Size2DI)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.width' @:: Lens' SpatialCameraSetup Prelude.Float@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'width' @:: Lens' SpatialCameraSetup (Prelude.Maybe Prelude.Float)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.cropToPlayableArea' @:: Lens' SpatialCameraSetup Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'cropToPlayableArea' @:: Lens' SpatialCameraSetup (Prelude.Maybe Prelude.Bool)@
         * 'Proto.S2clientprotocol.Sc2api_Fields.allowCheatingLayers' @:: Lens' SpatialCameraSetup Prelude.Bool@
         * 'Proto.S2clientprotocol.Sc2api_Fields.maybe'allowCheatingLayers' @:: Lens' SpatialCameraSetup (Prelude.Maybe Prelude.Bool)@ -}
data SpatialCameraSetup
  = SpatialCameraSetup'_constructor {_SpatialCameraSetup'resolution :: !(Prelude.Maybe Proto.S2clientprotocol.Common.Size2DI),
                                     _SpatialCameraSetup'minimapResolution :: !(Prelude.Maybe Proto.S2clientprotocol.Common.Size2DI),
                                     _SpatialCameraSetup'width :: !(Prelude.Maybe Prelude.Float),
                                     _SpatialCameraSetup'cropToPlayableArea :: !(Prelude.Maybe Prelude.Bool),
                                     _SpatialCameraSetup'allowCheatingLayers :: !(Prelude.Maybe Prelude.Bool),
                                     _SpatialCameraSetup'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SpatialCameraSetup where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SpatialCameraSetup "resolution" Proto.S2clientprotocol.Common.Size2DI where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SpatialCameraSetup'resolution
           (\ x__ y__ -> x__ {_SpatialCameraSetup'resolution = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField SpatialCameraSetup "maybe'resolution" (Prelude.Maybe Proto.S2clientprotocol.Common.Size2DI) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SpatialCameraSetup'resolution
           (\ x__ y__ -> x__ {_SpatialCameraSetup'resolution = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SpatialCameraSetup "minimapResolution" Proto.S2clientprotocol.Common.Size2DI where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SpatialCameraSetup'minimapResolution
           (\ x__ y__ -> x__ {_SpatialCameraSetup'minimapResolution = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField SpatialCameraSetup "maybe'minimapResolution" (Prelude.Maybe Proto.S2clientprotocol.Common.Size2DI) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SpatialCameraSetup'minimapResolution
           (\ x__ y__ -> x__ {_SpatialCameraSetup'minimapResolution = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SpatialCameraSetup "width" Prelude.Float where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SpatialCameraSetup'width
           (\ x__ y__ -> x__ {_SpatialCameraSetup'width = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SpatialCameraSetup "maybe'width" (Prelude.Maybe Prelude.Float) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SpatialCameraSetup'width
           (\ x__ y__ -> x__ {_SpatialCameraSetup'width = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SpatialCameraSetup "cropToPlayableArea" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SpatialCameraSetup'cropToPlayableArea
           (\ x__ y__ -> x__ {_SpatialCameraSetup'cropToPlayableArea = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SpatialCameraSetup "maybe'cropToPlayableArea" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SpatialCameraSetup'cropToPlayableArea
           (\ x__ y__ -> x__ {_SpatialCameraSetup'cropToPlayableArea = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SpatialCameraSetup "allowCheatingLayers" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SpatialCameraSetup'allowCheatingLayers
           (\ x__ y__ -> x__ {_SpatialCameraSetup'allowCheatingLayers = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SpatialCameraSetup "maybe'allowCheatingLayers" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SpatialCameraSetup'allowCheatingLayers
           (\ x__ y__ -> x__ {_SpatialCameraSetup'allowCheatingLayers = y__}))
        Prelude.id
instance Data.ProtoLens.Message SpatialCameraSetup where
  messageName _ = Data.Text.pack "SC2APIProtocol.SpatialCameraSetup"
  packedMessageDescriptor _
    = "\n\
      \\DC2SpatialCameraSetup\DC27\n\
      \\n\
      \resolution\CAN\STX \SOH(\v2\ETB.SC2APIProtocol.Size2DIR\n\
      \resolution\DC2F\n\
      \\DC2minimap_resolution\CAN\ETX \SOH(\v2\ETB.SC2APIProtocol.Size2DIR\DC1minimapResolution\DC2\DC4\n\
      \\ENQwidth\CAN\SOH \SOH(\STXR\ENQwidth\DC21\n\
      \\NAKcrop_to_playable_area\CAN\EOT \SOH(\bR\DC2cropToPlayableArea\DC22\n\
      \\NAKallow_cheating_layers\CAN\ENQ \SOH(\bR\DC3allowCheatingLayers"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        resolution__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "resolution"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Common.Size2DI)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'resolution")) ::
              Data.ProtoLens.FieldDescriptor SpatialCameraSetup
        minimapResolution__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "minimap_resolution"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.S2clientprotocol.Common.Size2DI)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'minimapResolution")) ::
              Data.ProtoLens.FieldDescriptor SpatialCameraSetup
        width__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "width"
              (Data.ProtoLens.ScalarField Data.ProtoLens.FloatField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Float)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'width")) ::
              Data.ProtoLens.FieldDescriptor SpatialCameraSetup
        cropToPlayableArea__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "crop_to_playable_area"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'cropToPlayableArea")) ::
              Data.ProtoLens.FieldDescriptor SpatialCameraSetup
        allowCheatingLayers__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "allow_cheating_layers"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'allowCheatingLayers")) ::
              Data.ProtoLens.FieldDescriptor SpatialCameraSetup
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 2, resolution__field_descriptor),
           (Data.ProtoLens.Tag 3, minimapResolution__field_descriptor),
           (Data.ProtoLens.Tag 1, width__field_descriptor),
           (Data.ProtoLens.Tag 4, cropToPlayableArea__field_descriptor),
           (Data.ProtoLens.Tag 5, allowCheatingLayers__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _SpatialCameraSetup'_unknownFields
        (\ x__ y__ -> x__ {_SpatialCameraSetup'_unknownFields = y__})
  defMessage
    = SpatialCameraSetup'_constructor
        {_SpatialCameraSetup'resolution = Prelude.Nothing,
         _SpatialCameraSetup'minimapResolution = Prelude.Nothing,
         _SpatialCameraSetup'width = Prelude.Nothing,
         _SpatialCameraSetup'cropToPlayableArea = Prelude.Nothing,
         _SpatialCameraSetup'allowCheatingLayers = Prelude.Nothing,
         _SpatialCameraSetup'_unknownFields = []}
  parseMessage
    = let
        loop ::
          SpatialCameraSetup
          -> Data.ProtoLens.Encoding.Bytes.Parser SpatialCameraSetup
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "resolution"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"resolution") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "minimap_resolution"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"minimapResolution") y x)
                        13
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToFloat
                                          Data.ProtoLens.Encoding.Bytes.getFixed32)
                                       "width"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"width") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "crop_to_playable_area"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"cropToPlayableArea") y x)
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "allow_cheating_layers"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"allowCheatingLayers") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "SpatialCameraSetup"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'resolution") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'minimapResolution") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'width") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 13)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putFixed32
                                Data.ProtoLens.Encoding.Bytes.floatToWord _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'cropToPlayableArea") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0) _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'allowCheatingLayers") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0) _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData SpatialCameraSetup where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_SpatialCameraSetup'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_SpatialCameraSetup'resolution x__)
                (Control.DeepSeq.deepseq
                   (_SpatialCameraSetup'minimapResolution x__)
                   (Control.DeepSeq.deepseq
                      (_SpatialCameraSetup'width x__)
                      (Control.DeepSeq.deepseq
                         (_SpatialCameraSetup'cropToPlayableArea x__)
                         (Control.DeepSeq.deepseq
                            (_SpatialCameraSetup'allowCheatingLayers x__) ())))))
data Status
  = Launched |
    Init_game |
    In_game |
    In_replay |
    Ended |
    Quit |
    Unknown
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum Status where
  maybeToEnum 1 = Prelude.Just Launched
  maybeToEnum 2 = Prelude.Just Init_game
  maybeToEnum 3 = Prelude.Just In_game
  maybeToEnum 4 = Prelude.Just In_replay
  maybeToEnum 5 = Prelude.Just Ended
  maybeToEnum 6 = Prelude.Just Quit
  maybeToEnum 99 = Prelude.Just Unknown
  maybeToEnum _ = Prelude.Nothing
  showEnum Launched = "launched"
  showEnum Init_game = "init_game"
  showEnum In_game = "in_game"
  showEnum In_replay = "in_replay"
  showEnum Ended = "ended"
  showEnum Quit = "quit"
  showEnum Unknown = "unknown"
  readEnum k
    | (Prelude.==) k "launched" = Prelude.Just Launched
    | (Prelude.==) k "init_game" = Prelude.Just Init_game
    | (Prelude.==) k "in_game" = Prelude.Just In_game
    | (Prelude.==) k "in_replay" = Prelude.Just In_replay
    | (Prelude.==) k "ended" = Prelude.Just Ended
    | (Prelude.==) k "quit" = Prelude.Just Quit
    | (Prelude.==) k "unknown" = Prelude.Just Unknown
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded Status where
  minBound = Launched
  maxBound = Unknown
instance Prelude.Enum Status where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Status: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum Launched = 1
  fromEnum Init_game = 2
  fromEnum In_game = 3
  fromEnum In_replay = 4
  fromEnum Ended = 5
  fromEnum Quit = 6
  fromEnum Unknown = 99
  succ Unknown
    = Prelude.error
        "Status.succ: bad argument Unknown. This value would be out of bounds."
  succ Launched = Init_game
  succ Init_game = In_game
  succ In_game = In_replay
  succ In_replay = Ended
  succ Ended = Quit
  succ Quit = Unknown
  pred Launched
    = Prelude.error
        "Status.pred: bad argument Launched. This value would be out of bounds."
  pred Init_game = Launched
  pred In_game = Init_game
  pred In_replay = In_game
  pred Ended = In_replay
  pred Quit = Ended
  pred Unknown = Quit
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault Status where
  fieldDefault = Launched
instance Control.DeepSeq.NFData Status where
  rnf x__ = Prelude.seq x__ ()
packedFileDescriptor :: Data.ByteString.ByteString
packedFileDescriptor
  = "\n\
    \\GSs2clientprotocol/sc2api.proto\DC2\SOSC2APIProtocol\SUB\GSs2clientprotocol/common.proto\SUB\ESCs2clientprotocol/data.proto\SUB\FSs2clientprotocol/debug.proto\SUB\FSs2clientprotocol/error.proto\SUB\FSs2clientprotocol/query.proto\SUB\SUBs2clientprotocol/raw.proto\SUB\FSs2clientprotocol/score.proto\SUB\RSs2clientprotocol/spatial.proto\SUB\EMs2clientprotocol/ui.proto\"\164\v\n\
    \\aRequest\DC2D\n\
    \\vcreate_game\CAN\SOH \SOH(\v2!.SC2APIProtocol.RequestCreateGameH\NULR\n\
    \createGame\DC2>\n\
    \\tjoin_game\CAN\STX \SOH(\v2\US.SC2APIProtocol.RequestJoinGameH\NULR\bjoinGame\DC2G\n\
    \\frestart_game\CAN\ETX \SOH(\v2\".SC2APIProtocol.RequestRestartGameH\NULR\vrestartGame\DC2G\n\
    \\fstart_replay\CAN\EOT \SOH(\v2\".SC2APIProtocol.RequestStartReplayH\NULR\vstartReplay\DC2A\n\
    \\n\
    \leave_game\CAN\ENQ \SOH(\v2 .SC2APIProtocol.RequestLeaveGameH\NULR\tleaveGame\DC2A\n\
    \\n\
    \quick_save\CAN\ACK \SOH(\v2 .SC2APIProtocol.RequestQuickSaveH\NULR\tquickSave\DC2A\n\
    \\n\
    \quick_load\CAN\a \SOH(\v2 .SC2APIProtocol.RequestQuickLoadH\NULR\tquickLoad\DC21\n\
    \\EOTquit\CAN\b \SOH(\v2\ESC.SC2APIProtocol.RequestQuitH\NULR\EOTquit\DC2>\n\
    \\tgame_info\CAN\t \SOH(\v2\US.SC2APIProtocol.RequestGameInfoH\NULR\bgameInfo\DC2F\n\
    \\vobservation\CAN\n\
    \ \SOH(\v2\".SC2APIProtocol.RequestObservationH\NULR\vobservation\DC27\n\
    \\ACKaction\CAN\v \SOH(\v2\GS.SC2APIProtocol.RequestActionH\NULR\ACKaction\DC2F\n\
    \\n\
    \obs_action\CAN\NAK \SOH(\v2%.SC2APIProtocol.RequestObserverActionH\NULR\tobsAction\DC21\n\
    \\EOTstep\CAN\f \SOH(\v2\ESC.SC2APIProtocol.RequestStepH\NULR\EOTstep\DC21\n\
    \\EOTdata\CAN\r \SOH(\v2\ESC.SC2APIProtocol.RequestDataH\NULR\EOTdata\DC24\n\
    \\ENQquery\CAN\SO \SOH(\v2\FS.SC2APIProtocol.RequestQueryH\NULR\ENQquery\DC2D\n\
    \\vsave_replay\CAN\SI \SOH(\v2!.SC2APIProtocol.RequestSaveReplayH\NULR\n\
    \saveReplay\DC2D\n\
    \\vmap_command\CAN\SYN \SOH(\v2!.SC2APIProtocol.RequestMapCommandH\NULR\n\
    \mapCommand\DC2D\n\
    \\vreplay_info\CAN\DLE \SOH(\v2!.SC2APIProtocol.RequestReplayInfoH\NULR\n\
    \replayInfo\DC2M\n\
    \\SOavailable_maps\CAN\DC1 \SOH(\v2$.SC2APIProtocol.RequestAvailableMapsH\NULR\ravailableMaps\DC2;\n\
    \\bsave_map\CAN\DC2 \SOH(\v2\RS.SC2APIProtocol.RequestSaveMapH\NULR\asaveMap\DC21\n\
    \\EOTping\CAN\DC3 \SOH(\v2\ESC.SC2APIProtocol.RequestPingH\NULR\EOTping\DC24\n\
    \\ENQdebug\CAN\DC4 \SOH(\v2\FS.SC2APIProtocol.RequestDebugH\NULR\ENQdebug\DC2\SO\n\
    \\STXid\CANa \SOH(\rR\STXidB\t\n\
    \\arequest\"\130\f\n\
    \\bResponse\DC2E\n\
    \\vcreate_game\CAN\SOH \SOH(\v2\".SC2APIProtocol.ResponseCreateGameH\NULR\n\
    \createGame\DC2?\n\
    \\tjoin_game\CAN\STX \SOH(\v2 .SC2APIProtocol.ResponseJoinGameH\NULR\bjoinGame\DC2H\n\
    \\frestart_game\CAN\ETX \SOH(\v2#.SC2APIProtocol.ResponseRestartGameH\NULR\vrestartGame\DC2H\n\
    \\fstart_replay\CAN\EOT \SOH(\v2#.SC2APIProtocol.ResponseStartReplayH\NULR\vstartReplay\DC2B\n\
    \\n\
    \leave_game\CAN\ENQ \SOH(\v2!.SC2APIProtocol.ResponseLeaveGameH\NULR\tleaveGame\DC2B\n\
    \\n\
    \quick_save\CAN\ACK \SOH(\v2!.SC2APIProtocol.ResponseQuickSaveH\NULR\tquickSave\DC2B\n\
    \\n\
    \quick_load\CAN\a \SOH(\v2!.SC2APIProtocol.ResponseQuickLoadH\NULR\tquickLoad\DC22\n\
    \\EOTquit\CAN\b \SOH(\v2\FS.SC2APIProtocol.ResponseQuitH\NULR\EOTquit\DC2?\n\
    \\tgame_info\CAN\t \SOH(\v2 .SC2APIProtocol.ResponseGameInfoH\NULR\bgameInfo\DC2G\n\
    \\vobservation\CAN\n\
    \ \SOH(\v2#.SC2APIProtocol.ResponseObservationH\NULR\vobservation\DC28\n\
    \\ACKaction\CAN\v \SOH(\v2\RS.SC2APIProtocol.ResponseActionH\NULR\ACKaction\DC2G\n\
    \\n\
    \obs_action\CAN\NAK \SOH(\v2&.SC2APIProtocol.ResponseObserverActionH\NULR\tobsAction\DC22\n\
    \\EOTstep\CAN\f \SOH(\v2\FS.SC2APIProtocol.ResponseStepH\NULR\EOTstep\DC22\n\
    \\EOTdata\CAN\r \SOH(\v2\FS.SC2APIProtocol.ResponseDataH\NULR\EOTdata\DC25\n\
    \\ENQquery\CAN\SO \SOH(\v2\GS.SC2APIProtocol.ResponseQueryH\NULR\ENQquery\DC2E\n\
    \\vsave_replay\CAN\SI \SOH(\v2\".SC2APIProtocol.ResponseSaveReplayH\NULR\n\
    \saveReplay\DC2E\n\
    \\vreplay_info\CAN\DLE \SOH(\v2\".SC2APIProtocol.ResponseReplayInfoH\NULR\n\
    \replayInfo\DC2N\n\
    \\SOavailable_maps\CAN\DC1 \SOH(\v2%.SC2APIProtocol.ResponseAvailableMapsH\NULR\ravailableMaps\DC2<\n\
    \\bsave_map\CAN\DC2 \SOH(\v2\US.SC2APIProtocol.ResponseSaveMapH\NULR\asaveMap\DC2E\n\
    \\vmap_command\CAN\SYN \SOH(\v2\".SC2APIProtocol.ResponseMapCommandH\NULR\n\
    \mapCommand\DC22\n\
    \\EOTping\CAN\DC3 \SOH(\v2\FS.SC2APIProtocol.ResponsePingH\NULR\EOTping\DC25\n\
    \\ENQdebug\CAN\DC4 \SOH(\v2\GS.SC2APIProtocol.ResponseDebugH\NULR\ENQdebug\DC2\SO\n\
    \\STXid\CANa \SOH(\rR\STXid\DC2\DC4\n\
    \\ENQerror\CANb \ETX(\tR\ENQerror\DC2.\n\
    \\ACKstatus\CANc \SOH(\SO2\SYN.SC2APIProtocol.StatusR\ACKstatusB\n\
    \\n\
    \\bresponse\"\161\STX\n\
    \\DC1RequestCreateGame\DC27\n\
    \\tlocal_map\CAN\SOH \SOH(\v2\CAN.SC2APIProtocol.LocalMapH\NULR\blocalMap\DC2.\n\
    \\DC2battlenet_map_name\CAN\STX \SOH(\tH\NULR\DLEbattlenetMapName\DC2>\n\
    \\fplayer_setup\CAN\ETX \ETX(\v2\ESC.SC2APIProtocol.PlayerSetupR\vplayerSetup\DC2\US\n\
    \\vdisable_fog\CAN\EOT \SOH(\bR\n\
    \disableFog\DC2\US\n\
    \\vrandom_seed\CAN\ENQ \SOH(\rR\n\
    \randomSeed\DC2\SUB\n\
    \\brealtime\CAN\ACK \SOH(\bR\brealtimeB\ENQ\n\
    \\ETXMap\"@\n\
    \\bLocalMap\DC2\EM\n\
    \\bmap_path\CAN\SOH \SOH(\tR\amapPath\DC2\EM\n\
    \\bmap_data\CAN\a \SOH(\fR\amapData\"\177\STX\n\
    \\DC2ResponseCreateGame\DC2>\n\
    \\ENQerror\CAN\SOH \SOH(\SO2(.SC2APIProtocol.ResponseCreateGame.ErrorR\ENQerror\DC2#\n\
    \\rerror_details\CAN\STX \SOH(\tR\ferrorDetails\"\181\SOH\n\
    \\ENQError\DC2\SO\n\
    \\n\
    \MissingMap\DLE\SOH\DC2\DC2\n\
    \\SOInvalidMapPath\DLE\STX\DC2\DC2\n\
    \\SOInvalidMapData\DLE\ETX\DC2\DC2\n\
    \\SOInvalidMapName\DLE\EOT\DC2\DC4\n\
    \\DLEInvalidMapHandle\DLE\ENQ\DC2\SYN\n\
    \\DC2MissingPlayerSetup\DLE\ACK\DC2\SYN\n\
    \\DC2InvalidPlayerSetup\DLE\a\DC2\SUB\n\
    \\SYNMultiplayerUnsupported\DLE\b\"\141\ETX\n\
    \\SIRequestJoinGame\DC2*\n\
    \\EOTrace\CAN\SOH \SOH(\SO2\DC4.SC2APIProtocol.RaceH\NULR\EOTrace\DC2.\n\
    \\DC2observed_player_id\CAN\STX \SOH(\rH\NULR\DLEobservedPlayerId\DC2:\n\
    \\aoptions\CAN\ETX \SOH(\v2 .SC2APIProtocol.InterfaceOptionsR\aoptions\DC2:\n\
    \\fserver_ports\CAN\EOT \SOH(\v2\ETB.SC2APIProtocol.PortSetR\vserverPorts\DC2:\n\
    \\fclient_ports\CAN\ENQ \ETX(\v2\ETB.SC2APIProtocol.PortSetR\vclientPorts\DC2\US\n\
    \\vshared_port\CAN\ACK \SOH(\ENQR\n\
    \sharedPort\DC2\US\n\
    \\vplayer_name\CAN\a \SOH(\tR\n\
    \playerName\DC2\ETB\n\
    \\ahost_ip\CAN\b \SOH(\tR\ACKhostIpB\SI\n\
    \\rparticipation\"C\n\
    \\aPortSet\DC2\ESC\n\
    \\tgame_port\CAN\SOH \SOH(\ENQR\bgamePort\DC2\ESC\n\
    \\tbase_port\CAN\STX \SOH(\ENQR\bbasePort\"\161\ETX\n\
    \\DLEResponseJoinGame\DC2\ESC\n\
    \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\DC2<\n\
    \\ENQerror\CAN\STX \SOH(\SO2&.SC2APIProtocol.ResponseJoinGame.ErrorR\ENQerror\DC2#\n\
    \\rerror_details\CAN\ETX \SOH(\tR\ferrorDetails\"\140\STX\n\
    \\ENQError\DC2\CAN\n\
    \\DC4MissingParticipation\DLE\SOH\DC2\ESC\n\
    \\ETBInvalidObservedPlayerId\DLE\STX\DC2\DC2\n\
    \\SOMissingOptions\DLE\ETX\DC2\DLE\n\
    \\fMissingPorts\DLE\EOT\DC2\f\n\
    \\bGameFull\DLE\ENQ\DC2\SI\n\
    \\vLaunchError\DLE\ACK\DC2\SYN\n\
    \\DC2FeatureUnsupported\DLE\a\DC2\DC2\n\
    \\SONoSpaceForUser\DLE\b\DC2\DC3\n\
    \\SIMapDoesNotExist\DLE\t\DC2\DC1\n\
    \\rCannotOpenMap\DLE\n\
    \\DC2\DC1\n\
    \\rChecksumError\DLE\v\DC2\DLE\n\
    \\fNetworkError\DLE\f\DC2\SO\n\
    \\n\
    \OtherError\DLE\r\"\DC4\n\
    \\DC2RequestRestartGame\"\189\SOH\n\
    \\DC3ResponseRestartGame\DC2?\n\
    \\ENQerror\CAN\SOH \SOH(\SO2).SC2APIProtocol.ResponseRestartGame.ErrorR\ENQerror\DC2#\n\
    \\rerror_details\CAN\STX \SOH(\tR\ferrorDetails\DC2&\n\
    \\SIneed_hard_reset\CAN\ETX \SOH(\bR\rneedHardReset\"\CAN\n\
    \\ENQError\DC2\SI\n\
    \\vLaunchError\DLE\SOH\"\203\STX\n\
    \\DC2RequestStartReplay\DC2!\n\
    \\vreplay_path\CAN\SOH \SOH(\tH\NULR\n\
    \replayPath\DC2!\n\
    \\vreplay_data\CAN\ENQ \SOH(\fH\NULR\n\
    \replayData\DC2\EM\n\
    \\bmap_data\CAN\ACK \SOH(\fR\amapData\DC2,\n\
    \\DC2observed_player_id\CAN\STX \SOH(\ENQR\DLEobservedPlayerId\DC2:\n\
    \\aoptions\CAN\ETX \SOH(\v2 .SC2APIProtocol.InterfaceOptionsR\aoptions\DC2\US\n\
    \\vdisable_fog\CAN\EOT \SOH(\bR\n\
    \disableFog\DC2\SUB\n\
    \\brealtime\CAN\a \SOH(\bR\brealtime\DC2#\n\
    \\rrecord_replay\CAN\b \SOH(\bR\frecordReplayB\b\n\
    \\ACKreplay\"\156\STX\n\
    \\DC3ResponseStartReplay\DC2?\n\
    \\ENQerror\CAN\SOH \SOH(\SO2).SC2APIProtocol.ResponseStartReplay.ErrorR\ENQerror\DC2#\n\
    \\rerror_details\CAN\STX \SOH(\tR\ferrorDetails\"\158\SOH\n\
    \\ENQError\DC2\DC1\n\
    \\rMissingReplay\DLE\SOH\DC2\NAK\n\
    \\DC1InvalidReplayPath\DLE\STX\DC2\NAK\n\
    \\DC1InvalidReplayData\DLE\ETX\DC2\DC2\n\
    \\SOInvalidMapData\DLE\EOT\DC2\ESC\n\
    \\ETBInvalidObservedPlayerId\DLE\ENQ\DC2\DC2\n\
    \\SOMissingOptions\DLE\ACK\DC2\SI\n\
    \\vLaunchError\DLE\a\"4\n\
    \\DC1RequestMapCommand\DC2\US\n\
    \\vtrigger_cmd\CAN\SOH \SOH(\tR\n\
    \triggerCmd\"\150\SOH\n\
    \\DC2ResponseMapCommand\DC2>\n\
    \\ENQerror\CAN\SOH \SOH(\SO2(.SC2APIProtocol.ResponseMapCommand.ErrorR\ENQerror\DC2#\n\
    \\rerror_details\CAN\STX \SOH(\tR\ferrorDetails\"\ESC\n\
    \\ENQError\DC2\DC2\n\
    \\SONoTriggerError\DLE\SOH\"\DC2\n\
    \\DLERequestLeaveGame\"\DC3\n\
    \\DC1ResponseLeaveGame\"\DC2\n\
    \\DLERequestQuickSave\"\DC3\n\
    \\DC1ResponseQuickSave\"\DC2\n\
    \\DLERequestQuickLoad\"\DC3\n\
    \\DC1ResponseQuickLoad\"\r\n\
    \\vRequestQuit\"\SO\n\
    \\fResponseQuit\"\DC1\n\
    \\SIRequestGameInfo\"\160\STX\n\
    \\DLEResponseGameInfo\DC2\EM\n\
    \\bmap_name\CAN\SOH \SOH(\tR\amapName\DC2\ESC\n\
    \\tmod_names\CAN\ACK \ETX(\tR\bmodNames\DC2$\n\
    \\SOlocal_map_path\CAN\STX \SOH(\tR\flocalMapPath\DC2;\n\
    \\vplayer_info\CAN\ETX \ETX(\v2\SUB.SC2APIProtocol.PlayerInfoR\n\
    \playerInfo\DC25\n\
    \\tstart_raw\CAN\EOT \SOH(\v2\CAN.SC2APIProtocol.StartRawR\bstartRaw\DC2:\n\
    \\aoptions\CAN\ENQ \SOH(\v2 .SC2APIProtocol.InterfaceOptionsR\aoptions\"R\n\
    \\DC2RequestObservation\DC2\US\n\
    \\vdisable_fog\CAN\SOH \SOH(\bR\n\
    \disableFog\DC2\ESC\n\
    \\tgame_loop\CAN\STX \SOH(\rR\bgameLoop\"\189\STX\n\
    \\DC3ResponseObservation\DC20\n\
    \\aactions\CAN\SOH \ETX(\v2\SYN.SC2APIProtocol.ActionR\aactions\DC2@\n\
    \\raction_errors\CAN\STX \ETX(\v2\ESC.SC2APIProtocol.ActionErrorR\factionErrors\DC2=\n\
    \\vobservation\CAN\ETX \SOH(\v2\ESC.SC2APIProtocol.ObservationR\vobservation\DC2A\n\
    \\rplayer_result\CAN\EOT \ETX(\v2\FS.SC2APIProtocol.PlayerResultR\fplayerResult\DC20\n\
    \\EOTchat\CAN\ENQ \ETX(\v2\FS.SC2APIProtocol.ChatReceivedR\EOTchat\"E\n\
    \\fChatReceived\DC2\ESC\n\
    \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\DC2\CAN\n\
    \\amessage\CAN\STX \SOH(\tR\amessage\"A\n\
    \\rRequestAction\DC20\n\
    \\aactions\CAN\SOH \ETX(\v2\SYN.SC2APIProtocol.ActionR\aactions\"F\n\
    \\SOResponseAction\DC24\n\
    \\ACKresult\CAN\SOH \ETX(\SO2\FS.SC2APIProtocol.ActionResultR\ACKresult\"Q\n\
    \\NAKRequestObserverAction\DC28\n\
    \\aactions\CAN\SOH \ETX(\v2\RS.SC2APIProtocol.ObserverActionR\aactions\"\CAN\n\
    \\SYNResponseObserverAction\"#\n\
    \\vRequestStep\DC2\DC4\n\
    \\ENQcount\CAN\SOH \SOH(\rR\ENQcount\"7\n\
    \\fResponseStep\DC2'\n\
    \\SIsimulation_loop\CAN\SOH \SOH(\rR\SOsimulationLoop\"\163\SOH\n\
    \\vRequestData\DC2\GS\n\
    \\n\
    \ability_id\CAN\SOH \SOH(\bR\tabilityId\DC2 \n\
    \\funit_type_id\CAN\STX \SOH(\bR\n\
    \unitTypeId\DC2\GS\n\
    \\n\
    \upgrade_id\CAN\ETX \SOH(\bR\tupgradeId\DC2\ETB\n\
    \\abuff_id\CAN\EOT \SOH(\bR\ACKbuffId\DC2\ESC\n\
    \\teffect_id\CAN\ENQ \SOH(\bR\beffectId\"\156\STX\n\
    \\fResponseData\DC29\n\
    \\tabilities\CAN\SOH \ETX(\v2\ESC.SC2APIProtocol.AbilityDataR\tabilities\DC22\n\
    \\ENQunits\CAN\STX \ETX(\v2\FS.SC2APIProtocol.UnitTypeDataR\ENQunits\DC27\n\
    \\bupgrades\CAN\ETX \ETX(\v2\ESC.SC2APIProtocol.UpgradeDataR\bupgrades\DC2.\n\
    \\ENQbuffs\CAN\EOT \ETX(\v2\CAN.SC2APIProtocol.BuffDataR\ENQbuffs\DC24\n\
    \\aeffects\CAN\ENQ \ETX(\v2\SUB.SC2APIProtocol.EffectDataR\aeffects\"\DC3\n\
    \\DC1RequestSaveReplay\"(\n\
    \\DC2ResponseSaveReplay\DC2\DC2\n\
    \\EOTdata\CAN\SOH \SOH(\fR\EOTdata\"\136\SOH\n\
    \\DC1RequestReplayInfo\DC2!\n\
    \\vreplay_path\CAN\SOH \SOH(\tH\NULR\n\
    \replayPath\DC2!\n\
    \\vreplay_data\CAN\STX \SOH(\fH\NULR\n\
    \replayData\DC2#\n\
    \\rdownload_data\CAN\ETX \SOH(\bR\fdownloadDataB\b\n\
    \\ACKreplay\"\207\SOH\n\
    \\SIPlayerInfoExtra\DC2;\n\
    \\vplayer_info\CAN\SOH \SOH(\v2\SUB.SC2APIProtocol.PlayerInfoR\n\
    \playerInfo\DC2A\n\
    \\rplayer_result\CAN\STX \SOH(\v2\FS.SC2APIProtocol.PlayerResultR\fplayerResult\DC2\GS\n\
    \\n\
    \player_mmr\CAN\ETX \SOH(\ENQR\tplayerMmr\DC2\GS\n\
    \\n\
    \player_apm\CAN\EOT \SOH(\ENQR\tplayerApm\"\211\EOT\n\
    \\DC2ResponseReplayInfo\DC2\EM\n\
    \\bmap_name\CAN\SOH \SOH(\tR\amapName\DC2$\n\
    \\SOlocal_map_path\CAN\STX \SOH(\tR\flocalMapPath\DC2@\n\
    \\vplayer_info\CAN\ETX \ETX(\v2\US.SC2APIProtocol.PlayerInfoExtraR\n\
    \playerInfo\DC2.\n\
    \\DC3game_duration_loops\CAN\EOT \SOH(\rR\DC1gameDurationLoops\DC22\n\
    \\NAKgame_duration_seconds\CAN\ENQ \SOH(\STXR\DC3gameDurationSeconds\DC2!\n\
    \\fgame_version\CAN\ACK \SOH(\tR\vgameVersion\DC2!\n\
    \\fdata_version\CAN\v \SOH(\tR\vdataVersion\DC2\GS\n\
    \\n\
    \data_build\CAN\a \SOH(\rR\tdataBuild\DC2\GS\n\
    \\n\
    \base_build\CAN\b \SOH(\rR\tbaseBuild\DC2>\n\
    \\ENQerror\CAN\t \SOH(\SO2(.SC2APIProtocol.ResponseReplayInfo.ErrorR\ENQerror\DC2#\n\
    \\rerror_details\CAN\n\
    \ \SOH(\tR\ferrorDetails\"m\n\
    \\ENQError\DC2\DC1\n\
    \\rMissingReplay\DLE\SOH\DC2\NAK\n\
    \\DC1InvalidReplayPath\DLE\STX\DC2\NAK\n\
    \\DC1InvalidReplayData\DLE\ETX\DC2\DLE\n\
    \\fParsingError\DLE\EOT\DC2\DC1\n\
    \\rDownloadError\DLE\ENQ\"\SYN\n\
    \\DC4RequestAvailableMaps\"o\n\
    \\NAKResponseAvailableMaps\DC2&\n\
    \\SIlocal_map_paths\CAN\SOH \ETX(\tR\rlocalMapPaths\DC2.\n\
    \\DC3battlenet_map_names\CAN\STX \ETX(\tR\DC1battlenetMapNames\"F\n\
    \\SORequestSaveMap\DC2\EM\n\
    \\bmap_path\CAN\SOH \SOH(\tR\amapPath\DC2\EM\n\
    \\bmap_data\CAN\STX \SOH(\fR\amapData\"k\n\
    \\SIResponseSaveMap\DC2;\n\
    \\ENQerror\CAN\SOH \SOH(\SO2%.SC2APIProtocol.ResponseSaveMap.ErrorR\ENQerror\"\ESC\n\
    \\ENQError\DC2\DC2\n\
    \\SOInvalidMapData\DLE\SOH\"\r\n\
    \\vRequestPing\"\146\SOH\n\
    \\fResponsePing\DC2!\n\
    \\fgame_version\CAN\SOH \SOH(\tR\vgameVersion\DC2!\n\
    \\fdata_version\CAN\STX \SOH(\tR\vdataVersion\DC2\GS\n\
    \\n\
    \data_build\CAN\ETX \SOH(\rR\tdataBuild\DC2\GS\n\
    \\n\
    \base_build\CAN\EOT \SOH(\rR\tbaseBuild\"B\n\
    \\fRequestDebug\DC22\n\
    \\ENQdebug\CAN\SOH \ETX(\v2\FS.SC2APIProtocol.DebugCommandR\ENQdebug\"\SI\n\
    \\rResponseDebug\"\248\SOH\n\
    \\vPlayerSetup\DC2.\n\
    \\EOTtype\CAN\SOH \SOH(\SO2\SUB.SC2APIProtocol.PlayerTypeR\EOTtype\DC2(\n\
    \\EOTrace\CAN\STX \SOH(\SO2\DC4.SC2APIProtocol.RaceR\EOTrace\DC2:\n\
    \\n\
    \difficulty\CAN\ETX \SOH(\SO2\SUB.SC2APIProtocol.DifficultyR\n\
    \difficulty\DC2\US\n\
    \\vplayer_name\CAN\EOT \SOH(\tR\n\
    \playerName\DC22\n\
    \\bai_build\CAN\ENQ \SOH(\SO2\ETB.SC2APIProtocol.AIBuildR\aaiBuild\"\146\STX\n\
    \\DC2SpatialCameraSetup\DC27\n\
    \\n\
    \resolution\CAN\STX \SOH(\v2\ETB.SC2APIProtocol.Size2DIR\n\
    \resolution\DC2F\n\
    \\DC2minimap_resolution\CAN\ETX \SOH(\v2\ETB.SC2APIProtocol.Size2DIR\DC1minimapResolution\DC2\DC4\n\
    \\ENQwidth\CAN\SOH \SOH(\STXR\ENQwidth\DC21\n\
    \\NAKcrop_to_playable_area\CAN\EOT \SOH(\bR\DC2cropToPlayableArea\DC22\n\
    \\NAKallow_cheating_layers\CAN\ENQ \SOH(\bR\DC3allowCheatingLayers\"\177\ETX\n\
    \\DLEInterfaceOptions\DC2\DLE\n\
    \\ETXraw\CAN\SOH \SOH(\bR\ETXraw\DC2\DC4\n\
    \\ENQscore\CAN\STX \SOH(\bR\ENQscore\DC2G\n\
    \\rfeature_layer\CAN\ETX \SOH(\v2\".SC2APIProtocol.SpatialCameraSetupR\ffeatureLayer\DC2:\n\
    \\ACKrender\CAN\EOT \SOH(\v2\".SC2APIProtocol.SpatialCameraSetupR\ACKrender\DC2!\n\
    \\fshow_cloaked\CAN\ENQ \SOH(\bR\vshowCloaked\DC22\n\
    \\NAKshow_burrowed_shadows\CAN\t \SOH(\bR\DC3showBurrowedShadows\DC2+\n\
    \\DC1show_placeholders\CAN\b \SOH(\bR\DLEshowPlaceholders\DC22\n\
    \\NAKraw_affects_selection\CAN\ACK \SOH(\bR\DC3rawAffectsSelection\DC28\n\
    \\EMraw_crop_to_playable_area\CAN\a \SOH(\bR\NAKrawCropToPlayableArea\"\222\STX\n\
    \\n\
    \PlayerInfo\DC2\ESC\n\
    \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\DC2.\n\
    \\EOTtype\CAN\STX \SOH(\SO2\SUB.SC2APIProtocol.PlayerTypeR\EOTtype\DC2;\n\
    \\SOrace_requested\CAN\ETX \SOH(\SO2\DC4.SC2APIProtocol.RaceR\rraceRequested\DC25\n\
    \\vrace_actual\CAN\EOT \SOH(\SO2\DC4.SC2APIProtocol.RaceR\n\
    \raceActual\DC2:\n\
    \\n\
    \difficulty\CAN\ENQ \SOH(\SO2\SUB.SC2APIProtocol.DifficultyR\n\
    \difficulty\DC22\n\
    \\bai_build\CAN\a \SOH(\SO2\ETB.SC2APIProtocol.AIBuildR\aaiBuild\DC2\US\n\
    \\vplayer_name\CAN\ACK \SOH(\tR\n\
    \playerName\"\237\STX\n\
    \\fPlayerCommon\DC2\ESC\n\
    \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\DC2\SUB\n\
    \\bminerals\CAN\STX \SOH(\rR\bminerals\DC2\CAN\n\
    \\avespene\CAN\ETX \SOH(\rR\avespene\DC2\EM\n\
    \\bfood_cap\CAN\EOT \SOH(\rR\afoodCap\DC2\ESC\n\
    \\tfood_used\CAN\ENQ \SOH(\rR\bfoodUsed\DC2\ESC\n\
    \\tfood_army\CAN\ACK \SOH(\rR\bfoodArmy\DC2!\n\
    \\ffood_workers\CAN\a \SOH(\rR\vfoodWorkers\DC2*\n\
    \\DC1idle_worker_count\CAN\b \SOH(\rR\SIidleWorkerCount\DC2\GS\n\
    \\n\
    \army_count\CAN\t \SOH(\rR\tarmyCount\DC2&\n\
    \\SIwarp_gate_count\CAN\n\
    \ \SOH(\rR\rwarpGateCount\DC2\US\n\
    \\vlarva_count\CAN\v \SOH(\rR\n\
    \larvaCount\"\151\EOT\n\
    \\vObservation\DC2\ESC\n\
    \\tgame_loop\CAN\t \SOH(\rR\bgameLoop\DC2A\n\
    \\rplayer_common\CAN\SOH \SOH(\v2\FS.SC2APIProtocol.PlayerCommonR\fplayerCommon\DC2-\n\
    \\ACKalerts\CAN\n\
    \ \ETX(\SO2\NAK.SC2APIProtocol.AlertR\ACKalerts\DC2>\n\
    \\tabilities\CAN\ETX \ETX(\v2 .SC2APIProtocol.AvailableAbilityR\tabilities\DC2+\n\
    \\ENQscore\CAN\EOT \SOH(\v2\NAK.SC2APIProtocol.ScoreR\ENQscore\DC29\n\
    \\braw_data\CAN\ENQ \SOH(\v2\RS.SC2APIProtocol.ObservationRawR\arawData\DC2U\n\
    \\DC2feature_layer_data\CAN\ACK \SOH(\v2'.SC2APIProtocol.ObservationFeatureLayerR\DLEfeatureLayerData\DC2B\n\
    \\vrender_data\CAN\a \SOH(\v2!.SC2APIProtocol.ObservationRenderR\n\
    \renderData\DC26\n\
    \\aui_data\CAN\b \SOH(\v2\GS.SC2APIProtocol.ObservationUIR\ACKuiData\"\232\STX\n\
    \\ACKAction\DC28\n\
    \\n\
    \action_raw\CAN\SOH \SOH(\v2\EM.SC2APIProtocol.ActionRawR\tactionRaw\DC2O\n\
    \\DC4action_feature_layer\CAN\STX \SOH(\v2\GS.SC2APIProtocol.ActionSpatialR\DC2actionFeatureLayer\DC2B\n\
    \\raction_render\CAN\ETX \SOH(\v2\GS.SC2APIProtocol.ActionSpatialR\factionRender\DC25\n\
    \\taction_ui\CAN\EOT \SOH(\v2\CAN.SC2APIProtocol.ActionUIR\bactionUi\DC2;\n\
    \\vaction_chat\CAN\ACK \SOH(\v2\SUB.SC2APIProtocol.ActionChatR\n\
    \actionChat\DC2\ESC\n\
    \\tgame_loop\CAN\a \SOH(\rR\bgameLoop\"\136\SOH\n\
    \\n\
    \ActionChat\DC2<\n\
    \\achannel\CAN\SOH \SOH(\SO2\".SC2APIProtocol.ActionChat.ChannelR\achannel\DC2\CAN\n\
    \\amessage\CAN\STX \SOH(\tR\amessage\"\"\n\
    \\aChannel\DC2\r\n\
    \\tBroadcast\DLE\SOH\DC2\b\n\
    \\EOTTeam\DLE\STX\"}\n\
    \\vActionError\DC2\EM\n\
    \\bunit_tag\CAN\SOH \SOH(\EOTR\aunitTag\DC2\GS\n\
    \\n\
    \ability_id\CAN\STX \SOH(\EOTR\tabilityId\DC24\n\
    \\ACKresult\CAN\ETX \SOH(\SO2\FS.SC2APIProtocol.ActionResultR\ACKresult\"\146\ETX\n\
    \\SOObserverAction\DC2`\n\
    \\DC2player_perspective\CAN\SOH \SOH(\v2/.SC2APIProtocol.ActionObserverPlayerPerspectiveH\NULR\DC1playerPerspective\DC2K\n\
    \\vcamera_move\CAN\STX \SOH(\v2(.SC2APIProtocol.ActionObserverCameraMoveH\NULR\n\
    \cameraMove\DC2d\n\
    \\DC4camera_follow_player\CAN\ETX \SOH(\v20.SC2APIProtocol.ActionObserverCameraFollowPlayerH\NULR\DC2cameraFollowPlayer\DC2a\n\
    \\DC3camera_follow_units\CAN\EOT \SOH(\v2/.SC2APIProtocol.ActionObserverCameraFollowUnitsH\NULR\DC1cameraFollowUnitsB\b\n\
    \\ACKaction\">\n\
    \\USActionObserverPlayerPerspective\DC2\ESC\n\
    \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\"l\n\
    \\CANActionObserverCameraMove\DC24\n\
    \\tworld_pos\CAN\SOH \SOH(\v2\ETB.SC2APIProtocol.Point2DR\bworldPos\DC2\SUB\n\
    \\bdistance\CAN\STX \SOH(\STXR\bdistance\"?\n\
    \ ActionObserverCameraFollowPlayer\DC2\ESC\n\
    \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\">\n\
    \\USActionObserverCameraFollowUnits\DC2\ESC\n\
    \\tunit_tags\CAN\SOH \ETX(\EOTR\bunitTags\"[\n\
    \\fPlayerResult\DC2\ESC\n\
    \\tplayer_id\CAN\SOH \SOH(\rR\bplayerId\DC2.\n\
    \\ACKresult\CAN\STX \SOH(\SO2\SYN.SC2APIProtocol.ResultR\ACKresult*c\n\
    \\ACKStatus\DC2\f\n\
    \\blaunched\DLE\SOH\DC2\r\n\
    \\tinit_game\DLE\STX\DC2\v\n\
    \\ain_game\DLE\ETX\DC2\r\n\
    \\tin_replay\DLE\EOT\DC2\t\n\
    \\ENQended\DLE\ENQ\DC2\b\n\
    \\EOTquit\DLE\ACK\DC2\v\n\
    \\aunknown\DLEc*\150\SOH\n\
    \\n\
    \Difficulty\DC2\f\n\
    \\bVeryEasy\DLE\SOH\DC2\b\n\
    \\EOTEasy\DLE\STX\DC2\n\
    \\n\
    \\ACKMedium\DLE\ETX\DC2\SO\n\
    \\n\
    \MediumHard\DLE\EOT\DC2\b\n\
    \\EOTHard\DLE\ENQ\DC2\n\
    \\n\
    \\ACKHarder\DLE\ACK\DC2\f\n\
    \\bVeryHard\DLE\a\DC2\SI\n\
    \\vCheatVision\DLE\b\DC2\SO\n\
    \\n\
    \CheatMoney\DLE\t\DC2\SI\n\
    \\vCheatInsane\DLE\n\
    \*9\n\
    \\n\
    \PlayerType\DC2\SI\n\
    \\vParticipant\DLE\SOH\DC2\f\n\
    \\bComputer\DLE\STX\DC2\f\n\
    \\bObserver\DLE\ETX*O\n\
    \\aAIBuild\DC2\SI\n\
    \\vRandomBuild\DLE\SOH\DC2\b\n\
    \\EOTRush\DLE\STX\DC2\n\
    \\n\
    \\ACKTiming\DLE\ETX\DC2\t\n\
    \\ENQPower\DLE\EOT\DC2\t\n\
    \\ENQMacro\DLE\ENQ\DC2\a\n\
    \\ETXAir\DLE\ACK*\219\ETX\n\
    \\ENQAlert\DC2\SO\n\
    \\n\
    \AlertError\DLE\ETX\DC2\DC1\n\
    \\rAddOnComplete\DLE\EOT\DC2\DC4\n\
    \\DLEBuildingComplete\DLE\ENQ\DC2\ETB\n\
    \\DC3BuildingUnderAttack\DLE\ACK\DC2\DLE\n\
    \\fLarvaHatched\DLE\a\DC2\DC1\n\
    \\rMergeComplete\DLE\b\DC2\NAK\n\
    \\DC1MineralsExhausted\DLE\t\DC2\DC1\n\
    \\rMorphComplete\DLE\n\
    \\DC2\SYN\n\
    \\DC2MothershipComplete\DLE\v\DC2\SI\n\
    \\vMULEExpired\DLE\f\DC2\EM\n\
    \\NAKNuclearLaunchDetected\DLE\SOH\DC2\DLE\n\
    \\fNukeComplete\DLE\r\DC2\NAK\n\
    \\DC1NydusWormDetected\DLE\STX\DC2\DC4\n\
    \\DLEResearchComplete\DLE\SO\DC2\SO\n\
    \\n\
    \TrainError\DLE\SI\DC2\NAK\n\
    \\DC1TrainUnitComplete\DLE\DLE\DC2\ETB\n\
    \\DC3TrainWorkerComplete\DLE\DC1\DC2\SUB\n\
    \\SYNTransformationComplete\DLE\DC2\DC2\DC3\n\
    \\SIUnitUnderAttack\DLE\DC3\DC2\DC3\n\
    \\SIUpgradeComplete\DLE\DC4\DC2\DC4\n\
    \\DLEVespeneExhausted\DLE\NAK\DC2\DC2\n\
    \\SOWarpInComplete\DLE\SYN*9\n\
    \\ACKResult\DC2\v\n\
    \\aVictory\DLE\SOH\DC2\n\
    \\n\
    \\ACKDefeat\DLE\STX\DC2\a\n\
    \\ETXTie\DLE\ETX\DC2\r\n\
    \\tUndecided\DLE\EOTJ\232\146\STX\n\
    \\a\DC2\ENQ\SOH\NUL\205\ENQ\SOH\n\
    \\b\n\
    \\SOH\f\DC2\ETX\SOH\NUL\DC2\n\
    \\b\n\
    \\SOH\STX\DC2\ETX\ETX\NUL\ETB\n\
    \\t\n\
    \\STX\ETX\NUL\DC2\ETX\ENQ\NUL'\n\
    \\t\n\
    \\STX\ETX\SOH\DC2\ETX\ACK\NUL%\n\
    \\t\n\
    \\STX\ETX\STX\DC2\ETX\a\NUL&\n\
    \\t\n\
    \\STX\ETX\ETX\DC2\ETX\b\NUL&\n\
    \\t\n\
    \\STX\ETX\EOT\DC2\ETX\t\NUL&\n\
    \\t\n\
    \\STX\ETX\ENQ\DC2\ETX\n\
    \\NUL$\n\
    \\t\n\
    \\STX\ETX\ACK\DC2\ETX\v\NUL&\n\
    \\t\n\
    \\STX\ETX\a\DC2\ETX\f\NUL(\n\
    \\t\n\
    \\STX\ETX\b\DC2\ETX\r\NUL#\n\
    \\169&\n\
    \\STX\EOT\NUL\DC2\EOTS\NULv\SOH2\134&\n\
    \ Notes:\n\
    \  Single player flow:\n\
    \    1) Call Request.create_game with a valid single player map (a multiplayer map will end right away).\n\
    \    2) Call Request.join_game, wait for the response.\n\
    \    3) Request.end will terminate the game. Observations can still be made.\n\
    \  Multi-player flow:\n\
    \    1) Launch two game instances with separate ports.\n\
    \    2) Designate a host, and Request.create_game with a multiplayer map.\n\
    \    3) Call Request.join on BOTH clients. Join will block until both clients connect.\n\
    \    4) Wait for a response from both clients. They can now play/step.\n\
    \    5) Steps should be syncronized. One client may time out if they are not. Multiple step sizes are ok.\n\
    \    4) Call Request.leave at any point or when the game ends. Observations will not be valid after this.\n\
    \\n\
    \ States:\n\
    \\n\
    \------------------|---------------------------------------------------|-----------------------|\n\
    \  Request         | Valid in State                                    | Transition to State   |\n\
    \------------------|---------------------------------------------------|-----------------------|\n\
    \ create_game      | launched                                          | init_game             |\n\
    \                  | ended (singleplayer only)                         | init_game             |\n\
    \ join_game*       | init_game (singleplayer or multiplayer host only) | in_game               |\n\
    \                  | launched (multiplayer client only)                | in_game               |\n\
    \ restart_game     | ended                                             | in_game               |\n\
    \ start_replay     | launched                                          | in_replay             |\n\
    \                  | ended (singleplayer only)                         |                       |\n\
    \ leave_game       | in_game (required when finishing multiplayer)     | launched              |\n\
    \ quick_save       | in_game                                           |                       |\n\
    \ quick_load       | in_game                                           |                       |\n\
    \                  | ended                                             |                       |\n\
    \ quit             | any                                               | quit (not sent)       |\n\
    \ game_info        | in_game                                           |                       |\n\
    \                  | in_replay                                         |                       |\n\
    \                  | ended                                             |                       |\n\
    \ observation      | in_game                                           |                       |\n\
    \                  | in_replay                                         |                       |\n\
    \                  | ended                                             |                       |\n\
    \ step*            | in_game (not available in realtime mode)          | in_game               |\n\
    \                  | in_replay                                         | ended                 |\n\
    \ action           | in_game (not available to observers)              |                       |\n\
    \ obs_action       | in_game (only for observers)                      |                       |\n\
    \                  | in_replay                                         |                       |\n\
    \ data             | in_game                                           |                       |\n\
    \                  | in_replay                                         |                       |\n\
    \                  | ended                                             |                       |\n\
    \ query            | in_game                                           |                       |\n\
    \                  | in_replay                                         |                       |\n\
    \                  | ended                                             |                       |\n\
    \ save_replay      | in_game                                           |                       |\n\
    \                  | ended (only after a game)                         |                       |\n\
    \ map_command      | in_game                                           |                       |\n\
    \ replay_info      | any                                               |                       |\n\
    \ available_maps   | any                                               |                       |\n\
    \ save_map         | any                                               |                       |\n\
    \ ping             | any                                               |                       |\n\
    \ debug            | in_game                                           | various               |\n\
    \------------------|---------------------------------------------------|-----------------------|\n\
    \\n\
    \ * In multiplayer, these require synchronization between clients.\n\
    \\n\
    \ Notes:\n\
    \      - if a request fails, the game remains in the current state.\n\
    \\n\
    \2\DC4\n\
    \ Request/Response\n\
    \\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\NUL\SOH\DC2\ETXS\b\SI\n\
    \\f\n\
    \\EOT\EOT\NUL\b\NUL\DC2\EOTT\STXt\ETX\n\
    \\f\n\
    \\ENQ\EOT\NUL\b\NUL\SOH\DC2\ETXT\b\SI\n\
    \=\n\
    \\EOT\EOT\NUL\STX\NUL\DC2\ETXV\EOT&\SUB\f Game Setup\n\
    \\"\" Send to host to initialize game.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\ACK\DC2\ETXV\EOT\NAK\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\SOH\DC2\ETXV\SYN!\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\ETX\DC2\ETXV$%\n\
    \>\n\
    \\EOT\EOT\NUL\STX\SOH\DC2\ETXW\EOT\"\"1 Send to host and all clients for game to begin.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\ACK\DC2\ETXW\EOT\DC3\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\SOH\DC2\ETXW\DC4\GS\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\ETX\DC2\ETXW !\n\
    \U\n\
    \\EOT\EOT\NUL\STX\STX\DC2\ETXX\EOT(\"H Single player only. Reinitializes the game with the same player setup.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\ACK\DC2\ETXX\EOT\SYN\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\SOH\DC2\ETXX\ETB#\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\ETX\DC2\ETXX&'\n\
    \&\n\
    \\EOT\EOT\NUL\STX\ETX\DC2\ETXY\EOT(\"\EM Start playing a replay.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\ACK\DC2\ETXY\EOT\SYN\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\SOH\DC2\ETXY\ETB#\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\ETX\DC2\ETXY&'\n\
    \^\n\
    \\EOT\EOT\NUL\STX\EOT\DC2\ETXZ\EOT$\"Q Multiplayer only. Disconnects from a multiplayer game, equivalent to surrender.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\ACK\DC2\ETXZ\EOT\DC4\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\SOH\DC2\ETXZ\NAK\US\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\ETX\DC2\ETXZ\"#\n\
    \3\n\
    \\EOT\EOT\NUL\STX\ENQ\DC2\ETX\\\EOT$\"& Saves game to an in-memory bookmark.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ENQ\ACK\DC2\ETX\\\EOT\DC4\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ENQ\SOH\DC2\ETX\\\NAK\US\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ENQ\ETX\DC2\ETX\\\"#\n\
    \0\n\
    \\EOT\EOT\NUL\STX\ACK\DC2\ETX]\EOT$\"# Loads from an in-memory bookmark.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ACK\ACK\DC2\ETX]\EOT\DC4\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ACK\SOH\DC2\ETX]\NAK\US\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ACK\ETX\DC2\ETX]\"#\n\
    \*\n\
    \\EOT\EOT\NUL\STX\a\DC2\ETX_\EOT\EM\"\GS Terminates the application.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\a\ACK\DC2\ETX_\EOT\SI\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\a\SOH\DC2\ETX_\DLE\DC4\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\a\ETX\DC2\ETX_\ETB\CAN\n\
    \I\n\
    \\EOT\EOT\NUL\STX\b\DC2\ETXb\EOT\"\SUB\r During Game\n\
    \\"- Static data about the current game and map.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\b\ACK\DC2\ETXb\EOT\DC3\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\b\SOH\DC2\ETXb\DC4\GS\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\b\ETX\DC2\ETXb !\n\
    \2\n\
    \\EOT\EOT\NUL\STX\t\DC2\ETXc\EOT(\"% Snapshot of the current game state.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\t\ACK\DC2\ETXc\EOT\SYN\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\t\SOH\DC2\ETXc\ETB\"\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\t\ETX\DC2\ETXc%'\n\
    \4\n\
    \\EOT\EOT\NUL\STX\n\
    \\DC2\ETXd\EOT\RS\"' Executes an action for a participant.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\n\
    \\ACK\DC2\ETXd\EOT\DC1\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\n\
    \\SOH\DC2\ETXd\DC2\CAN\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\n\
    \\ETX\DC2\ETXd\ESC\GS\n\
    \2\n\
    \\EOT\EOT\NUL\STX\v\DC2\ETXe\EOT*\"% Executes an action for an observer.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\v\ACK\DC2\ETXe\EOT\EM\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\v\SOH\DC2\ETXe\SUB$\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\v\ETX\DC2\ETXe')\n\
    \,\n\
    \\EOT\EOT\NUL\STX\f\DC2\ETXf\EOT\SUB\"\US Advances the game simulation.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\f\ACK\DC2\ETXf\EOT\SI\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\f\SOH\DC2\ETXf\DLE\DC4\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\f\ETX\DC2\ETXf\ETB\EM\n\
    \\\\n\
    \\EOT\EOT\NUL\STX\r\DC2\ETXg\EOT\SUB\"O Data about different gameplay elements. May be different for different games.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\r\ACK\DC2\ETXg\EOT\SI\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\r\SOH\DC2\ETXg\DLE\DC4\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\r\ETX\DC2\ETXg\ETB\EM\n\
    \<\n\
    \\EOT\EOT\NUL\STX\SO\DC2\ETXh\EOT\FS\"/ Additional methods for inspecting game state.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SO\ACK\DC2\ETXh\EOT\DLE\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SO\SOH\DC2\ETXh\DC1\SYN\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SO\ETX\DC2\ETXh\EM\ESC\n\
    \\"\n\
    \\EOT\EOT\NUL\STX\SI\DC2\ETXi\EOT'\"\NAK Generates a replay.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SI\ACK\DC2\ETXi\EOT\NAK\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SI\SOH\DC2\ETXi\SYN!\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SI\ETX\DC2\ETXi$&\n\
    \F\n\
    \\EOT\EOT\NUL\STX\DLE\DC2\ETXj\EOT'\"9 Execute a particular trigger through a string interface\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DLE\ACK\DC2\ETXj\EOT\NAK\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DLE\SOH\DC2\ETXj\SYN!\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DLE\ETX\DC2\ETXj$&\n\
    \X\n\
    \\EOT\EOT\NUL\STX\DC1\DC2\ETXm\EOT'\SUB\b Other.\n\
    \\"A Returns metadata about a replay file. Does not load the replay.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC1\ACK\DC2\ETXm\EOT\NAK\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC1\SOH\DC2\ETXm\SYN!\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC1\ETX\DC2\ETXm$&\n\
    \?\n\
    \\EOT\EOT\NUL\STX\DC2\DC2\ETXn\EOT-\"2 Returns directory of maps that can be played on.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC2\ACK\DC2\ETXn\EOT\CAN\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC2\SOH\DC2\ETXn\EM'\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC2\ETX\DC2\ETXn*,\n\
    \A\n\
    \\EOT\EOT\NUL\STX\DC3\DC2\ETXo\EOT!\"4 Saves binary map data to the local temp directory.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC3\ACK\DC2\ETXo\EOT\DC2\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC3\SOH\DC2\ETXo\DC3\ESC\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC3\ETX\DC2\ETXo\RS \n\
    \@\n\
    \\EOT\EOT\NUL\STX\DC4\DC2\ETXr\EOT\SUB\SUB\v Debugging\n\
    \\"& Network ping for testing connection.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC4\ACK\DC2\ETXr\EOT\SI\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC4\SOH\DC2\ETXr\DLE\DC4\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\DC4\ETX\DC2\ETXr\ETB\EM\n\
    \C\n\
    \\EOT\EOT\NUL\STX\NAK\DC2\ETXs\EOT\FS\"6 Display debug information and execute debug actions.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NAK\ACK\DC2\ETXs\EOT\DLE\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NAK\SOH\DC2\ETXs\DC1\SYN\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NAK\ETX\DC2\ETXs\EM\ESC\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\SYN\DC2\ETXu\STX\SUB\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SYN\EOT\DC2\ETXu\STX\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SYN\ENQ\DC2\ETXu\v\DC1\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SYN\SOH\DC2\ETXu\DC2\DC4\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SYN\ETX\DC2\ETXu\ETB\EM\n\
    \\v\n\
    \\STX\EOT\SOH\DC2\ENQx\NUL\154\SOH\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\SOH\SOH\DC2\ETXx\b\DLE\n\
    \\r\n\
    \\EOT\EOT\SOH\b\NUL\DC2\ENQy\STX\150\SOH\ETX\n\
    \\f\n\
    \\ENQ\EOT\SOH\b\NUL\SOH\DC2\ETXy\b\DLE\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\NUL\DC2\ETXz\EOT'\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\ACK\DC2\ETXz\EOT\SYN\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\SOH\DC2\ETXz\ETB\"\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\ETX\DC2\ETXz%&\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\SOH\DC2\ETX{\EOT#\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\ACK\DC2\ETX{\EOT\DC4\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\SOH\DC2\ETX{\NAK\RS\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\ETX\DC2\ETX{!\"\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\STX\DC2\ETX|\EOT)\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\ACK\DC2\ETX|\EOT\ETB\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\SOH\DC2\ETX|\CAN$\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\ETX\DC2\ETX|'(\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\ETX\DC2\ETX}\EOT)\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\ACK\DC2\ETX}\EOT\ETB\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\SOH\DC2\ETX}\CAN$\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\ETX\DC2\ETX}'(\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\EOT\DC2\ETX~\EOT%\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\ACK\DC2\ETX~\EOT\NAK\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\SOH\DC2\ETX~\SYN \n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\ETX\DC2\ETX~#$\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\ENQ\DC2\EOT\128\SOH\EOT%\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\ENQ\ACK\DC2\EOT\128\SOH\EOT\NAK\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\ENQ\SOH\DC2\EOT\128\SOH\SYN \n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\ENQ\ETX\DC2\EOT\128\SOH#$\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\ACK\DC2\EOT\129\SOH\EOT%\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\ACK\ACK\DC2\EOT\129\SOH\EOT\NAK\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\ACK\SOH\DC2\EOT\129\SOH\SYN \n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\ACK\ETX\DC2\EOT\129\SOH#$\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\a\DC2\EOT\131\SOH\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\a\ACK\DC2\EOT\131\SOH\EOT\DLE\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\a\SOH\DC2\EOT\131\SOH\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\a\ETX\DC2\EOT\131\SOH\CAN\EM\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\b\DC2\EOT\133\SOH\EOT#\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\b\ACK\DC2\EOT\133\SOH\EOT\DC4\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\b\SOH\DC2\EOT\133\SOH\NAK\RS\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\b\ETX\DC2\EOT\133\SOH!\"\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\t\DC2\EOT\134\SOH\EOT)\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\t\ACK\DC2\EOT\134\SOH\EOT\ETB\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\t\SOH\DC2\EOT\134\SOH\CAN#\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\t\ETX\DC2\EOT\134\SOH&(\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\n\
    \\DC2\EOT\135\SOH\EOT\US\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\n\
    \\ACK\DC2\EOT\135\SOH\EOT\DC2\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\n\
    \\SOH\DC2\EOT\135\SOH\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\n\
    \\ETX\DC2\EOT\135\SOH\FS\RS\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\v\DC2\EOT\136\SOH\EOT+\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\v\ACK\DC2\EOT\136\SOH\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\v\SOH\DC2\EOT\136\SOH\ESC%\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\v\ETX\DC2\EOT\136\SOH(*\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\f\DC2\EOT\137\SOH\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\f\ACK\DC2\EOT\137\SOH\EOT\DLE\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\f\SOH\DC2\EOT\137\SOH\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\f\ETX\DC2\EOT\137\SOH\CAN\SUB\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\r\DC2\EOT\138\SOH\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\r\ACK\DC2\EOT\138\SOH\EOT\DLE\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\r\SOH\DC2\EOT\138\SOH\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\r\ETX\DC2\EOT\138\SOH\CAN\SUB\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\SO\DC2\EOT\139\SOH\EOT\GS\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\SO\ACK\DC2\EOT\139\SOH\EOT\DC1\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\SO\SOH\DC2\EOT\139\SOH\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\SO\ETX\DC2\EOT\139\SOH\SUB\FS\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\SI\DC2\EOT\140\SOH\EOT(\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\SI\ACK\DC2\EOT\140\SOH\EOT\SYN\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\SI\SOH\DC2\EOT\140\SOH\ETB\"\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\SI\ETX\DC2\EOT\140\SOH%'\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\DLE\DC2\EOT\142\SOH\EOT(\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DLE\ACK\DC2\EOT\142\SOH\EOT\SYN\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DLE\SOH\DC2\EOT\142\SOH\ETB\"\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DLE\ETX\DC2\EOT\142\SOH%'\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\DC1\DC2\EOT\143\SOH\EOT.\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC1\ACK\DC2\EOT\143\SOH\EOT\EM\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC1\SOH\DC2\EOT\143\SOH\SUB(\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC1\ETX\DC2\EOT\143\SOH+-\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\DC2\DC2\EOT\144\SOH\EOT\"\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC2\ACK\DC2\EOT\144\SOH\EOT\DC3\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC2\SOH\DC2\EOT\144\SOH\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC2\ETX\DC2\EOT\144\SOH\US!\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\DC3\DC2\EOT\145\SOH\EOT(\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC3\ACK\DC2\EOT\145\SOH\EOT\SYN\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC3\SOH\DC2\EOT\145\SOH\ETB\"\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC3\ETX\DC2\EOT\145\SOH%'\n\
    \\EM\n\
    \\EOT\EOT\SOH\STX\DC4\DC2\EOT\148\SOH\EOT\ESC\SUB\v Debugging\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC4\ACK\DC2\EOT\148\SOH\EOT\DLE\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC4\SOH\DC2\EOT\148\SOH\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\DC4\ETX\DC2\EOT\148\SOH\CAN\SUB\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\NAK\DC2\EOT\149\SOH\EOT\GS\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\NAK\ACK\DC2\EOT\149\SOH\EOT\DC1\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\NAK\SOH\DC2\EOT\149\SOH\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\NAK\ETX\DC2\EOT\149\SOH\SUB\FS\n\
    \\f\n\
    \\EOT\EOT\SOH\STX\SYN\DC2\EOT\151\SOH\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\SYN\EOT\DC2\EOT\151\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\SYN\ENQ\DC2\EOT\151\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\SYN\SOH\DC2\EOT\151\SOH\DC2\DC4\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\SYN\ETX\DC2\EOT\151\SOH\ETB\EM\n\
    \m\n\
    \\EOT\EOT\SOH\STX\ETB\DC2\EOT\152\SOH\STX\GS\"_ If command is missing, this will contain the error. Otherwise this will contain any warnings.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\ETB\EOT\DC2\EOT\152\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\ETB\ENQ\DC2\EOT\152\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\ETB\SOH\DC2\EOT\152\SOH\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\ETB\ETX\DC2\EOT\152\SOH\SUB\FS\n\
    \7\n\
    \\EOT\EOT\SOH\STX\CAN\DC2\EOT\153\SOH\STX\RS\") Should be sent back with all responses.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\CAN\EOT\DC2\EOT\153\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\CAN\ACK\DC2\EOT\153\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\CAN\SOH\DC2\EOT\153\SOH\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT\SOH\STX\CAN\ETX\DC2\EOT\153\SOH\ESC\GS\n\
    \\f\n\
    \\STX\ENQ\NUL\DC2\ACK\156\SOH\NUL\164\SOH\SOH\n\
    \\v\n\
    \\ETX\ENQ\NUL\SOH\DC2\EOT\156\SOH\ENQ\v\n\
    \C\n\
    \\EOT\ENQ\NUL\STX\NUL\DC2\EOT\157\SOH\STX\SI\"5 Game has been launch and is not yet doing anything.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\NUL\SOH\DC2\EOT\157\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\NUL\STX\DC2\EOT\157\SOH\r\SO\n\
    \N\n\
    \\EOT\ENQ\NUL\STX\SOH\DC2\EOT\158\SOH\STX\DLE\"@ Create game has been called, and the host is awaiting players.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\SOH\SOH\DC2\EOT\158\SOH\STX\v\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\SOH\STX\DC2\EOT\158\SOH\SO\SI\n\
    \0\n\
    \\EOT\ENQ\NUL\STX\STX\DC2\EOT\159\SOH\STX\SO\"\" In a single or multiplayer game.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\STX\SOH\DC2\EOT\159\SOH\STX\t\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\STX\STX\DC2\EOT\159\SOH\f\r\n\
    \\FS\n\
    \\EOT\ENQ\NUL\STX\ETX\DC2\EOT\160\SOH\STX\DLE\"\SO In a replay.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ETX\SOH\DC2\EOT\160\SOH\STX\v\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ETX\STX\DC2\EOT\160\SOH\SO\SI\n\
    \V\n\
    \\EOT\ENQ\NUL\STX\EOT\DC2\EOT\161\SOH\STX\f\"H Game has ended, can still request game info, but ready for a new game.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\EOT\SOH\DC2\EOT\161\SOH\STX\a\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\EOT\STX\DC2\EOT\161\SOH\n\
    \\v\n\
    \-\n\
    \\EOT\ENQ\NUL\STX\ENQ\DC2\EOT\162\SOH\STX\v\"\US Application is shutting down.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ENQ\SOH\DC2\EOT\162\SOH\STX\ACK\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ENQ\STX\DC2\EOT\162\SOH\t\n\
    \\n\
    \G\n\
    \\EOT\ENQ\NUL\STX\ACK\DC2\EOT\163\SOH\STX\SI\"9 Should not happen, but indicates an error if it occurs.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ACK\SOH\DC2\EOT\163\SOH\STX\t\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ACK\STX\DC2\EOT\163\SOH\f\SO\n\
    \\227\SOH\n\
    \\STX\EOT\STX\DC2\ACK\169\SOH\NUL\181\SOH\SOH\SUB\212\SOH-----------------------------------------------------------------------------\n\
    \ If successful, puts the game into the status: init_game.\n\
    \ The next expected request should be RequestJoinGame. Can also quit (exit).\n\
    \\n\
    \\v\n\
    \\ETX\EOT\STX\SOH\DC2\EOT\169\SOH\b\EM\n\
    \\SO\n\
    \\EOT\EOT\STX\b\NUL\DC2\ACK\170\SOH\STX\173\SOH\ETX\n\
    \\r\n\
    \\ENQ\EOT\STX\b\NUL\SOH\DC2\EOT\170\SOH\b\v\n\
    \\"\n\
    \\EOT\EOT\STX\STX\NUL\DC2\EOT\171\SOH\EOT\ESC\"\DC4 Local .SC2Map file\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\NUL\ACK\DC2\EOT\171\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\NUL\SOH\DC2\EOT\171\SOH\r\SYN\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\NUL\ETX\DC2\EOT\171\SOH\EM\SUB\n\
    \*\n\
    \\EOT\EOT\STX\STX\SOH\DC2\EOT\172\SOH\EOT\"\"\FS Map published to BattleNet\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\SOH\ENQ\DC2\EOT\172\SOH\EOT\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\SOH\SOH\DC2\EOT\172\SOH\v\GS\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\SOH\ETX\DC2\EOT\172\SOH !\n\
    \\f\n\
    \\EOT\EOT\STX\STX\STX\DC2\EOT\175\SOH\STX(\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\STX\EOT\DC2\EOT\175\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\STX\ACK\DC2\EOT\175\SOH\v\SYN\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\STX\SOH\DC2\EOT\175\SOH\ETB#\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\STX\ETX\DC2\EOT\175\SOH&'\n\
    \\f\n\
    \\EOT\EOT\STX\STX\ETX\DC2\EOT\177\SOH\STX \n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ETX\EOT\DC2\EOT\177\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ETX\ENQ\DC2\EOT\177\SOH\v\SI\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ETX\SOH\DC2\EOT\177\SOH\DLE\ESC\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ETX\ETX\DC2\EOT\177\SOH\RS\US\n\
    \9\n\
    \\EOT\EOT\STX\STX\EOT\DC2\EOT\179\SOH\STX\"\"+ Sets the pseudo-random seed for the game.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\EOT\EOT\DC2\EOT\179\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\EOT\ENQ\DC2\EOT\179\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\EOT\SOH\DC2\EOT\179\SOH\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\EOT\ETX\DC2\EOT\179\SOH !\n\
    \4\n\
    \\EOT\EOT\STX\STX\ENQ\DC2\EOT\180\SOH\STX\GS\"& If set, the game plays in real time.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ENQ\EOT\DC2\EOT\180\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ENQ\ENQ\DC2\EOT\180\SOH\v\SI\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ENQ\SOH\DC2\EOT\180\SOH\DLE\CAN\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ENQ\ETX\DC2\EOT\180\SOH\ESC\FS\n\
    \\f\n\
    \\STX\EOT\ETX\DC2\ACK\183\SOH\NUL\189\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\ETX\SOH\DC2\EOT\183\SOH\b\DLE\n\
    \\210\SOH\n\
    \\EOT\EOT\ETX\STX\NUL\DC2\EOT\187\SOH\STX\US\SUB\195\SOH A map can be specified either by a file path or the data of the .SC2Map file.\n\
    \ If you provide both, it will play the game using map_data and store map_path\n\
    \ into the replay. (260 character max)\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETX\STX\NUL\EOT\DC2\EOT\187\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETX\STX\NUL\ENQ\DC2\EOT\187\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\ETX\STX\NUL\SOH\DC2\EOT\187\SOH\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOT\ETX\STX\NUL\ETX\DC2\EOT\187\SOH\GS\RS\n\
    \\f\n\
    \\EOT\EOT\ETX\STX\SOH\DC2\EOT\188\SOH\STX\RS\n\
    \\r\n\
    \\ENQ\EOT\ETX\STX\SOH\EOT\DC2\EOT\188\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETX\STX\SOH\ENQ\DC2\EOT\188\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\ETX\STX\SOH\SOH\DC2\EOT\188\SOH\DC1\EM\n\
    \\r\n\
    \\ENQ\EOT\ETX\STX\SOH\ETX\DC2\EOT\188\SOH\FS\GS\n\
    \\f\n\
    \\STX\EOT\EOT\DC2\ACK\191\SOH\NUL\204\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\EOT\SOH\DC2\EOT\191\SOH\b\SUB\n\
    \\SO\n\
    \\EOT\EOT\EOT\EOT\NUL\DC2\ACK\192\SOH\STX\201\SOH\ETX\n\
    \\r\n\
    \\ENQ\EOT\EOT\EOT\NUL\SOH\DC2\EOT\192\SOH\a\f\n\
    \\SO\n\
    \\ACK\EOT\EOT\EOT\NUL\STX\NUL\DC2\EOT\193\SOH\EOT\DC3\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\NUL\SOH\DC2\EOT\193\SOH\EOT\SO\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\NUL\STX\DC2\EOT\193\SOH\DC1\DC2\n\
    \\SO\n\
    \\ACK\EOT\EOT\EOT\NUL\STX\SOH\DC2\EOT\194\SOH\EOT\ETB\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\SOH\SOH\DC2\EOT\194\SOH\EOT\DC2\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\SOH\STX\DC2\EOT\194\SOH\NAK\SYN\n\
    \\SO\n\
    \\ACK\EOT\EOT\EOT\NUL\STX\STX\DC2\EOT\195\SOH\EOT\ETB\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\STX\SOH\DC2\EOT\195\SOH\EOT\DC2\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\STX\STX\DC2\EOT\195\SOH\NAK\SYN\n\
    \\SO\n\
    \\ACK\EOT\EOT\EOT\NUL\STX\ETX\DC2\EOT\196\SOH\EOT\ETB\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\ETX\SOH\DC2\EOT\196\SOH\EOT\DC2\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\ETX\STX\DC2\EOT\196\SOH\NAK\SYN\n\
    \\SO\n\
    \\ACK\EOT\EOT\EOT\NUL\STX\EOT\DC2\EOT\197\SOH\EOT\EM\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\EOT\SOH\DC2\EOT\197\SOH\EOT\DC4\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\EOT\STX\DC2\EOT\197\SOH\ETB\CAN\n\
    \\SO\n\
    \\ACK\EOT\EOT\EOT\NUL\STX\ENQ\DC2\EOT\198\SOH\EOT\ESC\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\ENQ\SOH\DC2\EOT\198\SOH\EOT\SYN\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\ENQ\STX\DC2\EOT\198\SOH\EM\SUB\n\
    \\SO\n\
    \\ACK\EOT\EOT\EOT\NUL\STX\ACK\DC2\EOT\199\SOH\EOT\ESC\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\ACK\SOH\DC2\EOT\199\SOH\EOT\SYN\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\ACK\STX\DC2\EOT\199\SOH\EM\SUB\n\
    \D\n\
    \\ACK\EOT\EOT\EOT\NUL\STX\a\DC2\EOT\200\SOH\EOT\US\"4 Multiplayer is not supported in the current build.\n\
    \\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\a\SOH\DC2\EOT\200\SOH\EOT\SUB\n\
    \\SI\n\
    \\a\EOT\EOT\EOT\NUL\STX\a\STX\DC2\EOT\200\SOH\GS\RS\n\
    \\f\n\
    \\EOT\EOT\EOT\STX\NUL\DC2\EOT\202\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\NUL\EOT\DC2\EOT\202\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\NUL\ACK\DC2\EOT\202\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\NUL\SOH\DC2\EOT\202\SOH\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\NUL\ETX\DC2\EOT\202\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\EOT\STX\SOH\DC2\EOT\203\SOH\STX$\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\SOH\EOT\DC2\EOT\203\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\SOH\ENQ\DC2\EOT\203\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\SOH\SOH\DC2\EOT\203\SOH\DC2\US\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\SOH\ETX\DC2\EOT\203\SOH\"#\n\
    \\215\SOH\n\
    \\STX\EOT\ENQ\DC2\ACK\209\SOH\NUL\222\SOH\SOH\SUB\200\SOH-----------------------------------------------------------------------------\n\
    \ If successful, puts the game into the status: in_game. Will be able to\n\
    \ request actions, observations and step the game.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\ENQ\SOH\DC2\EOT\209\SOH\b\ETB\n\
    \\SO\n\
    \\EOT\EOT\ENQ\b\NUL\DC2\ACK\210\SOH\STX\213\SOH\ETX\n\
    \\r\n\
    \\ENQ\EOT\ENQ\b\NUL\SOH\DC2\EOT\210\SOH\b\NAK\n\
    \#\n\
    \\EOT\EOT\ENQ\STX\NUL\DC2\EOT\211\SOH\EOT\DC2\"\NAK Join as participant\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\NUL\ACK\DC2\EOT\211\SOH\EOT\b\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\NUL\SOH\DC2\EOT\211\SOH\t\r\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\NUL\ETX\DC2\EOT\211\SOH\DLE\DC1\n\
    \ \n\
    \\EOT\EOT\ENQ\STX\SOH\DC2\EOT\212\SOH\EOT\"\"\DC2 Join as observer\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\SOH\ENQ\DC2\EOT\212\SOH\EOT\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\SOH\SOH\DC2\EOT\212\SOH\v\GS\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\SOH\ETX\DC2\EOT\212\SOH !\n\
    \|\n\
    \\EOT\EOT\ENQ\STX\STX\DC2\EOT\215\SOH\STX(\"n This is limited to what is specified in RequestCreateGame, but you can request less information if you want.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\STX\EOT\DC2\EOT\215\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\STX\ACK\DC2\EOT\215\SOH\v\ESC\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\STX\SOH\DC2\EOT\215\SOH\FS#\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\STX\ETX\DC2\EOT\215\SOH&'\n\
    \Y\n\
    \\EOT\EOT\ENQ\STX\ETX\DC2\EOT\216\SOH\STX$\"K Do not set in the single-player case. This is the port a server will use.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ETX\EOT\DC2\EOT\216\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ETX\ACK\DC2\EOT\216\SOH\v\DC2\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ETX\SOH\DC2\EOT\216\SOH\DC3\US\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ETX\ETX\DC2\EOT\216\SOH\"#\n\
    \w\n\
    \\EOT\EOT\ENQ\STX\EOT\DC2\EOT\217\SOH\STX$\"i Do not set in the single-player case. These are the ports clients will use to initialize communication.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\EOT\EOT\DC2\EOT\217\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\EOT\ACK\DC2\EOT\217\SOH\v\DC2\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\EOT\SOH\DC2\EOT\217\SOH\DC3\US\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\EOT\ETX\DC2\EOT\217\SOH\"#\n\
    \I\n\
    \\EOT\EOT\ENQ\STX\ENQ\DC2\EOT\219\SOH\STX!\SUB- Currently only a singe client is supported.\n\
    \\"\f deprecated\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ENQ\EOT\DC2\EOT\219\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ENQ\ENQ\DC2\EOT\219\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ENQ\SOH\DC2\EOT\219\SOH\DC1\FS\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ENQ\ETX\DC2\EOT\219\SOH\US \n\
    \]\n\
    \\EOT\EOT\ENQ\STX\ACK\DC2\EOT\220\SOH\STX\"\"O Use this to set the player's name to something other than autogenerated name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ACK\EOT\DC2\EOT\220\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ACK\ENQ\DC2\EOT\220\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ACK\SOH\DC2\EOT\220\SOH\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ACK\ETX\DC2\EOT\220\SOH !\n\
    \\145\SOH\n\
    \\EOT\EOT\ENQ\STX\a\DC2\EOT\221\SOH\STX\RS\"\130\SOH Both game creator and joiner should provide the ip address of the game creator in order to play remotely. Defaults to localhost.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\a\EOT\DC2\EOT\221\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\a\ENQ\DC2\EOT\221\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\a\SOH\DC2\EOT\221\SOH\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\a\ETX\DC2\EOT\221\SOH\FS\GS\n\
    \\f\n\
    \\STX\EOT\ACK\DC2\ACK\224\SOH\NUL\227\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\ACK\SOH\DC2\EOT\224\SOH\b\SI\n\
    \h\n\
    \\EOT\EOT\ACK\STX\NUL\DC2\EOT\225\SOH\STX\US\"Z Game right now needs two internal ports to establish a multiplay game on the local host.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NUL\EOT\DC2\EOT\225\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NUL\ENQ\DC2\EOT\225\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NUL\SOH\DC2\EOT\225\SOH\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NUL\ETX\DC2\EOT\225\SOH\GS\RS\n\
    \\f\n\
    \\EOT\EOT\ACK\STX\SOH\DC2\EOT\226\SOH\STX\US\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SOH\EOT\DC2\EOT\226\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SOH\ENQ\DC2\EOT\226\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SOH\SOH\DC2\EOT\226\SOH\DC1\SUB\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SOH\ETX\DC2\EOT\226\SOH\GS\RS\n\
    \\f\n\
    \\STX\EOT\a\DC2\ACK\229\SOH\NUL\251\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\a\SOH\DC2\EOT\229\SOH\b\CAN\n\
    \\f\n\
    \\EOT\EOT\a\STX\NUL\DC2\EOT\230\SOH\STX \n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\EOT\DC2\EOT\230\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\ENQ\DC2\EOT\230\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\SOH\DC2\EOT\230\SOH\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\ETX\DC2\EOT\230\SOH\RS\US\n\
    \\SO\n\
    \\EOT\EOT\a\EOT\NUL\DC2\ACK\232\SOH\STX\248\SOH\ETX\n\
    \\r\n\
    \\ENQ\EOT\a\EOT\NUL\SOH\DC2\EOT\232\SOH\a\f\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\NUL\DC2\EOT\233\SOH\EOT\GS\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\NUL\SOH\DC2\EOT\233\SOH\EOT\CAN\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\NUL\STX\DC2\EOT\233\SOH\ESC\FS\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\SOH\DC2\EOT\234\SOH\EOT \n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\SOH\SOH\DC2\EOT\234\SOH\EOT\ESC\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\SOH\STX\DC2\EOT\234\SOH\RS\US\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\STX\DC2\EOT\235\SOH\EOT\ETB\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\STX\SOH\DC2\EOT\235\SOH\EOT\DC2\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\STX\STX\DC2\EOT\235\SOH\NAK\SYN\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\ETX\DC2\EOT\236\SOH\EOT\NAK\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\ETX\SOH\DC2\EOT\236\SOH\EOT\DLE\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\ETX\STX\DC2\EOT\236\SOH\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\EOT\DC2\EOT\237\SOH\EOT\DC1\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\EOT\SOH\DC2\EOT\237\SOH\EOT\f\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\EOT\STX\DC2\EOT\237\SOH\SI\DLE\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\ENQ\DC2\EOT\238\SOH\EOT\DC4\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\ENQ\SOH\DC2\EOT\238\SOH\EOT\SI\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\ENQ\STX\DC2\EOT\238\SOH\DC2\DC3\n\
    \x\n\
    \\ACK\EOT\a\EOT\NUL\STX\ACK\DC2\EOT\241\SOH\EOT\ESC\SUB\ETB Multiplayer specific.\n\
    \\"O Multiplayer is not supported in the current build for the requested features.\n\
    \\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\ACK\SOH\DC2\EOT\241\SOH\EOT\SYN\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\ACK\STX\DC2\EOT\241\SOH\EM\SUB\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\a\DC2\EOT\242\SOH\EOT\ETB\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\a\SOH\DC2\EOT\242\SOH\EOT\DC2\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\a\STX\DC2\EOT\242\SOH\NAK\SYN\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\b\DC2\EOT\243\SOH\EOT\CAN\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\b\SOH\DC2\EOT\243\SOH\EOT\DC3\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\b\STX\DC2\EOT\243\SOH\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\t\DC2\EOT\244\SOH\EOT\ETB\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\t\SOH\DC2\EOT\244\SOH\EOT\DC1\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\t\STX\DC2\EOT\244\SOH\DC4\SYN\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\n\
    \\DC2\EOT\245\SOH\EOT\ETB\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\n\
    \\SOH\DC2\EOT\245\SOH\EOT\DC1\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\n\
    \\STX\DC2\EOT\245\SOH\DC4\SYN\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\v\DC2\EOT\246\SOH\EOT\SYN\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\v\SOH\DC2\EOT\246\SOH\EOT\DLE\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\v\STX\DC2\EOT\246\SOH\DC3\NAK\n\
    \\SO\n\
    \\ACK\EOT\a\EOT\NUL\STX\f\DC2\EOT\247\SOH\EOT\DC4\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\f\SOH\DC2\EOT\247\SOH\EOT\SO\n\
    \\SI\n\
    \\a\EOT\a\EOT\NUL\STX\f\STX\DC2\EOT\247\SOH\DC1\DC3\n\
    \\f\n\
    \\EOT\EOT\a\STX\SOH\DC2\EOT\249\SOH\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\a\STX\SOH\EOT\DC2\EOT\249\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\a\STX\SOH\ACK\DC2\EOT\249\SOH\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\a\STX\SOH\SOH\DC2\EOT\249\SOH\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT\a\STX\SOH\ETX\DC2\EOT\249\SOH\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\a\STX\STX\DC2\EOT\250\SOH\STX$\n\
    \\r\n\
    \\ENQ\EOT\a\STX\STX\EOT\DC2\EOT\250\SOH\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\a\STX\STX\ENQ\DC2\EOT\250\SOH\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\a\STX\STX\SOH\DC2\EOT\250\SOH\DC2\US\n\
    \\r\n\
    \\ENQ\EOT\a\STX\STX\ETX\DC2\EOT\250\SOH\"#\n\
    \\\\n\
    \\STX\EOT\b\DC2\ACK\254\SOH\NUL\255\SOH\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\b\SOH\DC2\EOT\254\SOH\b\SUB\n\
    \Q\n\
    \\STX\EOT\t\DC2\ACK\130\STX\NUL\137\STX\SOH\SUBC The defaultRestartGameLoops is specified to be (1<<18) by default\n\
    \\n\
    \\v\n\
    \\ETX\EOT\t\SOH\DC2\EOT\130\STX\b\ESC\n\
    \\SO\n\
    \\EOT\EOT\t\EOT\NUL\DC2\ACK\131\STX\STX\133\STX\ETX\n\
    \\r\n\
    \\ENQ\EOT\t\EOT\NUL\SOH\DC2\EOT\131\STX\a\f\n\
    \\SO\n\
    \\ACK\EOT\t\EOT\NUL\STX\NUL\DC2\EOT\132\STX\EOT\DC4\n\
    \\SI\n\
    \\a\EOT\t\EOT\NUL\STX\NUL\SOH\DC2\EOT\132\STX\EOT\SI\n\
    \\SI\n\
    \\a\EOT\t\EOT\NUL\STX\NUL\STX\DC2\EOT\132\STX\DC2\DC3\n\
    \\f\n\
    \\EOT\EOT\t\STX\NUL\DC2\EOT\134\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\EOT\DC2\EOT\134\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\ACK\DC2\EOT\134\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\SOH\DC2\EOT\134\STX\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\ETX\DC2\EOT\134\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\t\STX\SOH\DC2\EOT\135\STX\STX$\n\
    \\r\n\
    \\ENQ\EOT\t\STX\SOH\EOT\DC2\EOT\135\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\t\STX\SOH\ENQ\DC2\EOT\135\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\t\STX\SOH\SOH\DC2\EOT\135\STX\DC2\US\n\
    \\r\n\
    \\ENQ\EOT\t\STX\SOH\ETX\DC2\EOT\135\STX\"#\n\
    \`\n\
    \\EOT\EOT\t\STX\STX\DC2\EOT\136\STX\STX$\"R This will occur once the simulation_loop is greater then defaultRestartGameLoops\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\t\STX\STX\EOT\DC2\EOT\136\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\t\STX\STX\ENQ\DC2\EOT\136\STX\v\SI\n\
    \\r\n\
    \\ENQ\EOT\t\STX\STX\SOH\DC2\EOT\136\STX\DLE\US\n\
    \\r\n\
    \\ENQ\EOT\t\STX\STX\ETX\DC2\EOT\136\STX\"#\n\
    \\\\n\
    \\STX\EOT\n\
    \\DC2\ACK\140\STX\NUL\152\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\n\
    \\SOH\DC2\EOT\140\STX\b\SUB\n\
    \\SO\n\
    \\EOT\EOT\n\
    \\b\NUL\DC2\ACK\141\STX\STX\144\STX\ETX\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\b\NUL\SOH\DC2\EOT\141\STX\b\SO\n\
    \\f\n\
    \\EOT\EOT\n\
    \\STX\NUL\DC2\EOT\142\STX\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\ENQ\DC2\EOT\142\STX\EOT\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\SOH\DC2\EOT\142\STX\v\SYN\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\ETX\DC2\EOT\142\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\n\
    \\STX\SOH\DC2\EOT\143\STX\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\ENQ\DC2\EOT\143\STX\EOT\t\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\SOH\DC2\EOT\143\STX\n\
    \\NAK\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\ETX\DC2\EOT\143\STX\CAN\EM\n\
    \<\n\
    \\EOT\EOT\n\
    \\STX\STX\DC2\EOT\145\STX\STX\RS\". Overrides the map path stored in the replay.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\STX\EOT\DC2\EOT\145\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\STX\ENQ\DC2\EOT\145\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\STX\SOH\DC2\EOT\145\STX\DC1\EM\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\STX\ETX\DC2\EOT\145\STX\FS\GS\n\
    \\f\n\
    \\EOT\EOT\n\
    \\STX\ETX\DC2\EOT\146\STX\STX(\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ETX\EOT\DC2\EOT\146\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ETX\ENQ\DC2\EOT\146\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ETX\SOH\DC2\EOT\146\STX\DC1#\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ETX\ETX\DC2\EOT\146\STX&'\n\
    \\f\n\
    \\EOT\EOT\n\
    \\STX\EOT\DC2\EOT\147\STX\STX(\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\EOT\EOT\DC2\EOT\147\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\EOT\ACK\DC2\EOT\147\STX\v\ESC\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\EOT\SOH\DC2\EOT\147\STX\FS#\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\EOT\ETX\DC2\EOT\147\STX&'\n\
    \\f\n\
    \\EOT\EOT\n\
    \\STX\ENQ\DC2\EOT\149\STX\STX \n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ENQ\EOT\DC2\EOT\149\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ENQ\ENQ\DC2\EOT\149\STX\v\SI\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ENQ\SOH\DC2\EOT\149\STX\DLE\ESC\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ENQ\ETX\DC2\EOT\149\STX\RS\US\n\
    \\f\n\
    \\EOT\EOT\n\
    \\STX\ACK\DC2\EOT\150\STX\STX\GS\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ACK\EOT\DC2\EOT\150\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ACK\ENQ\DC2\EOT\150\STX\v\SI\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ACK\SOH\DC2\EOT\150\STX\DLE\CAN\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\ACK\ETX\DC2\EOT\150\STX\ESC\FS\n\
    \s\n\
    \\EOT\EOT\n\
    \\STX\a\DC2\EOT\151\STX\STX\"\"e Allow RequestSaveReplay from a replay. Useful for truncating a replay, or restoring tracker.events.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\a\EOT\DC2\EOT\151\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\a\ENQ\DC2\EOT\151\STX\v\SI\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\a\SOH\DC2\EOT\151\STX\DLE\GS\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\a\ETX\DC2\EOT\151\STX !\n\
    \\f\n\
    \\STX\EOT\v\DC2\ACK\154\STX\NUL\166\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\v\SOH\DC2\EOT\154\STX\b\ESC\n\
    \\SO\n\
    \\EOT\EOT\v\EOT\NUL\DC2\ACK\155\STX\STX\163\STX\ETX\n\
    \\r\n\
    \\ENQ\EOT\v\EOT\NUL\SOH\DC2\EOT\155\STX\a\f\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\NUL\DC2\EOT\156\STX\EOT\SYN\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\NUL\SOH\DC2\EOT\156\STX\EOT\DC1\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\NUL\STX\DC2\EOT\156\STX\DC4\NAK\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\SOH\DC2\EOT\157\STX\EOT\SUB\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\SOH\SOH\DC2\EOT\157\STX\EOT\NAK\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\SOH\STX\DC2\EOT\157\STX\CAN\EM\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\STX\DC2\EOT\158\STX\EOT\SUB\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\STX\SOH\DC2\EOT\158\STX\EOT\NAK\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\STX\STX\DC2\EOT\158\STX\CAN\EM\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\ETX\DC2\EOT\159\STX\EOT\ETB\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\ETX\SOH\DC2\EOT\159\STX\EOT\DC2\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\ETX\STX\DC2\EOT\159\STX\NAK\SYN\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\EOT\DC2\EOT\160\STX\EOT \n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\EOT\SOH\DC2\EOT\160\STX\EOT\ESC\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\EOT\STX\DC2\EOT\160\STX\RS\US\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\ENQ\DC2\EOT\161\STX\EOT\ETB\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\ENQ\SOH\DC2\EOT\161\STX\EOT\DC2\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\ENQ\STX\DC2\EOT\161\STX\NAK\SYN\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\ACK\DC2\EOT\162\STX\EOT\DC4\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\ACK\SOH\DC2\EOT\162\STX\EOT\SI\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\ACK\STX\DC2\EOT\162\STX\DC2\DC3\n\
    \\f\n\
    \\EOT\EOT\v\STX\NUL\DC2\EOT\164\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\EOT\DC2\EOT\164\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\ACK\DC2\EOT\164\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\SOH\DC2\EOT\164\STX\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\ETX\DC2\EOT\164\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\v\STX\SOH\DC2\EOT\165\STX\STX$\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\EOT\DC2\EOT\165\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\ENQ\DC2\EOT\165\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\SOH\DC2\EOT\165\STX\DC2\US\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\ETX\DC2\EOT\165\STX\"#\n\
    \\\\n\
    \\STX\EOT\f\DC2\ACK\169\STX\NUL\171\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\f\SOH\DC2\EOT\169\STX\b\EM\n\
    \\f\n\
    \\EOT\EOT\f\STX\NUL\DC2\EOT\170\STX\STX\"\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\EOT\DC2\EOT\170\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\ENQ\DC2\EOT\170\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\SOH\DC2\EOT\170\STX\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\ETX\DC2\EOT\170\STX !\n\
    \\f\n\
    \\STX\EOT\r\DC2\ACK\173\STX\NUL\179\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\r\SOH\DC2\EOT\173\STX\b\SUB\n\
    \\SO\n\
    \\EOT\EOT\r\EOT\NUL\DC2\ACK\174\STX\STX\176\STX\ETX\n\
    \\r\n\
    \\ENQ\EOT\r\EOT\NUL\SOH\DC2\EOT\174\STX\a\f\n\
    \\SO\n\
    \\ACK\EOT\r\EOT\NUL\STX\NUL\DC2\EOT\175\STX\EOT\ETB\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\NUL\SOH\DC2\EOT\175\STX\EOT\DC2\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\NUL\STX\DC2\EOT\175\STX\NAK\SYN\n\
    \\f\n\
    \\EOT\EOT\r\STX\NUL\DC2\EOT\177\STX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\EOT\DC2\EOT\177\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\ACK\DC2\EOT\177\STX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\SOH\DC2\EOT\177\STX\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\ETX\DC2\EOT\177\STX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT\r\STX\SOH\DC2\EOT\178\STX\STX$\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\EOT\DC2\EOT\178\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\ENQ\DC2\EOT\178\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\SOH\DC2\EOT\178\STX\DC2\US\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\ETX\DC2\EOT\178\STX\"#\n\
    \\\\n\
    \\STX\EOT\SO\DC2\ACK\182\STX\NUL\183\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\SO\SOH\DC2\EOT\182\STX\b\CAN\n\
    \\f\n\
    \\STX\EOT\SI\DC2\ACK\185\STX\NUL\186\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\SI\SOH\DC2\EOT\185\STX\b\EM\n\
    \\\\n\
    \\STX\EOT\DLE\DC2\ACK\189\STX\NUL\190\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DLE\SOH\DC2\EOT\189\STX\b\CAN\n\
    \\\\n\
    \\STX\EOT\DC1\DC2\ACK\193\STX\NUL\194\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC1\SOH\DC2\EOT\193\STX\b\EM\n\
    \\\\n\
    \\STX\EOT\DC2\DC2\ACK\197\STX\NUL\198\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC2\SOH\DC2\EOT\197\STX\b\CAN\n\
    \\\\n\
    \\STX\EOT\DC3\DC2\ACK\201\STX\NUL\202\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC3\SOH\DC2\EOT\201\STX\b\EM\n\
    \\\\n\
    \\STX\EOT\DC4\DC2\ACK\205\STX\NUL\206\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC4\SOH\DC2\EOT\205\STX\b\DC3\n\
    \\f\n\
    \\STX\EOT\NAK\DC2\ACK\208\STX\NUL\209\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\NAK\SOH\DC2\EOT\208\STX\b\DC4\n\
    \\\\n\
    \\STX\EOT\SYN\DC2\ACK\212\STX\NUL\213\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\SYN\SOH\DC2\EOT\212\STX\b\ETB\n\
    \\f\n\
    \\STX\EOT\ETB\DC2\ACK\215\STX\NUL\222\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\ETB\SOH\DC2\EOT\215\STX\b\CAN\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\NUL\DC2\EOT\216\STX\STX\US\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\EOT\DC2\EOT\216\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\ENQ\DC2\EOT\216\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\SOH\DC2\EOT\216\STX\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\ETX\DC2\EOT\216\STX\GS\RS\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\SOH\DC2\EOT\217\STX\STX \n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\EOT\DC2\EOT\217\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\ENQ\DC2\EOT\217\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\SOH\DC2\EOT\217\STX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\ETX\DC2\EOT\217\STX\RS\US\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\STX\DC2\EOT\218\STX\STX%\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\EOT\DC2\EOT\218\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\ENQ\DC2\EOT\218\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\SOH\DC2\EOT\218\STX\DC2 \n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\ETX\DC2\EOT\218\STX#$\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\ETX\DC2\EOT\219\STX\STX&\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\EOT\DC2\EOT\219\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\ACK\DC2\EOT\219\STX\v\NAK\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\SOH\DC2\EOT\219\STX\SYN!\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\ETX\DC2\EOT\219\STX$%\n\
    \6\n\
    \\EOT\EOT\ETB\STX\EOT\DC2\EOT\220\STX\STX\"\"( Populated if Raw interface is enabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\EOT\EOT\DC2\EOT\220\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\EOT\ACK\DC2\EOT\220\STX\v\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\EOT\SOH\DC2\EOT\220\STX\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\EOT\ETX\DC2\EOT\220\STX !\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\ENQ\DC2\EOT\221\STX\STX(\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ENQ\EOT\DC2\EOT\221\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ENQ\ACK\DC2\EOT\221\STX\v\ESC\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ENQ\SOH\DC2\EOT\221\STX\FS#\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ENQ\ETX\DC2\EOT\221\STX&'\n\
    \\\\n\
    \\STX\EOT\CAN\DC2\ACK\225\STX\NUL\228\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\CAN\SOH\DC2\EOT\225\STX\b\SUB\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\NUL\DC2\EOT\226\STX\STX \n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\EOT\DC2\EOT\226\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\ENQ\DC2\EOT\226\STX\v\SI\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\SOH\DC2\EOT\226\STX\DLE\ESC\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\ETX\DC2\EOT\226\STX\RS\US\n\
    \\152\SOH\n\
    \\EOT\EOT\CAN\STX\SOH\DC2\EOT\227\STX\STX \"\137\SOH In realtime the request will only return once the simulation game loop has reached this value. When not realtime this value is ignored.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\EOT\DC2\EOT\227\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\ENQ\DC2\EOT\227\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\SOH\DC2\EOT\227\STX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\ETX\DC2\EOT\227\STX\RS\US\n\
    \\f\n\
    \\STX\EOT\EM\DC2\ACK\230\STX\NUL\236\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\EM\SOH\DC2\EOT\230\STX\b\ESC\n\
    \C\n\
    \\EOT\EOT\EM\STX\NUL\DC2\EOT\231\STX\STX\RS\"5 Actions this player did since the last Observation.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\EOT\DC2\EOT\231\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\ACK\DC2\EOT\231\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\SOH\DC2\EOT\231\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\ETX\DC2\EOT\231\STX\FS\GS\n\
    \3\n\
    \\EOT\EOT\EM\STX\SOH\DC2\EOT\232\STX\STX)\"% Equivalent of UI \"red text\" errors.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\EOT\DC2\EOT\232\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\ACK\DC2\EOT\232\STX\v\SYN\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\SOH\DC2\EOT\232\STX\ETB$\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\ETX\DC2\EOT\232\STX'(\n\
    \\f\n\
    \\EOT\EOT\EM\STX\STX\DC2\EOT\233\STX\STX'\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\EOT\DC2\EOT\233\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\ACK\DC2\EOT\233\STX\v\SYN\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\SOH\DC2\EOT\233\STX\ETB\"\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\ETX\DC2\EOT\233\STX%&\n\
    \B\n\
    \\EOT\EOT\EM\STX\ETX\DC2\EOT\234\STX\STX*\"4 Only populated if the game ended during this step.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\EOT\DC2\EOT\234\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\ACK\DC2\EOT\234\STX\v\ETB\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\SOH\DC2\EOT\234\STX\CAN%\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\ETX\DC2\EOT\234\STX()\n\
    \\f\n\
    \\EOT\EOT\EM\STX\EOT\DC2\EOT\235\STX\STX!\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\EOT\DC2\EOT\235\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\ACK\DC2\EOT\235\STX\v\ETB\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\SOH\DC2\EOT\235\STX\CAN\FS\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\ETX\DC2\EOT\235\STX\US \n\
    \\f\n\
    \\STX\EOT\SUB\DC2\ACK\238\STX\NUL\241\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\SUB\SOH\DC2\EOT\238\STX\b\DC4\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\NUL\DC2\EOT\239\STX\STX \n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\EOT\DC2\EOT\239\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\ENQ\DC2\EOT\239\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\SOH\DC2\EOT\239\STX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\ETX\DC2\EOT\239\STX\RS\US\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\SOH\DC2\EOT\240\STX\STX\RS\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\EOT\DC2\EOT\240\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\ENQ\DC2\EOT\240\STX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\SOH\DC2\EOT\240\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\ETX\DC2\EOT\240\STX\FS\GS\n\
    \\\\n\
    \\STX\EOT\ESC\DC2\ACK\244\STX\NUL\246\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\ESC\SOH\DC2\EOT\244\STX\b\NAK\n\
    \\f\n\
    \\EOT\EOT\ESC\STX\NUL\DC2\EOT\245\STX\ETX\US\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\EOT\DC2\EOT\245\STX\ETX\v\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\ACK\DC2\EOT\245\STX\f\DC2\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\SOH\DC2\EOT\245\STX\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\ETX\DC2\EOT\245\STX\GS\RS\n\
    \\f\n\
    \\STX\EOT\FS\DC2\ACK\248\STX\NUL\250\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\FS\SOH\DC2\EOT\248\STX\b\SYN\n\
    \\f\n\
    \\EOT\EOT\FS\STX\NUL\DC2\EOT\249\STX\ETX$\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\EOT\DC2\EOT\249\STX\ETX\v\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\ACK\DC2\EOT\249\STX\f\CAN\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\SOH\DC2\EOT\249\STX\EM\US\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\ETX\DC2\EOT\249\STX\"#\n\
    \\\\n\
    \\STX\EOT\GS\DC2\ACK\253\STX\NUL\255\STX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\GS\SOH\DC2\EOT\253\STX\b\GS\n\
    \\f\n\
    \\EOT\EOT\GS\STX\NUL\DC2\EOT\254\STX\ETX'\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\EOT\DC2\EOT\254\STX\ETX\v\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\ACK\DC2\EOT\254\STX\f\SUB\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\SOH\DC2\EOT\254\STX\ESC\"\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\ETX\DC2\EOT\254\STX%&\n\
    \\f\n\
    \\STX\EOT\RS\DC2\ACK\129\ETX\NUL\131\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT\RS\SOH\DC2\EOT\129\ETX\b\RS\n\
    \\\\n\
    \\STX\EOT\US\DC2\ACK\134\ETX\NUL\136\ETX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT\US\SOH\DC2\EOT\134\ETX\b\DC3\n\
    \D\n\
    \\EOT\EOT\US\STX\NUL\DC2\EOT\135\ETX\STX\FS\"6 Number of game loops to simulate for the next frame.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\EOT\DC2\EOT\135\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\ENQ\DC2\EOT\135\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\SOH\DC2\EOT\135\ETX\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\ETX\DC2\EOT\135\ETX\SUB\ESC\n\
    \\f\n\
    \\STX\EOT \DC2\ACK\138\ETX\NUL\144\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT \SOH\DC2\EOT\138\ETX\b\DC4\n\
    \\182\STX\n\
    \\EOT\EOT \STX\NUL\DC2\EOT\143\ETX\STX&\SUB\167\STX  Max simulation_loop is (1<<19) before \"end of time\" will occur\n\
    \  The \"end of time\" is classified as the maximum number of game loops or absolute game time\n\
    \  representable as a positive fixed point number.\n\
    \  When we reach the \"end of time\", permanently pause the game and end the game for all.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\EOT\DC2\EOT\143\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\ENQ\DC2\EOT\143\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\SOH\DC2\EOT\143\ETX\DC2!\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\ETX\DC2\EOT\143\ETX$%\n\
    \\\\n\
    \\STX\EOT!\DC2\ACK\147\ETX\NUL\153\ETX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT!\SOH\DC2\EOT\147\ETX\b\DC3\n\
    \\f\n\
    \\EOT\EOT!\STX\NUL\DC2\EOT\148\ETX\STX\US\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\EOT\DC2\EOT\148\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\ENQ\DC2\EOT\148\ETX\v\SI\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\SOH\DC2\EOT\148\ETX\DLE\SUB\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\ETX\DC2\EOT\148\ETX\GS\RS\n\
    \\f\n\
    \\EOT\EOT!\STX\SOH\DC2\EOT\149\ETX\STX!\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\EOT\DC2\EOT\149\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\ENQ\DC2\EOT\149\ETX\v\SI\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\SOH\DC2\EOT\149\ETX\DLE\FS\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\ETX\DC2\EOT\149\ETX\US \n\
    \\f\n\
    \\EOT\EOT!\STX\STX\DC2\EOT\150\ETX\STX\US\n\
    \\r\n\
    \\ENQ\EOT!\STX\STX\EOT\DC2\EOT\150\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\STX\ENQ\DC2\EOT\150\ETX\v\SI\n\
    \\r\n\
    \\ENQ\EOT!\STX\STX\SOH\DC2\EOT\150\ETX\DLE\SUB\n\
    \\r\n\
    \\ENQ\EOT!\STX\STX\ETX\DC2\EOT\150\ETX\GS\RS\n\
    \\f\n\
    \\EOT\EOT!\STX\ETX\DC2\EOT\151\ETX\STX\FS\n\
    \\r\n\
    \\ENQ\EOT!\STX\ETX\EOT\DC2\EOT\151\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\ETX\ENQ\DC2\EOT\151\ETX\v\SI\n\
    \\r\n\
    \\ENQ\EOT!\STX\ETX\SOH\DC2\EOT\151\ETX\DLE\ETB\n\
    \\r\n\
    \\ENQ\EOT!\STX\ETX\ETX\DC2\EOT\151\ETX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT!\STX\EOT\DC2\EOT\152\ETX\STX\RS\n\
    \\r\n\
    \\ENQ\EOT!\STX\EOT\EOT\DC2\EOT\152\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\EOT\ENQ\DC2\EOT\152\ETX\v\SI\n\
    \\r\n\
    \\ENQ\EOT!\STX\EOT\SOH\DC2\EOT\152\ETX\DLE\EM\n\
    \\r\n\
    \\ENQ\EOT!\STX\EOT\ETX\DC2\EOT\152\ETX\FS\GS\n\
    \\f\n\
    \\STX\EOT\"\DC2\ACK\155\ETX\NUL\161\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT\"\SOH\DC2\EOT\155\ETX\b\DC4\n\
    \\f\n\
    \\EOT\EOT\"\STX\NUL\DC2\EOT\156\ETX\STX%\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\EOT\DC2\EOT\156\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\ACK\DC2\EOT\156\ETX\v\SYN\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\SOH\DC2\EOT\156\ETX\ETB \n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\ETX\DC2\EOT\156\ETX#$\n\
    \\f\n\
    \\EOT\EOT\"\STX\SOH\DC2\EOT\157\ETX\STX\"\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\EOT\DC2\EOT\157\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\ACK\DC2\EOT\157\ETX\v\ETB\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\SOH\DC2\EOT\157\ETX\CAN\GS\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\ETX\DC2\EOT\157\ETX !\n\
    \\f\n\
    \\EOT\EOT\"\STX\STX\DC2\EOT\158\ETX\STX$\n\
    \\r\n\
    \\ENQ\EOT\"\STX\STX\EOT\DC2\EOT\158\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\"\STX\STX\ACK\DC2\EOT\158\ETX\v\SYN\n\
    \\r\n\
    \\ENQ\EOT\"\STX\STX\SOH\DC2\EOT\158\ETX\ETB\US\n\
    \\r\n\
    \\ENQ\EOT\"\STX\STX\ETX\DC2\EOT\158\ETX\"#\n\
    \\f\n\
    \\EOT\EOT\"\STX\ETX\DC2\EOT\159\ETX\STX\RS\n\
    \\r\n\
    \\ENQ\EOT\"\STX\ETX\EOT\DC2\EOT\159\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\"\STX\ETX\ACK\DC2\EOT\159\ETX\v\DC3\n\
    \\r\n\
    \\ENQ\EOT\"\STX\ETX\SOH\DC2\EOT\159\ETX\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\"\STX\ETX\ETX\DC2\EOT\159\ETX\FS\GS\n\
    \\f\n\
    \\EOT\EOT\"\STX\EOT\DC2\EOT\160\ETX\STX\"\n\
    \\r\n\
    \\ENQ\EOT\"\STX\EOT\EOT\DC2\EOT\160\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\"\STX\EOT\ACK\DC2\EOT\160\ETX\v\NAK\n\
    \\r\n\
    \\ENQ\EOT\"\STX\EOT\SOH\DC2\EOT\160\ETX\SYN\GS\n\
    \\r\n\
    \\ENQ\EOT\"\STX\EOT\ETX\DC2\EOT\160\ETX !\n\
    \\\\n\
    \\STX\EOT#\DC2\ACK\164\ETX\NUL\165\ETX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT#\SOH\DC2\EOT\164\ETX\b\EM\n\
    \\f\n\
    \\STX\EOT$\DC2\ACK\167\ETX\NUL\169\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT$\SOH\DC2\EOT\167\ETX\b\SUB\n\
    \\f\n\
    \\EOT\EOT$\STX\NUL\DC2\EOT\168\ETX\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\EOT\DC2\EOT\168\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\ENQ\DC2\EOT\168\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\SOH\DC2\EOT\168\ETX\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\ETX\DC2\EOT\168\ETX\CAN\EM\n\
    \\\\n\
    \\STX\EOT%\DC2\ACK\172\ETX\NUL\178\ETX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT%\SOH\DC2\EOT\172\ETX\b\EM\n\
    \\SO\n\
    \\EOT\EOT%\b\NUL\DC2\ACK\173\ETX\STX\176\ETX\ETX\n\
    \\r\n\
    \\ENQ\EOT%\b\NUL\SOH\DC2\EOT\173\ETX\b\SO\n\
    \N\n\
    \\EOT\EOT%\STX\NUL\DC2\EOT\174\ETX\EOT\ESC\"@ Limitation: might fail if the replay file is currently loaded.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\ENQ\DC2\EOT\174\ETX\EOT\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\SOH\DC2\EOT\174\ETX\v\SYN\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\ETX\DC2\EOT\174\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT%\STX\SOH\DC2\EOT\175\ETX\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\ENQ\DC2\EOT\175\ETX\EOT\t\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\SOH\DC2\EOT\175\ETX\n\
    \\NAK\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\ETX\DC2\EOT\175\ETX\CAN\EM\n\
    \[\n\
    \\EOT\EOT%\STX\STX\DC2\EOT\177\ETX\STX\"\"M Ensure the data and binary are downloaded if this is an old version replay.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\EOT\DC2\EOT\177\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\ENQ\DC2\EOT\177\ETX\v\SI\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\SOH\DC2\EOT\177\ETX\DLE\GS\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\ETX\DC2\EOT\177\ETX !\n\
    \\f\n\
    \\STX\EOT&\DC2\ACK\180\ETX\NUL\185\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT&\SOH\DC2\EOT\180\ETX\b\ETB\n\
    \\f\n\
    \\EOT\EOT&\STX\NUL\DC2\EOT\181\ETX\STX&\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\EOT\DC2\EOT\181\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\ACK\DC2\EOT\181\ETX\v\NAK\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\SOH\DC2\EOT\181\ETX\SYN!\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\ETX\DC2\EOT\181\ETX$%\n\
    \\f\n\
    \\EOT\EOT&\STX\SOH\DC2\EOT\182\ETX\STX*\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\EOT\DC2\EOT\182\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\ACK\DC2\EOT\182\ETX\v\ETB\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\SOH\DC2\EOT\182\ETX\CAN%\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\ETX\DC2\EOT\182\ETX()\n\
    \\f\n\
    \\EOT\EOT&\STX\STX\DC2\EOT\183\ETX\STX \n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\EOT\DC2\EOT\183\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\ENQ\DC2\EOT\183\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\SOH\DC2\EOT\183\ETX\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\ETX\DC2\EOT\183\ETX\RS\US\n\
    \\f\n\
    \\EOT\EOT&\STX\ETX\DC2\EOT\184\ETX\STX \n\
    \\r\n\
    \\ENQ\EOT&\STX\ETX\EOT\DC2\EOT\184\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\ETX\ENQ\DC2\EOT\184\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT&\STX\ETX\SOH\DC2\EOT\184\ETX\DC1\ESC\n\
    \\r\n\
    \\ENQ\EOT&\STX\ETX\ETX\DC2\EOT\184\ETX\RS\US\n\
    \\f\n\
    \\STX\EOT'\DC2\ACK\187\ETX\NUL\207\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT'\SOH\DC2\EOT\187\ETX\b\SUB\n\
    \\f\n\
    \\EOT\EOT'\STX\NUL\DC2\EOT\188\ETX\STX\US\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\EOT\DC2\EOT\188\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\ENQ\DC2\EOT\188\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\SOH\DC2\EOT\188\ETX\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\ETX\DC2\EOT\188\ETX\GS\RS\n\
    \\f\n\
    \\EOT\EOT'\STX\SOH\DC2\EOT\189\ETX\STX%\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\EOT\DC2\EOT\189\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\ENQ\DC2\EOT\189\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\SOH\DC2\EOT\189\ETX\DC2 \n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\ETX\DC2\EOT\189\ETX#$\n\
    \\f\n\
    \\EOT\EOT'\STX\STX\DC2\EOT\190\ETX\STX+\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\EOT\DC2\EOT\190\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\ACK\DC2\EOT\190\ETX\v\SUB\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\SOH\DC2\EOT\190\ETX\ESC&\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\ETX\DC2\EOT\190\ETX)*\n\
    \\f\n\
    \\EOT\EOT'\STX\ETX\DC2\EOT\191\ETX\STX*\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\EOT\DC2\EOT\191\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\ENQ\DC2\EOT\191\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\SOH\DC2\EOT\191\ETX\DC2%\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\ETX\DC2\EOT\191\ETX()\n\
    \\f\n\
    \\EOT\EOT'\STX\EOT\DC2\EOT\192\ETX\STX+\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\EOT\DC2\EOT\192\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\ENQ\DC2\EOT\192\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\SOH\DC2\EOT\192\ETX\DC1&\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\ETX\DC2\EOT\192\ETX)*\n\
    \\f\n\
    \\EOT\EOT'\STX\ENQ\DC2\EOT\193\ETX\STX#\n\
    \\r\n\
    \\ENQ\EOT'\STX\ENQ\EOT\DC2\EOT\193\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\ENQ\ENQ\DC2\EOT\193\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\ENQ\SOH\DC2\EOT\193\ETX\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT'\STX\ENQ\ETX\DC2\EOT\193\ETX!\"\n\
    \\f\n\
    \\EOT\EOT'\STX\ACK\DC2\EOT\194\ETX\STX$\n\
    \\r\n\
    \\ENQ\EOT'\STX\ACK\EOT\DC2\EOT\194\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\ACK\ENQ\DC2\EOT\194\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\ACK\SOH\DC2\EOT\194\ETX\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT'\STX\ACK\ETX\DC2\EOT\194\ETX!#\n\
    \\f\n\
    \\EOT\EOT'\STX\a\DC2\EOT\195\ETX\STX!\n\
    \\r\n\
    \\ENQ\EOT'\STX\a\EOT\DC2\EOT\195\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\a\ENQ\DC2\EOT\195\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\a\SOH\DC2\EOT\195\ETX\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT'\STX\a\ETX\DC2\EOT\195\ETX\US \n\
    \\f\n\
    \\EOT\EOT'\STX\b\DC2\EOT\196\ETX\STX!\n\
    \\r\n\
    \\ENQ\EOT'\STX\b\EOT\DC2\EOT\196\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\b\ENQ\DC2\EOT\196\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\b\SOH\DC2\EOT\196\ETX\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT'\STX\b\ETX\DC2\EOT\196\ETX\US \n\
    \\SO\n\
    \\EOT\EOT'\EOT\NUL\DC2\ACK\198\ETX\STX\204\ETX\ETX\n\
    \\r\n\
    \\ENQ\EOT'\EOT\NUL\SOH\DC2\EOT\198\ETX\a\f\n\
    \\SO\n\
    \\ACK\EOT'\EOT\NUL\STX\NUL\DC2\EOT\199\ETX\EOT\SYN\n\
    \\SI\n\
    \\a\EOT'\EOT\NUL\STX\NUL\SOH\DC2\EOT\199\ETX\EOT\DC1\n\
    \\SI\n\
    \\a\EOT'\EOT\NUL\STX\NUL\STX\DC2\EOT\199\ETX\DC4\NAK\n\
    \\SO\n\
    \\ACK\EOT'\EOT\NUL\STX\SOH\DC2\EOT\200\ETX\EOT\SUB\n\
    \\SI\n\
    \\a\EOT'\EOT\NUL\STX\SOH\SOH\DC2\EOT\200\ETX\EOT\NAK\n\
    \\SI\n\
    \\a\EOT'\EOT\NUL\STX\SOH\STX\DC2\EOT\200\ETX\CAN\EM\n\
    \\SO\n\
    \\ACK\EOT'\EOT\NUL\STX\STX\DC2\EOT\201\ETX\EOT\SUB\n\
    \\SI\n\
    \\a\EOT'\EOT\NUL\STX\STX\SOH\DC2\EOT\201\ETX\EOT\NAK\n\
    \\SI\n\
    \\a\EOT'\EOT\NUL\STX\STX\STX\DC2\EOT\201\ETX\CAN\EM\n\
    \\SO\n\
    \\ACK\EOT'\EOT\NUL\STX\ETX\DC2\EOT\202\ETX\EOT\NAK\n\
    \\SI\n\
    \\a\EOT'\EOT\NUL\STX\ETX\SOH\DC2\EOT\202\ETX\EOT\DLE\n\
    \\SI\n\
    \\a\EOT'\EOT\NUL\STX\ETX\STX\DC2\EOT\202\ETX\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT'\EOT\NUL\STX\EOT\DC2\EOT\203\ETX\EOT\SYN\n\
    \\SI\n\
    \\a\EOT'\EOT\NUL\STX\EOT\SOH\DC2\EOT\203\ETX\EOT\DC1\n\
    \\SI\n\
    \\a\EOT'\EOT\NUL\STX\EOT\STX\DC2\EOT\203\ETX\DC4\NAK\n\
    \\f\n\
    \\EOT\EOT'\STX\t\DC2\EOT\205\ETX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT'\STX\t\EOT\DC2\EOT\205\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\t\ACK\DC2\EOT\205\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT'\STX\t\SOH\DC2\EOT\205\ETX\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT'\STX\t\ETX\DC2\EOT\205\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT'\STX\n\
    \\DC2\EOT\206\ETX\STX%\n\
    \\r\n\
    \\ENQ\EOT'\STX\n\
    \\EOT\DC2\EOT\206\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\n\
    \\ENQ\DC2\EOT\206\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\n\
    \\SOH\DC2\EOT\206\ETX\DC2\US\n\
    \\r\n\
    \\ENQ\EOT'\STX\n\
    \\ETX\DC2\EOT\206\ETX\"$\n\
    \\\\n\
    \\STX\EOT(\DC2\ACK\210\ETX\NUL\211\ETX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT(\SOH\DC2\EOT\210\ETX\b\FS\n\
    \\198\SOH\n\
    \\STX\EOT)\DC2\ACK\216\ETX\NUL\219\ETX\SOH\SUB\183\SOH This will only contain locally cached BattleNet maps.\n\
    \ To download all ladder maps, log in and queue into a ladder match.\n\
    \ To download any other map, play a custom game on that map.\n\
    \\n\
    \\v\n\
    \\ETX\EOT)\SOH\DC2\EOT\216\ETX\b\GS\n\
    \6\n\
    \\EOT\EOT)\STX\NUL\DC2\EOT\217\ETX\STX&\"( All the maps in the \"Maps/\" directory.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\EOT\DC2\EOT\217\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\ENQ\DC2\EOT\217\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\SOH\DC2\EOT\217\ETX\DC2!\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\ETX\DC2\EOT\217\ETX$%\n\
    \4\n\
    \\EOT\EOT)\STX\SOH\DC2\EOT\218\ETX\STX*\"& All the maps in the BattleNet cache.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\EOT\DC2\EOT\218\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\ENQ\DC2\EOT\218\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\SOH\DC2\EOT\218\ETX\DC2%\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\ETX\DC2\EOT\218\ETX()\n\
    \\134\SOH\n\
    \\STX\EOT*\DC2\ACK\223\ETX\NUL\226\ETX\SOH\SUBx-----------------------------------------------------------------------------\n\
    \ Copies map data into the path specified.\n\
    \\n\
    \\v\n\
    \\ETX\EOT*\SOH\DC2\EOT\223\ETX\b\SYN\n\
    \h\n\
    \\EOT\EOT*\STX\NUL\DC2\EOT\224\ETX\STX\US\"Z Path the game process will write to, relative to the temp directory. (260 character max)\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\EOT\DC2\EOT\224\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\ENQ\DC2\EOT\224\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\SOH\DC2\EOT\224\ETX\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\ETX\DC2\EOT\224\ETX\GS\RS\n\
    \-\n\
    \\EOT\EOT*\STX\SOH\DC2\EOT\225\ETX\STX\RS\"\US Binary map data of a .SC2Map.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\EOT\DC2\EOT\225\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\ENQ\DC2\EOT\225\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\SOH\DC2\EOT\225\ETX\DC1\EM\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\ETX\DC2\EOT\225\ETX\FS\GS\n\
    \\f\n\
    \\STX\EOT+\DC2\ACK\228\ETX\NUL\233\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT+\SOH\DC2\EOT\228\ETX\b\ETB\n\
    \\SO\n\
    \\EOT\EOT+\EOT\NUL\DC2\ACK\229\ETX\STX\231\ETX\ETX\n\
    \\r\n\
    \\ENQ\EOT+\EOT\NUL\SOH\DC2\EOT\229\ETX\a\f\n\
    \\SO\n\
    \\ACK\EOT+\EOT\NUL\STX\NUL\DC2\EOT\230\ETX\EOT\ETB\n\
    \\SI\n\
    \\a\EOT+\EOT\NUL\STX\NUL\SOH\DC2\EOT\230\ETX\EOT\DC2\n\
    \\SI\n\
    \\a\EOT+\EOT\NUL\STX\NUL\STX\DC2\EOT\230\ETX\NAK\SYN\n\
    \\f\n\
    \\EOT\EOT+\STX\NUL\DC2\EOT\232\ETX\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\EOT\DC2\EOT\232\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\ACK\DC2\EOT\232\ETX\v\DLE\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\SOH\DC2\EOT\232\ETX\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\ETX\DC2\EOT\232\ETX\EM\SUB\n\
    \\\\n\
    \\STX\EOT,\DC2\ACK\236\ETX\NUL\237\ETX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT,\SOH\DC2\EOT\236\ETX\b\DC3\n\
    \\f\n\
    \\STX\EOT-\DC2\ACK\239\ETX\NUL\244\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT-\SOH\DC2\EOT\239\ETX\b\DC4\n\
    \\f\n\
    \\EOT\EOT-\STX\NUL\DC2\EOT\240\ETX\STX#\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\EOT\DC2\EOT\240\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\ENQ\DC2\EOT\240\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\SOH\DC2\EOT\240\ETX\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\ETX\DC2\EOT\240\ETX!\"\n\
    \\f\n\
    \\EOT\EOT-\STX\SOH\DC2\EOT\241\ETX\STX#\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\EOT\DC2\EOT\241\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\ENQ\DC2\EOT\241\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\SOH\DC2\EOT\241\ETX\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\ETX\DC2\EOT\241\ETX!\"\n\
    \\f\n\
    \\EOT\EOT-\STX\STX\DC2\EOT\242\ETX\STX!\n\
    \\r\n\
    \\ENQ\EOT-\STX\STX\EOT\DC2\EOT\242\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\STX\ENQ\DC2\EOT\242\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT-\STX\STX\SOH\DC2\EOT\242\ETX\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT-\STX\STX\ETX\DC2\EOT\242\ETX\US \n\
    \\f\n\
    \\EOT\EOT-\STX\ETX\DC2\EOT\243\ETX\STX!\n\
    \\r\n\
    \\ENQ\EOT-\STX\ETX\EOT\DC2\EOT\243\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\ETX\ENQ\DC2\EOT\243\ETX\v\DC1\n\
    \\r\n\
    \\ENQ\EOT-\STX\ETX\SOH\DC2\EOT\243\ETX\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT-\STX\ETX\ETX\DC2\EOT\243\ETX\US \n\
    \\\\n\
    \\STX\EOT.\DC2\ACK\247\ETX\NUL\249\ETX\SOH\SUBN-----------------------------------------------------------------------------\n\
    \\n\
    \\v\n\
    \\ETX\EOT.\SOH\DC2\EOT\247\ETX\b\DC4\n\
    \\f\n\
    \\EOT\EOT.\STX\NUL\DC2\EOT\248\ETX\STX\"\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\EOT\DC2\EOT\248\ETX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\ACK\DC2\EOT\248\ETX\v\ETB\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\SOH\DC2\EOT\248\ETX\CAN\GS\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\ETX\DC2\EOT\248\ETX !\n\
    \\f\n\
    \\STX\EOT/\DC2\ACK\251\ETX\NUL\252\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT/\SOH\DC2\EOT\251\ETX\b\NAK\n\
    \\FS\n\
    \\STX\ENQ\SOH\DC2\ACK\131\EOT\NUL\142\EOT\SOH2\SO\n\
    \ Game Setup\n\
    \\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\SOH\SOH\DC2\EOT\131\EOT\ENQ\SI\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\NUL\DC2\EOT\132\EOT\STX\SI\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\NUL\SOH\DC2\EOT\132\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\NUL\STX\DC2\EOT\132\EOT\r\SO\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\SOH\DC2\EOT\133\EOT\STX\v\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SOH\SOH\DC2\EOT\133\EOT\STX\ACK\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SOH\STX\DC2\EOT\133\EOT\t\n\
    \\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\STX\DC2\EOT\134\EOT\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\STX\SOH\DC2\EOT\134\EOT\STX\b\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\STX\STX\DC2\EOT\134\EOT\v\f\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\ETX\DC2\EOT\135\EOT\STX\DC1\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ETX\SOH\DC2\EOT\135\EOT\STX\f\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ETX\STX\DC2\EOT\135\EOT\SI\DLE\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\EOT\DC2\EOT\136\EOT\STX\v\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\EOT\SOH\DC2\EOT\136\EOT\STX\ACK\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\EOT\STX\DC2\EOT\136\EOT\t\n\
    \\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\ENQ\DC2\EOT\137\EOT\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ENQ\SOH\DC2\EOT\137\EOT\STX\b\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ENQ\STX\DC2\EOT\137\EOT\v\f\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\ACK\DC2\EOT\138\EOT\STX\SI\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ACK\SOH\DC2\EOT\138\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ACK\STX\DC2\EOT\138\EOT\r\SO\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\a\DC2\EOT\139\EOT\STX\DC2\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\a\SOH\DC2\EOT\139\EOT\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\a\STX\DC2\EOT\139\EOT\DLE\DC1\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\b\DC2\EOT\140\EOT\STX\DC1\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\b\SOH\DC2\EOT\140\EOT\STX\f\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\b\STX\DC2\EOT\140\EOT\SI\DLE\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\t\DC2\EOT\141\EOT\STX\DC3\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\t\SOH\DC2\EOT\141\EOT\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\t\STX\DC2\EOT\141\EOT\DLE\DC2\n\
    \\f\n\
    \\STX\ENQ\STX\DC2\ACK\144\EOT\NUL\148\EOT\SOH\n\
    \\v\n\
    \\ETX\ENQ\STX\SOH\DC2\EOT\144\EOT\ENQ\SI\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\NUL\DC2\EOT\145\EOT\STX\DC2\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\NUL\SOH\DC2\EOT\145\EOT\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\NUL\STX\DC2\EOT\145\EOT\DLE\DC1\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\SOH\DC2\EOT\146\EOT\STX\SI\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\SOH\SOH\DC2\EOT\146\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\SOH\STX\DC2\EOT\146\EOT\r\SO\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\STX\DC2\EOT\147\EOT\STX\SI\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\STX\SOH\DC2\EOT\147\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\STX\STX\DC2\EOT\147\EOT\r\SO\n\
    \\f\n\
    \\STX\ENQ\ETX\DC2\ACK\150\EOT\NUL\157\EOT\SOH\n\
    \\v\n\
    \\ETX\ENQ\ETX\SOH\DC2\EOT\150\EOT\ENQ\f\n\
    \\f\n\
    \\EOT\ENQ\ETX\STX\NUL\DC2\EOT\151\EOT\STX\DC2\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\NUL\SOH\DC2\EOT\151\EOT\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\NUL\STX\DC2\EOT\151\EOT\DLE\DC1\n\
    \\f\n\
    \\EOT\ENQ\ETX\STX\SOH\DC2\EOT\152\EOT\STX\v\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\SOH\SOH\DC2\EOT\152\EOT\STX\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\SOH\STX\DC2\EOT\152\EOT\t\n\
    \\n\
    \\f\n\
    \\EOT\ENQ\ETX\STX\STX\DC2\EOT\153\EOT\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\STX\SOH\DC2\EOT\153\EOT\STX\b\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\STX\STX\DC2\EOT\153\EOT\v\f\n\
    \\f\n\
    \\EOT\ENQ\ETX\STX\ETX\DC2\EOT\154\EOT\STX\f\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ETX\SOH\DC2\EOT\154\EOT\STX\a\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ETX\STX\DC2\EOT\154\EOT\n\
    \\v\n\
    \\f\n\
    \\EOT\ENQ\ETX\STX\EOT\DC2\EOT\155\EOT\STX\f\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\EOT\SOH\DC2\EOT\155\EOT\STX\a\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\EOT\STX\DC2\EOT\155\EOT\n\
    \\v\n\
    \\f\n\
    \\EOT\ENQ\ETX\STX\ENQ\DC2\EOT\156\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ENQ\SOH\DC2\EOT\156\EOT\STX\ENQ\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ENQ\STX\DC2\EOT\156\EOT\b\t\n\
    \\f\n\
    \\STX\EOT0\DC2\ACK\159\EOT\NUL\167\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT0\SOH\DC2\EOT\159\EOT\b\DC3\n\
    \\f\n\
    \\EOT\EOT0\STX\NUL\DC2\EOT\160\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\EOT\DC2\EOT\160\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\ACK\DC2\EOT\160\EOT\v\NAK\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\SOH\DC2\EOT\160\EOT\SYN\SUB\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\ETX\DC2\EOT\160\EOT\GS\RS\n\
    \0\n\
    \\EOT\EOT0\STX\SOH\DC2\EOT\163\EOT\STX\EM\SUB\" Only used for a computer player.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\EOT\DC2\EOT\163\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\ACK\DC2\EOT\163\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\SOH\DC2\EOT\163\EOT\DLE\DC4\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\ETX\DC2\EOT\163\EOT\ETB\CAN\n\
    \\f\n\
    \\EOT\EOT0\STX\STX\DC2\EOT\164\EOT\STX%\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\EOT\DC2\EOT\164\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\ACK\DC2\EOT\164\EOT\v\NAK\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\SOH\DC2\EOT\164\EOT\SYN \n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\ETX\DC2\EOT\164\EOT#$\n\
    \\f\n\
    \\EOT\EOT0\STX\ETX\DC2\EOT\165\EOT\STX\"\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\EOT\DC2\EOT\165\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\ENQ\DC2\EOT\165\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\SOH\DC2\EOT\165\EOT\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\ETX\DC2\EOT\165\EOT !\n\
    \\f\n\
    \\EOT\EOT0\STX\EOT\DC2\EOT\166\EOT\STX \n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\EOT\DC2\EOT\166\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\ACK\DC2\EOT\166\EOT\v\DC2\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\SOH\DC2\EOT\166\EOT\DC3\ESC\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\ETX\DC2\EOT\166\EOT\RS\US\n\
    \\f\n\
    \\STX\EOT1\DC2\ACK\169\EOT\NUL\177\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT1\SOH\DC2\EOT\169\EOT\b\SUB\n\
    \\f\n\
    \\EOT\EOT1\STX\NUL\DC2\EOT\170\EOT\STX\"\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\EOT\DC2\EOT\170\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\ACK\DC2\EOT\170\EOT\v\DC2\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\SOH\DC2\EOT\170\EOT\DC3\GS\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\ETX\DC2\EOT\170\EOT !\n\
    \\f\n\
    \\EOT\EOT1\STX\SOH\DC2\EOT\171\EOT\STX*\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\EOT\DC2\EOT\171\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\ACK\DC2\EOT\171\EOT\v\DC2\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\SOH\DC2\EOT\171\EOT\DC3%\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\ETX\DC2\EOT\171\EOT()\n\
    \j\n\
    \\EOT\EOT1\STX\STX\DC2\EOT\174\EOT\STX\ESC\SUB- Below are only relevant for feature layers.\n\
    \\"- Set the screen camera width in world units.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\EOT\DC2\EOT\174\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\ENQ\DC2\EOT\174\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\SOH\DC2\EOT\174\EOT\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\ETX\DC2\EOT\174\EOT\EM\SUB\n\
    \2\n\
    \\EOT\EOT1\STX\ETX\DC2\EOT\175\EOT\STX*\"$ Crop minimap to the playable area.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\EOT\DC2\EOT\175\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\ENQ\DC2\EOT\175\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\SOH\DC2\EOT\175\EOT\DLE%\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\ETX\DC2\EOT\175\EOT()\n\
    \W\n\
    \\EOT\EOT1\STX\EOT\DC2\EOT\176\EOT\STX*\"I Return unit_type on the minimap, and potentially other cheating layers.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\EOT\EOT\DC2\EOT\176\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\EOT\ENQ\DC2\EOT\176\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT1\STX\EOT\SOH\DC2\EOT\176\EOT\DLE%\n\
    \\r\n\
    \\ENQ\EOT1\STX\EOT\ETX\DC2\EOT\176\EOT()\n\
    \\f\n\
    \\STX\EOT2\DC2\ACK\179\EOT\NUL\199\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT2\SOH\DC2\EOT\179\EOT\b\CAN\n\
    \!\n\
    \\EOT\EOT2\STX\NUL\DC2\EOT\181\EOT\STX\CAN\SUB\DC3 Interface options\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\EOT\DC2\EOT\181\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\ENQ\DC2\EOT\181\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\SOH\DC2\EOT\181\EOT\DLE\DC3\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\ETX\DC2\EOT\181\EOT\SYN\ETB\n\
    \\f\n\
    \\EOT\EOT2\STX\SOH\DC2\EOT\182\EOT\STX\SUB\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\EOT\DC2\EOT\182\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\ENQ\DC2\EOT\182\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\SOH\DC2\EOT\182\EOT\DLE\NAK\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\ETX\DC2\EOT\182\EOT\CAN\EM\n\
    \ \n\
    \\EOT\EOT2\STX\STX\DC2\EOT\183\EOT\STX0\"\DC2 Omit to disable.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\EOT\DC2\EOT\183\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\ACK\DC2\EOT\183\EOT\v\GS\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\SOH\DC2\EOT\183\EOT\RS+\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\ETX\DC2\EOT\183\EOT./\n\
    \ \n\
    \\EOT\EOT2\STX\ETX\DC2\EOT\184\EOT\STX)\"\DC2 Omit to disable.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\ETX\EOT\DC2\EOT\184\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\ETX\ACK\DC2\EOT\184\EOT\v\GS\n\
    \\r\n\
    \\ENQ\EOT2\STX\ETX\SOH\DC2\EOT\184\EOT\RS$\n\
    \\r\n\
    \\ENQ\EOT2\STX\ETX\ETX\DC2\EOT\184\EOT'(\n\
    \X\n\
    \\EOT\EOT2\STX\EOT\DC2\EOT\185\EOT\STX!\"J By default cloaked units are completely hidden. This shows some details.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\EOT\EOT\DC2\EOT\185\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\EOT\ENQ\DC2\EOT\185\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT2\STX\EOT\SOH\DC2\EOT\185\EOT\DLE\FS\n\
    \\r\n\
    \\ENQ\EOT2\STX\EOT\ETX\DC2\EOT\185\EOT\US \n\
    \y\n\
    \\EOT\EOT2\STX\ENQ\DC2\EOT\186\EOT\STX*\"k By default burrowed units are completely hidden. This shows some details for those that produce a shadow.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\ENQ\EOT\DC2\EOT\186\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\ENQ\ENQ\DC2\EOT\186\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT2\STX\ENQ\SOH\DC2\EOT\186\EOT\DLE%\n\
    \\r\n\
    \\ENQ\EOT2\STX\ENQ\ETX\DC2\EOT\186\EOT()\n\
    \h\n\
    \\EOT\EOT2\STX\ACK\DC2\EOT\187\EOT\STX&\"Z Return placeholder units (buildings to be constructed), both for raw and feature layers.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\ACK\EOT\DC2\EOT\187\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\ACK\ENQ\DC2\EOT\187\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT2\STX\ACK\SOH\DC2\EOT\187\EOT\DLE!\n\
    \\r\n\
    \\ENQ\EOT2\STX\ACK\ETX\DC2\EOT\187\EOT$%\n\
    \\231\STX\n\
    \\EOT\EOT2\STX\a\DC2\EOT\194\EOT\STX*\SUB\216\STX By default raw actions select, act and revert the selection. This is useful\n\
    \ if you're playing simultaneously with the agent so it doesn't steal your\n\
    \ selection. This inflates APM (due to deselect) and makes the actions hard\n\
    \ to follow in a replay. Setting this to true will cause raw actions to do\n\
    \ select, act, but not revert the selection.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\a\EOT\DC2\EOT\194\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\a\ENQ\DC2\EOT\194\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT2\STX\a\SOH\DC2\EOT\194\EOT\DLE%\n\
    \\r\n\
    \\ENQ\EOT2\STX\a\ETX\DC2\EOT\194\EOT()\n\
    \\170\SOH\n\
    \\EOT\EOT2\STX\b\DC2\EOT\198\EOT\STX.\SUB\155\SOH Changes the coordinates in raw.proto to be relative to the playable area.\n\
    \ The map_size and playable_area will be the diagonal of the real playable area.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\b\EOT\DC2\EOT\198\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\b\ENQ\DC2\EOT\198\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT2\STX\b\SOH\DC2\EOT\198\EOT\DLE)\n\
    \\r\n\
    \\ENQ\EOT2\STX\b\ETX\DC2\EOT\198\EOT,-\n\
    \\f\n\
    \\STX\EOT3\DC2\ACK\201\EOT\NUL\211\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT3\SOH\DC2\EOT\201\EOT\b\DC2\n\
    \\182\SOH\n\
    \\EOT\EOT3\STX\NUL\DC2\EOT\204\EOT\STX \SUB\167\SOH Identifier that will be used to reference this player.\n\
    \ SC2 will always assign playerIds starting from 1 in standard Melee maps. This may not be true in custom maps.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\EOT\DC2\EOT\204\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\ENQ\DC2\EOT\204\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\SOH\DC2\EOT\204\EOT\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\ETX\DC2\EOT\204\EOT\RS\US\n\
    \\f\n\
    \\EOT\EOT3\STX\SOH\DC2\EOT\205\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\EOT\DC2\EOT\205\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\ACK\DC2\EOT\205\EOT\v\NAK\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\SOH\DC2\EOT\205\EOT\SYN\SUB\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\ETX\DC2\EOT\205\EOT\GS\RS\n\
    \\f\n\
    \\EOT\EOT3\STX\STX\DC2\EOT\206\EOT\STX#\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\EOT\DC2\EOT\206\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\ACK\DC2\EOT\206\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\SOH\DC2\EOT\206\EOT\DLE\RS\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\ETX\DC2\EOT\206\EOT!\"\n\
    \F\n\
    \\EOT\EOT3\STX\ETX\DC2\EOT\207\EOT\STX \"8 Only populated for your player or when watching replay\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\EOT\DC2\EOT\207\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\ACK\DC2\EOT\207\EOT\v\SI\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\SOH\DC2\EOT\207\EOT\DLE\ESC\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\ETX\DC2\EOT\207\EOT\RS\US\n\
    \\f\n\
    \\EOT\EOT3\STX\EOT\DC2\EOT\208\EOT\STX%\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\EOT\DC2\EOT\208\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\ACK\DC2\EOT\208\EOT\v\NAK\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\SOH\DC2\EOT\208\EOT\SYN \n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\ETX\DC2\EOT\208\EOT#$\n\
    \\f\n\
    \\EOT\EOT3\STX\ENQ\DC2\EOT\209\EOT\STX \n\
    \\r\n\
    \\ENQ\EOT3\STX\ENQ\EOT\DC2\EOT\209\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\ENQ\ACK\DC2\EOT\209\EOT\v\DC2\n\
    \\r\n\
    \\ENQ\EOT3\STX\ENQ\SOH\DC2\EOT\209\EOT\DC3\ESC\n\
    \\r\n\
    \\ENQ\EOT3\STX\ENQ\ETX\DC2\EOT\209\EOT\RS\US\n\
    \\f\n\
    \\EOT\EOT3\STX\ACK\DC2\EOT\210\EOT\STX\"\n\
    \\r\n\
    \\ENQ\EOT3\STX\ACK\EOT\DC2\EOT\210\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\ACK\ENQ\DC2\EOT\210\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT3\STX\ACK\SOH\DC2\EOT\210\EOT\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT3\STX\ACK\ETX\DC2\EOT\210\EOT !\n\
    \\GS\n\
    \\STX\EOT4\DC2\ACK\218\EOT\NUL\230\EOT\SOH2\SI\n\
    \ During Game\n\
    \\n\
    \\n\
    \\v\n\
    \\ETX\EOT4\SOH\DC2\EOT\218\EOT\b\DC4\n\
    \\f\n\
    \\EOT\EOT4\STX\NUL\DC2\EOT\219\EOT\STX \n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\EOT\DC2\EOT\219\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\ENQ\DC2\EOT\219\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\SOH\DC2\EOT\219\EOT\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\ETX\DC2\EOT\219\EOT\RS\US\n\
    \\f\n\
    \\EOT\EOT4\STX\SOH\DC2\EOT\220\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\EOT\DC2\EOT\220\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\ENQ\DC2\EOT\220\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\SOH\DC2\EOT\220\EOT\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\ETX\DC2\EOT\220\EOT\GS\RS\n\
    \\f\n\
    \\EOT\EOT4\STX\STX\DC2\EOT\221\EOT\STX\RS\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\EOT\DC2\EOT\221\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\ENQ\DC2\EOT\221\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\SOH\DC2\EOT\221\EOT\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\ETX\DC2\EOT\221\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOT4\STX\ETX\DC2\EOT\222\EOT\STX\US\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\EOT\DC2\EOT\222\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\ENQ\DC2\EOT\222\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\SOH\DC2\EOT\222\EOT\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\ETX\DC2\EOT\222\EOT\GS\RS\n\
    \\f\n\
    \\EOT\EOT4\STX\EOT\DC2\EOT\223\EOT\STX \n\
    \\r\n\
    \\ENQ\EOT4\STX\EOT\EOT\DC2\EOT\223\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\EOT\ENQ\DC2\EOT\223\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\EOT\SOH\DC2\EOT\223\EOT\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT4\STX\EOT\ETX\DC2\EOT\223\EOT\RS\US\n\
    \\f\n\
    \\EOT\EOT4\STX\ENQ\DC2\EOT\224\EOT\STX \n\
    \\r\n\
    \\ENQ\EOT4\STX\ENQ\EOT\DC2\EOT\224\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\ENQ\ENQ\DC2\EOT\224\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\ENQ\SOH\DC2\EOT\224\EOT\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT4\STX\ENQ\ETX\DC2\EOT\224\EOT\RS\US\n\
    \\f\n\
    \\EOT\EOT4\STX\ACK\DC2\EOT\225\EOT\STX#\n\
    \\r\n\
    \\ENQ\EOT4\STX\ACK\EOT\DC2\EOT\225\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\ACK\ENQ\DC2\EOT\225\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\ACK\SOH\DC2\EOT\225\EOT\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT4\STX\ACK\ETX\DC2\EOT\225\EOT!\"\n\
    \\f\n\
    \\EOT\EOT4\STX\a\DC2\EOT\226\EOT\STX(\n\
    \\r\n\
    \\ENQ\EOT4\STX\a\EOT\DC2\EOT\226\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\a\ENQ\DC2\EOT\226\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\a\SOH\DC2\EOT\226\EOT\DC2#\n\
    \\r\n\
    \\ENQ\EOT4\STX\a\ETX\DC2\EOT\226\EOT&'\n\
    \\f\n\
    \\EOT\EOT4\STX\b\DC2\EOT\227\EOT\STX!\n\
    \\r\n\
    \\ENQ\EOT4\STX\b\EOT\DC2\EOT\227\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\b\ENQ\DC2\EOT\227\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\b\SOH\DC2\EOT\227\EOT\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT4\STX\b\ETX\DC2\EOT\227\EOT\US \n\
    \\f\n\
    \\EOT\EOT4\STX\t\DC2\EOT\228\EOT\STX'\n\
    \\r\n\
    \\ENQ\EOT4\STX\t\EOT\DC2\EOT\228\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\t\ENQ\DC2\EOT\228\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\t\SOH\DC2\EOT\228\EOT\DC2!\n\
    \\r\n\
    \\ENQ\EOT4\STX\t\ETX\DC2\EOT\228\EOT$&\n\
    \\f\n\
    \\EOT\EOT4\STX\n\
    \\DC2\EOT\229\EOT\STX#\n\
    \\r\n\
    \\ENQ\EOT4\STX\n\
    \\EOT\DC2\EOT\229\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\n\
    \\ENQ\DC2\EOT\229\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\n\
    \\SOH\DC2\EOT\229\EOT\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT4\STX\n\
    \\ETX\DC2\EOT\229\EOT \"\n\
    \\f\n\
    \\STX\EOT5\DC2\ACK\232\EOT\NUL\243\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT5\SOH\DC2\EOT\232\EOT\b\DC3\n\
    \\f\n\
    \\EOT\EOT5\STX\NUL\DC2\EOT\233\EOT\STX \n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\EOT\DC2\EOT\233\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\ENQ\DC2\EOT\233\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\SOH\DC2\EOT\233\EOT\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\ETX\DC2\EOT\233\EOT\RS\US\n\
    \\f\n\
    \\EOT\EOT5\STX\SOH\DC2\EOT\234\EOT\STX*\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\EOT\DC2\EOT\234\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\ACK\DC2\EOT\234\EOT\v\ETB\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\SOH\DC2\EOT\234\EOT\CAN%\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\ETX\DC2\EOT\234\EOT()\n\
    \\f\n\
    \\EOT\EOT5\STX\STX\DC2\EOT\235\EOT\STX\GS\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\EOT\DC2\EOT\235\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\ACK\DC2\EOT\235\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\SOH\DC2\EOT\235\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\ETX\DC2\EOT\235\EOT\SUB\FS\n\
    \b\n\
    \\EOT\EOT5\STX\ETX\DC2\EOT\236\EOT\STX*\"T Abilities available in the selection. Enabled if in this list, disabled otherwise.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\EOT\DC2\EOT\236\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\ACK\DC2\EOT\236\EOT\v\ESC\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\SOH\DC2\EOT\236\EOT\FS%\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\ETX\DC2\EOT\236\EOT()\n\
    \\f\n\
    \\EOT\EOT5\STX\EOT\DC2\EOT\237\EOT\STX\ESC\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\EOT\DC2\EOT\237\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\ACK\DC2\EOT\237\EOT\v\DLE\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\SOH\DC2\EOT\237\EOT\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\ETX\DC2\EOT\237\EOT\EM\SUB\n\
    \6\n\
    \\EOT\EOT5\STX\ENQ\DC2\EOT\239\EOT\STX'\"( Populated if Raw interface is enabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\ENQ\EOT\DC2\EOT\239\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\ENQ\ACK\DC2\EOT\239\EOT\v\EM\n\
    \\r\n\
    \\ENQ\EOT5\STX\ENQ\SOH\DC2\EOT\239\EOT\SUB\"\n\
    \\r\n\
    \\ENQ\EOT5\STX\ENQ\ETX\DC2\EOT\239\EOT%&\n\
    \@\n\
    \\EOT\EOT5\STX\ACK\DC2\EOT\240\EOT\STX:\"2 Populated if Feature Layer interface is enabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\ACK\EOT\DC2\EOT\240\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\ACK\ACK\DC2\EOT\240\EOT\v\"\n\
    \\r\n\
    \\ENQ\EOT5\STX\ACK\SOH\DC2\EOT\240\EOT#5\n\
    \\r\n\
    \\ENQ\EOT5\STX\ACK\ETX\DC2\EOT\240\EOT89\n\
    \9\n\
    \\EOT\EOT5\STX\a\DC2\EOT\241\EOT\STX-\"+ Populated if Render interface is enabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\a\EOT\DC2\EOT\241\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\a\ACK\DC2\EOT\241\EOT\v\FS\n\
    \\r\n\
    \\ENQ\EOT5\STX\a\SOH\DC2\EOT\241\EOT\GS(\n\
    \\r\n\
    \\ENQ\EOT5\STX\a\ETX\DC2\EOT\241\EOT+,\n\
    \J\n\
    \\EOT\EOT5\STX\b\DC2\EOT\242\EOT\STX%\"< Populated if Feature Layer or Render interface is enabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\b\EOT\DC2\EOT\242\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\b\ACK\DC2\EOT\242\EOT\v\CAN\n\
    \\r\n\
    \\ENQ\EOT5\STX\b\SOH\DC2\EOT\242\EOT\EM \n\
    \\r\n\
    \\ENQ\EOT5\STX\b\ETX\DC2\EOT\242\EOT#$\n\
    \\f\n\
    \\STX\EOT6\DC2\ACK\245\EOT\NUL\252\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT6\SOH\DC2\EOT\245\EOT\b\SO\n\
    \6\n\
    \\EOT\EOT6\STX\NUL\DC2\EOT\246\EOT\STX$\"( Populated if Raw interface is enabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\EOT\DC2\EOT\246\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\ACK\DC2\EOT\246\EOT\v\DC4\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\SOH\DC2\EOT\246\EOT\NAK\US\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\ETX\DC2\EOT\246\EOT\"#\n\
    \@\n\
    \\EOT\EOT6\STX\SOH\DC2\EOT\247\EOT\STX2\"2 Populated if Feature Layer interface is enabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\EOT\DC2\EOT\247\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\ACK\DC2\EOT\247\EOT\v\CAN\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\SOH\DC2\EOT\247\EOT\EM-\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\ETX\DC2\EOT\247\EOT01\n\
    \J\n\
    \\EOT\EOT6\STX\STX\DC2\EOT\248\EOT\STX+\"< Not implemented. Populated if Render interface is enabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\EOT\DC2\EOT\248\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\ACK\DC2\EOT\248\EOT\v\CAN\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\SOH\DC2\EOT\248\EOT\EM&\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\ETX\DC2\EOT\248\EOT)*\n\
    \J\n\
    \\EOT\EOT6\STX\ETX\DC2\EOT\249\EOT\STX\"\"< Populated if Feature Layer or Render interface is enabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\EOT\DC2\EOT\249\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\ACK\DC2\EOT\249\EOT\v\DC3\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\SOH\DC2\EOT\249\EOT\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\ETX\DC2\EOT\249\EOT !\n\
    \G\n\
    \\EOT\EOT6\STX\EOT\DC2\EOT\250\EOT\STX&\"9 Chat messages as a player typing into the chat channel.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\EOT\EOT\DC2\EOT\250\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\EOT\ACK\DC2\EOT\250\EOT\v\NAK\n\
    \\r\n\
    \\ENQ\EOT6\STX\EOT\SOH\DC2\EOT\250\EOT\SYN!\n\
    \\r\n\
    \\ENQ\EOT6\STX\EOT\ETX\DC2\EOT\250\EOT$%\n\
    \m\n\
    \\EOT\EOT6\STX\ENQ\DC2\EOT\251\EOT\STX \"_ Populated for actions in ResponseObservation. The game loop on which the action was executed.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\ENQ\EOT\DC2\EOT\251\EOT\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\ENQ\ENQ\DC2\EOT\251\EOT\v\DC1\n\
    \\r\n\
    \\ENQ\EOT6\STX\ENQ\SOH\DC2\EOT\251\EOT\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT6\STX\ENQ\ETX\DC2\EOT\251\EOT\RS\US\n\
    \\f\n\
    \\STX\EOT7\DC2\ACK\254\EOT\NUL\133\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT7\SOH\DC2\EOT\254\EOT\b\DC2\n\
    \\SO\n\
    \\EOT\EOT7\EOT\NUL\DC2\ACK\255\EOT\STX\130\ENQ\ETX\n\
    \\r\n\
    \\ENQ\EOT7\EOT\NUL\SOH\DC2\EOT\255\EOT\a\SO\n\
    \\SO\n\
    \\ACK\EOT7\EOT\NUL\STX\NUL\DC2\EOT\128\ENQ\EOT\DC2\n\
    \\SI\n\
    \\a\EOT7\EOT\NUL\STX\NUL\SOH\DC2\EOT\128\ENQ\EOT\r\n\
    \\SI\n\
    \\a\EOT7\EOT\NUL\STX\NUL\STX\DC2\EOT\128\ENQ\DLE\DC1\n\
    \\SO\n\
    \\ACK\EOT7\EOT\NUL\STX\SOH\DC2\EOT\129\ENQ\EOT\r\n\
    \\SI\n\
    \\a\EOT7\EOT\NUL\STX\SOH\SOH\DC2\EOT\129\ENQ\EOT\b\n\
    \\SI\n\
    \\a\EOT7\EOT\NUL\STX\SOH\STX\DC2\EOT\129\ENQ\v\f\n\
    \\f\n\
    \\EOT\EOT7\STX\NUL\DC2\EOT\131\ENQ\STX\US\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\EOT\DC2\EOT\131\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\ACK\DC2\EOT\131\ENQ\v\DC2\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\SOH\DC2\EOT\131\ENQ\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\ETX\DC2\EOT\131\ENQ\GS\RS\n\
    \\f\n\
    \\EOT\EOT7\STX\SOH\DC2\EOT\132\ENQ\STX\RS\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\EOT\DC2\EOT\132\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\ENQ\DC2\EOT\132\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\SOH\DC2\EOT\132\ENQ\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\ETX\DC2\EOT\132\ENQ\FS\GS\n\
    \\f\n\
    \\STX\EOT8\DC2\ACK\135\ENQ\NUL\139\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT8\SOH\DC2\EOT\135\ENQ\b\DC3\n\
    \8\n\
    \\EOT\EOT8\STX\NUL\DC2\EOT\136\ENQ\STX\US\"* Only populated when using raw interface.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\EOT\DC2\EOT\136\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\ENQ\DC2\EOT\136\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\SOH\DC2\EOT\136\ENQ\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\ETX\DC2\EOT\136\ENQ\GS\RS\n\
    \\f\n\
    \\EOT\EOT8\STX\SOH\DC2\EOT\137\ENQ\STX!\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\EOT\DC2\EOT\137\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\ENQ\DC2\EOT\137\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\SOH\DC2\EOT\137\ENQ\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\ETX\DC2\EOT\137\ENQ\US \n\
    \\f\n\
    \\EOT\EOT8\STX\STX\DC2\EOT\138\ENQ\STX#\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\EOT\DC2\EOT\138\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\ACK\DC2\EOT\138\ENQ\v\ETB\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\SOH\DC2\EOT\138\ENQ\CAN\RS\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\ETX\DC2\EOT\138\ENQ!\"\n\
    \\f\n\
    \\STX\EOT9\DC2\ACK\141\ENQ\NUL\148\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT9\SOH\DC2\EOT\141\ENQ\b\SYN\n\
    \\SO\n\
    \\EOT\EOT9\b\NUL\DC2\ACK\142\ENQ\STX\147\ENQ\ETX\n\
    \\r\n\
    \\ENQ\EOT9\b\NUL\SOH\DC2\EOT\142\ENQ\b\SO\n\
    \\US\n\
    \\EOT\EOT9\STX\NUL\DC2\EOT\143\ENQ\EOT;\"\DC1 Not implemented\n\
    \\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\ACK\DC2\EOT\143\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\SOH\DC2\EOT\143\ENQ$6\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\ETX\DC2\EOT\143\ENQ9:\n\
    \\f\n\
    \\EOT\EOT9\STX\SOH\DC2\EOT\144\ENQ\EOT-\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\ACK\DC2\EOT\144\ENQ\EOT\FS\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\SOH\DC2\EOT\144\ENQ\GS(\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\ETX\DC2\EOT\144\ENQ+,\n\
    \\f\n\
    \\EOT\EOT9\STX\STX\DC2\EOT\145\ENQ\EOT>\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\ACK\DC2\EOT\145\ENQ\EOT$\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\SOH\DC2\EOT\145\ENQ%9\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\ETX\DC2\EOT\145\ENQ<=\n\
    \\US\n\
    \\EOT\EOT9\STX\ETX\DC2\EOT\146\ENQ\EOT<\"\DC1 Not implemented\n\
    \\n\
    \\r\n\
    \\ENQ\EOT9\STX\ETX\ACK\DC2\EOT\146\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT9\STX\ETX\SOH\DC2\EOT\146\ENQ$7\n\
    \\r\n\
    \\ENQ\EOT9\STX\ETX\ETX\DC2\EOT\146\ENQ:;\n\
    \\f\n\
    \\STX\EOT:\DC2\ACK\150\ENQ\NUL\152\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT:\SOH\DC2\EOT\150\ENQ\b'\n\
    \'\n\
    \\EOT\EOT:\STX\NUL\DC2\EOT\151\ENQ\STX \"\EM 0 to observe \"Everyone\"\n\
    \\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\EOT\DC2\EOT\151\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\ENQ\DC2\EOT\151\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\SOH\DC2\EOT\151\ENQ\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\ETX\DC2\EOT\151\ENQ\RS\US\n\
    \\f\n\
    \\STX\EOT;\DC2\ACK\154\ENQ\NUL\160\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT;\SOH\DC2\EOT\154\ENQ\b \n\
    \\f\n\
    \\EOT\EOT;\STX\NUL\DC2\EOT\155\ENQ\STX!\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\EOT\DC2\EOT\155\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\ACK\DC2\EOT\155\ENQ\v\DC2\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\SOH\DC2\EOT\155\ENQ\DC3\FS\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\ETX\DC2\EOT\155\ENQ\US \n\
    \\134\SOH\n\
    \\EOT\EOT;\STX\SOH\DC2\EOT\159\ENQ\STX\RS\SUBx Distance between camera and terrain. Larger value zooms out camera.\n\
    \ Defaults to standard camera distance if set to 0.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\EOT\DC2\EOT\159\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\ENQ\DC2\EOT\159\ENQ\v\DLE\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\SOH\DC2\EOT\159\ENQ\DC1\EM\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\ETX\DC2\EOT\159\ENQ\FS\GS\n\
    \\f\n\
    \\STX\EOT<\DC2\ACK\162\ENQ\NUL\164\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT<\SOH\DC2\EOT\162\ENQ\b(\n\
    \6\n\
    \\EOT\EOT<\STX\NUL\DC2\EOT\163\ENQ\STX \"( Not implemented. Value must be [1, 15]\n\
    \\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\EOT\DC2\EOT\163\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\ENQ\DC2\EOT\163\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\SOH\DC2\EOT\163\ENQ\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\ETX\DC2\EOT\163\ENQ\RS\US\n\
    \\f\n\
    \\STX\EOT=\DC2\ACK\166\ENQ\NUL\168\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT=\SOH\DC2\EOT\166\ENQ\b'\n\
    \\f\n\
    \\EOT\EOT=\STX\NUL\DC2\EOT\167\ENQ\STX \n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\EOT\DC2\EOT\167\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\ENQ\DC2\EOT\167\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\SOH\DC2\EOT\167\ENQ\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\ETX\DC2\EOT\167\ENQ\RS\US\n\
    \\f\n\
    \\STX\ENQ\EOT\DC2\ACK\170\ENQ\NUL\193\ENQ\SOH\n\
    \\v\n\
    \\ETX\ENQ\EOT\SOH\DC2\EOT\170\ENQ\ENQ\n\
    \\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\NUL\DC2\EOT\171\ENQ\STX\DC1\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\NUL\SOH\DC2\EOT\171\ENQ\STX\f\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\NUL\STX\DC2\EOT\171\ENQ\SI\DLE\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\SOH\DC2\EOT\172\ENQ\STX\DC4\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\SOH\SOH\DC2\EOT\172\ENQ\STX\SI\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\SOH\STX\DC2\EOT\172\ENQ\DC2\DC3\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\STX\DC2\EOT\173\ENQ\STX\ETB\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\STX\SOH\DC2\EOT\173\ENQ\STX\DC2\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\STX\STX\DC2\EOT\173\ENQ\NAK\SYN\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\ETX\DC2\EOT\174\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\ETX\SOH\DC2\EOT\174\ENQ\STX\NAK\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\ETX\STX\DC2\EOT\174\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\EOT\DC2\EOT\175\ENQ\STX\DC3\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\EOT\SOH\DC2\EOT\175\ENQ\STX\SO\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\EOT\STX\DC2\EOT\175\ENQ\DC1\DC2\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\ENQ\DC2\EOT\176\ENQ\STX\DC4\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\ENQ\SOH\DC2\EOT\176\ENQ\STX\SI\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\ENQ\STX\DC2\EOT\176\ENQ\DC2\DC3\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\ACK\DC2\EOT\177\ENQ\STX\CAN\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\ACK\SOH\DC2\EOT\177\ENQ\STX\DC3\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\ACK\STX\DC2\EOT\177\ENQ\SYN\ETB\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\a\DC2\EOT\178\ENQ\STX\NAK\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\a\SOH\DC2\EOT\178\ENQ\STX\SI\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\a\STX\DC2\EOT\178\ENQ\DC2\DC4\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\b\DC2\EOT\179\ENQ\STX\SUB\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\b\SOH\DC2\EOT\179\ENQ\STX\DC4\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\b\STX\DC2\EOT\179\ENQ\ETB\EM\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\t\DC2\EOT\180\ENQ\STX\DC3\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\t\SOH\DC2\EOT\180\ENQ\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\t\STX\DC2\EOT\180\ENQ\DLE\DC2\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\n\
    \\DC2\EOT\181\ENQ\STX\FS\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\n\
    \\SOH\DC2\EOT\181\ENQ\STX\ETB\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\n\
    \\STX\DC2\EOT\181\ENQ\SUB\ESC\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\v\DC2\EOT\182\ENQ\STX\DC4\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\v\SOH\DC2\EOT\182\ENQ\STX\SO\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\v\STX\DC2\EOT\182\ENQ\DC1\DC3\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\f\DC2\EOT\183\ENQ\STX\CAN\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\f\SOH\DC2\EOT\183\ENQ\STX\DC3\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\f\STX\DC2\EOT\183\ENQ\SYN\ETB\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\r\DC2\EOT\184\ENQ\STX\CAN\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\r\SOH\DC2\EOT\184\ENQ\STX\DC2\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\r\STX\DC2\EOT\184\ENQ\NAK\ETB\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\SO\DC2\EOT\185\ENQ\STX\DC2\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\SO\SOH\DC2\EOT\185\ENQ\STX\f\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\SO\STX\DC2\EOT\185\ENQ\SI\DC1\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\SI\DC2\EOT\186\ENQ\STX\EM\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\SI\SOH\DC2\EOT\186\ENQ\STX\DC3\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\SI\STX\DC2\EOT\186\ENQ\SYN\CAN\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\DLE\DC2\EOT\187\ENQ\STX\ESC\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\DLE\SOH\DC2\EOT\187\ENQ\STX\NAK\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\DLE\STX\DC2\EOT\187\ENQ\CAN\SUB\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\DC1\DC2\EOT\188\ENQ\STX\RS\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\DC1\SOH\DC2\EOT\188\ENQ\STX\CAN\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\DC1\STX\DC2\EOT\188\ENQ\ESC\GS\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\DC2\DC2\EOT\189\ENQ\STX\ETB\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\DC2\SOH\DC2\EOT\189\ENQ\STX\DC1\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\DC2\STX\DC2\EOT\189\ENQ\DC4\SYN\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\DC3\DC2\EOT\190\ENQ\STX\ETB\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\DC3\SOH\DC2\EOT\190\ENQ\STX\DC1\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\DC3\STX\DC2\EOT\190\ENQ\DC4\SYN\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\DC4\DC2\EOT\191\ENQ\STX\CAN\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\DC4\SOH\DC2\EOT\191\ENQ\STX\DC2\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\DC4\STX\DC2\EOT\191\ENQ\NAK\ETB\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\NAK\DC2\EOT\192\ENQ\STX\SYN\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\NAK\SOH\DC2\EOT\192\ENQ\STX\DLE\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\NAK\STX\DC2\EOT\192\ENQ\DC3\NAK\n\
    \\f\n\
    \\STX\ENQ\ENQ\DC2\ACK\195\ENQ\NUL\200\ENQ\SOH\n\
    \\v\n\
    \\ETX\ENQ\ENQ\SOH\DC2\EOT\195\ENQ\ENQ\v\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\NUL\DC2\EOT\196\ENQ\STX\SO\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\NUL\SOH\DC2\EOT\196\ENQ\STX\t\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\NUL\STX\DC2\EOT\196\ENQ\f\r\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\SOH\DC2\EOT\197\ENQ\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\SOH\SOH\DC2\EOT\197\ENQ\STX\b\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\SOH\STX\DC2\EOT\197\ENQ\v\f\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\STX\DC2\EOT\198\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\STX\SOH\DC2\EOT\198\ENQ\STX\ENQ\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\STX\STX\DC2\EOT\198\ENQ\b\t\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\ETX\DC2\EOT\199\ENQ\STX\DLE\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\ETX\SOH\DC2\EOT\199\ENQ\STX\v\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\ETX\STX\DC2\EOT\199\ENQ\SO\SI\n\
    \\f\n\
    \\STX\EOT>\DC2\ACK\202\ENQ\NUL\205\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT>\SOH\DC2\EOT\202\ENQ\b\DC4\n\
    \\f\n\
    \\EOT\EOT>\STX\NUL\DC2\EOT\203\ENQ\STX \n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\EOT\DC2\EOT\203\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\ENQ\DC2\EOT\203\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\SOH\DC2\EOT\203\ENQ\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\ETX\DC2\EOT\203\ENQ\RS\US\n\
    \\f\n\
    \\EOT\EOT>\STX\SOH\DC2\EOT\204\ENQ\STX\GS\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\EOT\DC2\EOT\204\ENQ\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\ACK\DC2\EOT\204\ENQ\v\DC1\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\SOH\DC2\EOT\204\ENQ\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\ETX\DC2\EOT\204\ENQ\ESC\FS"